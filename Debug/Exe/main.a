;#include <mega8.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;#include <string.h>
;#include "PN532_I2C.h"
;
;// Alphanumeric LCD functions
;#include <alcd.h>
;
;// Declare your global variables here
;
;#define DATA_REGISTER_EMPTY (1<<UDRE)
;#define RX_COMPLETE         (1<<RXC)
;#define FRAMING_ERROR       (1<<FE)
;#define PARITY_ERROR        (1<<UPE)
;#define DATA_OVERRUN        (1<<DOR)
;
;unsigned char GTC_Buffer[64];
;unsigned char GTC_Gate_ID[2] = {0x00, 0x00};
;
;// USART Receiver buffer
;#define RX_BUFFER_SIZE 8
;char rx_buffer[RX_BUFFER_SIZE];
;
;#if RX_BUFFER_SIZE <= 256
;unsigned char rx_wr_index=0,rx_rd_index=0;
;#else
;unsigned int rx_wr_index=0,rx_rd_index=0;
;#endif
;
;#if RX_BUFFER_SIZE < 256
;unsigned char rx_counter=0;
;#else
;unsigned int rx_counter=0;
;#endif
;
;// This flag is set on USART Receiver buffer overflow
;bit rx_buffer_overflow;
;
;// USART Receiver interrupt service routine
;interrupt [USART_RXC] void usart_rx_isr(void)
; 0000 0029 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 002A char status,data;
; 0000 002B status=UCSRA;
;PCODE: $0000000F VOL: 0
;	status -> R17
;	data -> R16
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 002C data=UDR;
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 002D if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 002E    {
; 0000 002F    rx_buffer[rx_wr_index++]=data;
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 0030 #if RX_BUFFER_SIZE == 256
; 0000 0031    // special case for receiver buffer size=256
; 0000 0032    if (++rx_counter == 0) rx_buffer_overflow=1;
; 0000 0033 #else
; 0000 0034    if (rx_wr_index == RX_BUFFER_SIZE) rx_wr_index=0;
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 0035    if (++rx_counter == RX_BUFFER_SIZE)
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 0036       {
; 0000 0037       rx_counter=0;
;PCODE: $00000025 VOL: 0
; 0000 0038       rx_buffer_overflow=1;
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 0039       }
; 0000 003A #endif
; 0000 003B    }
;PCODE: $00000029 VOL: 0
; 0000 003C }
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;
;#ifndef _DEBUG_TERMINAL_IO_
;// Get a character from the USART Receiver buffer
;#define _ALTERNATE_GETCHAR_
;#pragma used+
;char getchar(void)
; 0000 0043 {
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 0044 char data;
; 0000 0045 while (rx_counter==0);
;PCODE: $00000031 VOL: 0
;	data -> R17
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 0046 data=rx_buffer[rx_rd_index++];
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 0047 #if RX_BUFFER_SIZE != 256
; 0000 0048 if (rx_rd_index == RX_BUFFER_SIZE) rx_rd_index=0;
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 0049 #endif
; 0000 004A #asm("cli")
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
	cli
;PCODE: $00000042 VOL: 0
; 0000 004B --rx_counter;
;PCODE: $00000043 VOL: 0
; 0000 004C #asm("sei")
;PCODE: $00000044 VOL: 0
	sei
;PCODE: $00000045 VOL: 0
; 0000 004D return data;
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 004E }
;PCODE: $00000049 VOL: 0
;#pragma used-
;#endif
;
;// Standard Input/Output functions
;#include <stdio.h>
;
;// Global variables
;
;void main(void)
; 0000 0058 {
;PCODE: $0000004A VOL: 0
; 0000 0059 // Declare your local variables here
; 0000 005A int i, len;
; 0000 005B char ch;
; 0000 005C //unsigned char write_data[] = {'M', '.', ' ', 'A', 'R', 'I', 'E', 'F', ' ', 'F', '.', '.', '.', '.', '.', '.'};
; 0000 005D 
; 0000 005E // Input/Output Ports initialization
; 0000 005F // Port B initialization
; 0000 0060 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0061 DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
;	i -> R16,R17
;	len -> R18,R19
;	ch -> R21
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 0062 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0063 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (1<<PORTB1) | (0<<PORTB0);
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 0064 
; 0000 0065 // Port C initialization
; 0000 0066 // Function: Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0067 DDRC=(0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 0068 // State: Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0069 PORTC=(0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 006A 
; 0000 006B // Port D initialization
; 0000 006C // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=Out Bit2=In Bit1=In Bit0=In
; 0000 006D DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (1<<DDD3) | (1<<DDD2) | (0<<DDD1) | (0<<DDD0);
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 006E // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=1 Bit2=T Bit1=T Bit0=T
; 0000 006F PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (1<<PORTD3) | (1<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 0070 
; 0000 0071 // Timer/Counter 0 initialization
; 0000 0072 // Clock source: System Clock
; 0000 0073 // Clock value: Timer 0 Stopped
; 0000 0074 TCCR0=(0<<CS02) | (0<<CS01) | (0<<CS00);
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 0075 TCNT0=0x00;
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 0076 
; 0000 0077 // Timer/Counter 1 initialization
; 0000 0078 // Clock source: System Clock
; 0000 0079 // Clock value: Timer1 Stopped
; 0000 007A // Mode: Normal top=0xFFFF
; 0000 007B // OC1A output: Disconnected
; 0000 007C // OC1B output: Disconnected
; 0000 007D // Noise Canceler: Off
; 0000 007E // Input Capture on Falling Edge
; 0000 007F // Timer1 Overflow Interrupt: Off
; 0000 0080 // Input Capture Interrupt: Off
; 0000 0081 // Compare A Match Interrupt: Off
; 0000 0082 // Compare B Match Interrupt: Off
; 0000 0083 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 0084 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 0085 TCNT1H=0x00;
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 0086 TCNT1L=0x00;
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 0087 ICR1H=0x00;
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 0088 ICR1L=0x00;
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 0089 OCR1AH=0x00;
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0000 008A OCR1AL=0x00;
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 008B OCR1BH=0x00;
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 008C OCR1BL=0x00;
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 008D 
; 0000 008E // Timer/Counter 2 initialization
; 0000 008F // Clock source: System Clock
; 0000 0090 // Clock value: Timer2 Stopped
; 0000 0091 // Mode: Normal top=0xFF
; 0000 0092 // OC2 output: Disconnected
; 0000 0093 ASSR=0<<AS2;
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 0094 TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 0095 TCNT2=0x00;
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 0096 OCR2=0x00;
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 0097 
; 0000 0098 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 0099 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<TOIE0);
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 009A 
; 0000 009B // External Interrupt(s) initialization
; 0000 009C // INT0: Off
; 0000 009D // INT1: Off
; 0000 009E MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 009F 
; 0000 00A0 // USART initialization
; 0000 00A1 // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 00A2 // USART Receiver: On
; 0000 00A3 // USART Transmitter: On
; 0000 00A4 // USART Mode: Asynchronous
; 0000 00A5 // USART Baud Rate: 9600
; 0000 00A6 UCSRA=(0<<RXC) | (0<<TXC) | (0<<UDRE) | (0<<FE) | (0<<DOR) | (0<<UPE) | (0<<U2X) | (0<<MPCM);
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 00A7 UCSRB=(1<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (1<<RXEN) | (1<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 00A8 //UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (1<<RXEN) | (1<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
; 0000 00A9 UCSRC=(1<<URSEL) | (0<<UMSEL) | (0<<UPM1) | (0<<UPM0) | (0<<USBS) | (1<<UCSZ1) | (1<<UCSZ0) | (0<<UCPOL);
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 00AA UBRRH=0x00;
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0000 00AB UBRRL=0x4D;
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0000 00AC 
; 0000 00AD // Analog Comparator initialization
; 0000 00AE // Analog Comparator: Off
; 0000 00AF // The Analog Comparator's positive input is
; 0000 00B0 // connected to the AIN0 pin
; 0000 00B1 // The Analog Comparator's negative input is
; 0000 00B2 // connected to the AIN1 pin
; 0000 00B3 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 00B4 SFIOR=(0<<ACME);
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0000 00B5 
; 0000 00B6 // ADC initialization
; 0000 00B7 // ADC disabled
; 0000 00B8 ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADFR) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0000 00B9 
; 0000 00BA // SPI initialization
; 0000 00BB // SPI disabled
; 0000 00BC SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0000 00BD 
; 0000 00BE // TWI initialization
; 0000 00BF // Mode: TWI Master
; 0000 00C0 // Bit Rate: 400 kHz
; 0000 00C1 //twi_master_init(400);
; 0000 00C2 TWIInit();
;PCODE: $0000008D VOL: 0
; 0000 00C3 
; 0000 00C4 // Alphanumeric LCD initialization
; 0000 00C5 // Connections are specified in the
; 0000 00C6 // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
; 0000 00C7 // RS - PORTD Bit 6
; 0000 00C8 // RD - PORTD Bit 5
; 0000 00C9 // EN - PORTD Bit 4
; 0000 00CA // D4 - PORTC Bit 3
; 0000 00CB // D5 - PORTC Bit 2
; 0000 00CC // D6 - PORTC Bit 1
; 0000 00CD // D7 - PORTC Bit 0
; 0000 00CE // Characters/line: 16
; 0000 00CF lcd_init(16);
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0000 00D0 
; 0000 00D1 // Global enable interrupts
; 0000 00D2 #asm("sei")
;PCODE: $00000090 VOL: 0
	sei
;PCODE: $00000091 VOL: 0
; 0000 00D3 //printf("starting");
; 0000 00D4 delay_ms(1000);
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0000 00D5 //PN532_begin();
; 0000 00D6 //putchar('a');
; 0000 00D7 PN532_SAM_config();
;PCODE: $00000094 VOL: 0
; 0000 00D8 PN532_get_firmware();
;PCODE: $00000095 VOL: 0
; 0000 00D9 //tag_data.length = 16;
; 0000 00DA //memcpy(tag_data.buffer, write_data, 16);
; 0000 00DB //PN532_write_passive_tag(5, &tag_data);
; 0000 00DC 
; 0000 00DD while (1)
;PCODE: $00000096 VOL: 0
; 0000 00DE       {
; 0000 00DF       // Place your code here
; 0000 00E0 //        PN532_read_passive_tag(4);
; 0000 00E1 //        for(i = 0; i<tag_data.length; ++i)
; 0000 00E2 //        {
; 0000 00E3 //          putchar(tag_data.buffer[i]);
; 0000 00E4 //        }
; 0000 00E5 //        PN532_read_uid();
; 0000 00E6 //        //PN532_read_passive_tag(4);
; 0000 00E7 //        for(i = 0; i<tag_uid.length; ++i)
; 0000 00E8 //        {
; 0000 00E9 //          printf("%02x", tag_uid.buffer[i]);
; 0000 00EA //        }
; 0000 00EB //        printf("\r\n");
; 0000 00EC //        delay_ms(500);
; 0000 00ED         ch = getchar();
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0000 00EE         if(ch == 0x00){
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0000 00EF           ch = getchar();
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 00F0           if(ch == 0xFF){
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
; 0000 00F1             len = getchar();
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0000 00F2             for(i = 0; i < len; ++i){
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
; 0000 00F3               ch = getchar();
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0000 00F4               GTC_Buffer[i] = ch;
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0000 00F5             }
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
; 0000 00F6             if(GTC_Buffer[0] == 0x01){
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0000 00F7               if(GTC_Gate_ID[0] != GTC_Buffer[1] || GTC_Gate_ID[1] != GTC_Buffer[2]){
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
; 0000 00F8                 GTC_Gate_ID[0] = GTC_Buffer[1];
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
; 0000 00F9                 GTC_Gate_ID[1] = GTC_Buffer[2];
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
; 0000 00FA                 PN532_read_uid();
;PCODE: $000000CD VOL: 0
; 0000 00FB                 //PN532_read_passive_tag(4);
; 0000 00FC                 for(i = 0; i<tag_uid.length; ++i)
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
; 0000 00FD                 {
; 0000 00FE                   //printf("%02x", tag_uid.buffer[i]);
; 0000 00FF                   putchar(tag_uid.buffer[i]);
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
; 0000 0100                 }
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
; 0000 0101                 delay_ms(500);
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
; 0000 0102               }
; 0000 0103             }
;PCODE: $000000E3 VOL: 0
; 0000 0104           }
;PCODE: $000000E4 VOL: 0
; 0000 0105           //putchar(ch);
; 0000 0106           //printf("%02x", ch);
; 0000 0107         }
;PCODE: $000000E5 VOL: 0
; 0000 0108       }
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
; 0000 0109 }
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
