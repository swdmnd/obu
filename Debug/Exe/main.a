;#include <mega8.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;#include <string.h>
;#include "PN532_I2C.h"
;
;// Declare your global variables here
;
;#define DATA_REGISTER_EMPTY (1<<UDRE)
;#define RX_COMPLETE         (1<<RXC)
;#define FRAMING_ERROR       (1<<FE)
;#define PARITY_ERROR        (1<<UPE)
;#define DATA_OVERRUN        (1<<DOR)
;
;unsigned char GTC_Buffer[64];
;unsigned char GTC_Gate_ID[2] = {0x00, 0x00};
;
;// USART Receiver buffer
;#define RX_BUFFER_SIZE 128
;char rx_buffer[RX_BUFFER_SIZE];
;
;#if RX_BUFFER_SIZE <= 256
;unsigned char rx_wr_index=0,rx_rd_index=0;
;#else
;unsigned int rx_wr_index=0,rx_rd_index=0;
;#endif
;
;#if RX_BUFFER_SIZE < 256
;unsigned char rx_counter=0;
;#else
;unsigned int rx_counter=0;
;#endif
;
;void clear_buffer(){
; 0000 0021 void clear_buffer(){

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0022   rx_wr_index=0;
;PCODE: $0000000F VOL: 0
; 0000 0023   rx_rd_index=0;
;PCODE: $00000010 VOL: 0
; 0000 0024   rx_counter=0;
;PCODE: $00000011 VOL: 0
; 0000 0025 }
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;
;// This flag is set on USART Receiver buffer overflow
;bit rx_buffer_overflow;
;
;// USART Receiver interrupt service routine
;interrupt [USART_RXC] void usart_rx_isr(void)
; 0000 002C {
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 002D char status,data;
; 0000 002E status=UCSRA;
;PCODE: $00000016 VOL: 0
;	status -> R17
;	data -> R16
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 002F data=UDR;
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 0030 if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 0031    {
; 0000 0032    rx_buffer[rx_wr_index++]=data;
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 0033 #if RX_BUFFER_SIZE == 256
; 0000 0034    // special case for receiver buffer size=256
; 0000 0035    if (++rx_counter == 0) rx_buffer_overflow=1;
; 0000 0036 #else
; 0000 0037    if (rx_wr_index == RX_BUFFER_SIZE) rx_wr_index=0;
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 0038    if (++rx_counter == RX_BUFFER_SIZE)
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 0039       {
; 0000 003A       rx_counter=0;
;PCODE: $0000002C VOL: 0
; 0000 003B       rx_buffer_overflow=1;
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 003C       }
; 0000 003D #endif
; 0000 003E    }
;PCODE: $00000030 VOL: 0
; 0000 003F }
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;
;#ifndef _DEBUG_TERMINAL_IO_
;// Get a character from the USART Receiver buffer
;#define _ALTERNATE_GETCHAR_
;#pragma used+
;char getchar(void)
; 0000 0046 {
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 0047 char data;
; 0000 0048 while (rx_counter==0);
;PCODE: $00000038 VOL: 0
;	data -> R17
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 0049 data=rx_buffer[rx_rd_index++];
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 004A #if RX_BUFFER_SIZE != 256
; 0000 004B if (rx_rd_index == RX_BUFFER_SIZE) rx_rd_index=0;
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 004C #endif
; 0000 004D #asm("cli")
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
	cli
;PCODE: $00000049 VOL: 0
; 0000 004E --rx_counter;
;PCODE: $0000004A VOL: 0
; 0000 004F #asm("sei")
;PCODE: $0000004B VOL: 0
	sei
;PCODE: $0000004C VOL: 0
; 0000 0050 return data;
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 0051 }
;PCODE: $00000050 VOL: 0
;#pragma used-
;#endif
;
;#define GTC_ACK_TIMEOUT        1000
;#define GTC_STATE_WAIT_ENTRY   0
;#define GTC_STATE_WAIT_ACK     1
;#define GTC_STATE_WAIT_EXIT    2
;
;volatile int gtc_timeout=0;
;char gtc_state = GTC_STATE_WAIT_ENTRY, gtc_last_state = GTC_STATE_WAIT_ENTRY;
;
;void reset_gtc_timeout(){
; 0000 005D void reset_gtc_timeout(){
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 005E   gtc_timeout = GTC_ACK_TIMEOUT;
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 1
; 0000 005F }
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;
;// Standard Input/Output functions
;#include <stdio.h>
;
;// Timer1 overflow interrupt service routine
;interrupt [TIM1_OVF] void timer1_ovf_isr(void)
; 0000 0066 {
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 0067 // Reinitialize Timer1 value
; 0000 0068 TCNT1H=0xD1;
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 0069 TCNT1L=0x20;
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 006A // Place your code here
; 0000 006B if(gtc_timeout>0) --gtc_timeout;
;PCODE: $0000005D VOL: 1
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 1
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 006C }
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;
;// Global variables
;
;void main(void)
; 0000 0071 {
;PCODE: $00000068 VOL: 0
; 0000 0072 // Declare your local variables here
; 0000 0073 int i, len;
; 0000 0074 unsigned char ch, checksum;
; 0000 0075 
; 0000 0076 // Input/Output Ports initialization
; 0000 0077 // Port B initialization
; 0000 0078 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0079 DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
;	i -> R16,R17
;	len -> R18,R19
;	ch -> R21
;	checksum -> R20
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 007A // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 007B PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (1<<PORTB1) | (0<<PORTB0);
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 007C 
; 0000 007D // Port C initialization
; 0000 007E // Function: Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 007F DDRC=(0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 0080 // State: Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0081 PORTC=(0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 0082 
; 0000 0083 // Port D initialization
; 0000 0084 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=Out Bit2=In Bit1=In Bit0=In
; 0000 0085 DDRD=(0<<DDD7) | (0<<DDD6) | (1<<DDD5) | (1<<DDD4) | (1<<DDD3) | (1<<DDD2) | (0<<DDD1) | (0<<DDD0);
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 0086 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=1 Bit2=T Bit1=T Bit0=T
; 0000 0087 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (1<<PORTD3) | (1<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 0088 
; 0000 0089 // Timer/Counter 0 initialization
; 0000 008A // Clock source: System Clock
; 0000 008B // Clock value: Timer 0 Stopped
; 0000 008C TCCR0=(0<<CS02) | (0<<CS01) | (0<<CS00);
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 008D TCNT0=0x00;
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 008E 
; 0000 008F // Timer/Counter 1 initialization
; 0000 0090 // Clock source: System Clock
; 0000 0091 // Clock value: 12000.000 kHz
; 0000 0092 // Mode: Normal top=0xFFFF
; 0000 0093 // OC1A output: Disconnected
; 0000 0094 // OC1B output: Disconnected
; 0000 0095 // Noise Canceler: Off
; 0000 0096 // Input Capture on Falling Edge
; 0000 0097 // Timer Period: 1 ms
; 0000 0098 // Timer1 Overflow Interrupt: On
; 0000 0099 // Input Capture Interrupt: Off
; 0000 009A // Compare A Match Interrupt: Off
; 0000 009B // Compare B Match Interrupt: Off
; 0000 009C TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 009D TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (1<<CS10);
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 009E TCNT1H=0xD1;
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 009F TCNT1L=0x20;
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 00A0 ICR1H=0x00;
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0000 00A1 ICR1L=0x00;
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0000 00A2 OCR1AH=0x00;
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 00A3 OCR1AL=0x00;
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0000 00A4 OCR1BH=0x00;
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0000 00A5 OCR1BL=0x00;
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0000 00A6 
; 0000 00A7 // Timer/Counter 2 initialization
; 0000 00A8 // Clock source: System Clock
; 0000 00A9 // Clock value: Timer2 Stopped
; 0000 00AA // Mode: Normal top=0xFF
; 0000 00AB // OC2 output: Disconnected
; 0000 00AC ASSR=0<<AS2;
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0000 00AD TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 00AE TCNT2=0x00;
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0000 00AF OCR2=0x00;
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0000 00B0 
; 0000 00B1 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 00B2 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (1<<TOIE1) | (0<<TOIE0);
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0000 00B3 
; 0000 00B4 // External Interrupt(s) initialization
; 0000 00B5 // INT0: Off
; 0000 00B6 // INT1: Off
; 0000 00B7 MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0000 00B8 
; 0000 00B9 // USART initialization
; 0000 00BA // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 00BB // USART Receiver: On
; 0000 00BC // USART Transmitter: On
; 0000 00BD // USART Mode: Asynchronous
; 0000 00BE // USART Baud Rate: 9600
; 0000 00BF UCSRA=(0<<RXC) | (0<<TXC) | (0<<UDRE) | (0<<FE) | (0<<DOR) | (0<<UPE) | (0<<U2X) | (0<<MPCM);
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0000 00C0 UCSRB=(1<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (1<<RXEN) | (1<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 00C1 UCSRC=(1<<URSEL) | (0<<UMSEL) | (0<<UPM1) | (0<<UPM0) | (0<<USBS) | (1<<UCSZ1) | (1<<UCSZ0) | (0<<UCPOL);
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0000 00C2 UBRRH=0x00;
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0000 00C3 UBRRL=0x4D;
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0000 00C4 
; 0000 00C5 // Analog Comparator initialization
; 0000 00C6 // Analog Comparator: Off
; 0000 00C7 // The Analog Comparator's positive input is
; 0000 00C8 // connected to the AIN0 pin
; 0000 00C9 // The Analog Comparator's negative input is
; 0000 00CA // connected to the AIN1 pin
; 0000 00CB ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0000 00CC SFIOR=(0<<ACME);
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0000 00CD 
; 0000 00CE // ADC initialization
; 0000 00CF // ADC disabled
; 0000 00D0 ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADFR) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0000 00D1 
; 0000 00D2 // SPI initialization
; 0000 00D3 // SPI disabled
; 0000 00D4 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
; 0000 00D5 
; 0000 00D6 // TWI initialization
; 0000 00D7 // Mode: TWI Master
; 0000 00D8 // Bit Rate: 400 kHz
; 0000 00D9 //twi_master_init(400);
; 0000 00DA TWIInit();
;PCODE: $000000AB VOL: 0
; 0000 00DB 
; 0000 00DC // Global enable interrupts
; 0000 00DD #asm("sei")
;PCODE: $000000AC VOL: 0
	sei
;PCODE: $000000AD VOL: 0
; 0000 00DE 
; 0000 00DF #define LED_MERAH PORTC.3
; 0000 00E0 #define LED_KUNING PORTC.2
; 0000 00E1 #define LED_HIJAU PORTC.1
; 0000 00E2 DDRC.3=1;DDRC.2=1;DDRC.1=1;
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
; 0000 00E3 LED_MERAH=0;LED_KUNING=1;LED_HIJAU=1;
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
; 0000 00E4 
; 0000 00E5 delay_ms(1000);
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
; 0000 00E6 PN532_SAM_config();
;PCODE: $000000BC VOL: 0
; 0000 00E7 PN532_get_firmware();
;PCODE: $000000BD VOL: 0
; 0000 00E8 
; 0000 00E9 delay_ms(2000);
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
; 0000 00EA while(!PN532_read_uid());
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
; 0000 00EB 
; 0000 00EC LED_MERAH=1;LED_KUNING=1;LED_HIJAU=0;
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
; 0000 00ED while (1)
;PCODE: $000000CC VOL: 0
; 0000 00EE       {
; 0000 00EF         switch(gtc_state){
;PCODE: $000000CD VOL: 0
; 0000 00F0             case GTC_STATE_WAIT_ENTRY:
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
; 0000 00F1                 LED_MERAH=1;LED_KUNING=1;LED_HIJAU=0;
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
; 0000 00F2                 if(rx_counter!=0) ch = getchar();
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
; 0000 00F3                 gtc_last_state = GTC_STATE_WAIT_ENTRY;
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
; 0000 00F4                 if(ch == 0x00){
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
; 0000 00F5                   ch = getchar();
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
; 0000 00F6                   if(ch == 0xFF){
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
; 0000 00F7                     checksum = 0;
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
; 0000 00F8                     len = getchar();
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
; 0000 00F9                     for(i = 0; i < len; ++i){
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
; 0000 00FA                       ch = getchar();
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
; 0000 00FB                       GTC_Buffer[i] = ch;
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
; 0000 00FC                       checksum += ch;
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
; 0000 00FD                     }
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
; 0000 00FE                     ch = getchar();
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
; 0000 00FF                     if((checksum+ch) != 0) break;
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
; 0000 0100                     if(GTC_Buffer[0] == 0xA1){
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
; 0000 0101                         if(GTC_Buffer[1] == 0x01){
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
; 0000 0102                             GTC_Gate_ID[0] = GTC_Buffer[2];
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
; 0000 0103                             GTC_Gate_ID[1] = GTC_Buffer[3];
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
; 0000 0104                             checksum = 0;
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
; 0000 0105                             putchar(0x00);
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
; 0000 0106                             putchar(0xFF);
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
; 0000 0107                             putchar(tag_uid.length+2);
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
; 0000 0108                             putchar(0xA2);                 checksum += 0xA2;
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
; 0000 0109                             putchar(tag_uid.length);       checksum += tag_uid.length;
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
; 0000 010A                             for(i = 0; i<tag_uid.length; ++i)
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
; 0000 010B                             {
; 0000 010C                               putchar(tag_uid.buffer[i]);  checksum += tag_uid.buffer[i];
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
; 0000 010D                             }
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
; 0000 010E                             putchar((~checksum)+1);
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
; 0000 010F                             gtc_state = GTC_STATE_WAIT_ACK;
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
; 0000 0110                             reset_gtc_timeout();
;PCODE: $00000145 VOL: 0
; 0000 0111                             clear_buffer();
;PCODE: $00000146 VOL: 0
; 0000 0112                         }
; 0000 0113                     }
;PCODE: $00000147 VOL: 0
; 0000 0114                   }
;PCODE: $00000148 VOL: 0
; 0000 0115                 }
;PCODE: $00000149 VOL: 0
; 0000 0116                 break;
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
; 0000 0117             case GTC_STATE_WAIT_ACK:
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
; 0000 0118                 LED_MERAH=1;LED_KUNING=0;LED_HIJAU=0;
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
; 0000 0119                 if(gtc_timeout == 0) {
;PCODE: $00000155 VOL: 1
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
; 0000 011A                   GTC_Gate_ID[0] = 0;
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
; 0000 011B                   GTC_Gate_ID[1] = 0;
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
; 0000 011C                   gtc_state = GTC_STATE_WAIT_ENTRY;
;PCODE: $0000015D VOL: 0
; 0000 011D                   gtc_last_state = GTC_STATE_WAIT_ACK;
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
; 0000 011E                   reset_gtc_timeout();
;PCODE: $00000160 VOL: 0
; 0000 011F                   break;
;PCODE: $00000161 VOL: 0
; 0000 0120                 }
; 0000 0121                 if(rx_counter!=0) ch = getchar();
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
; 0000 0122                 if(ch == 0x00){
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
; 0000 0123                   ch = getchar();
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
; 0000 0124                   if(ch == 0xFF){
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
; 0000 0125                     checksum = 0;
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
; 0000 0126                     len = getchar();
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
; 0000 0127                     for(i = 0; i < len; ++i){
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
; 0000 0128                       ch = getchar();
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
; 0000 0129                       GTC_Buffer[i] = ch;
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
; 0000 012A                       checksum += ch;
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
; 0000 012B                     }
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
; 0000 012C                     ch = getchar();
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
; 0000 012D                     if((checksum+ch) != 0) break;
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
; 0000 012E                     if(GTC_Buffer[0] == 0xA1){
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
; 0000 012F                         if(GTC_Buffer[1] == 0xFF){
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
; 0000 0130                             for(i = 0; i<GTC_Buffer[2]; ++i)
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
; 0000 0131                             {
; 0000 0132                               if(GTC_Buffer[i+3] == tag_uid.buffer[i]) gtc_state = GTC_STATE_WAIT_EXIT;
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
; 0000 0133                               else {gtc_state = GTC_STATE_WAIT_ENTRY; break;}
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
; 0000 0134                             }
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
; 0000 0135                             reset_gtc_timeout();
;PCODE: $000001B8 VOL: 0
; 0000 0136                             clear_buffer();
;PCODE: $000001B9 VOL: 0
; 0000 0137                         }
; 0000 0138                     }
;PCODE: $000001BA VOL: 0
; 0000 0139                   }
;PCODE: $000001BB VOL: 0
; 0000 013A                 }
;PCODE: $000001BC VOL: 0
; 0000 013B                 break;
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
; 0000 013C             case GTC_STATE_WAIT_EXIT:
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
; 0000 013D                 LED_MERAH=0;LED_KUNING=1;LED_HIJAU=0;
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
; 0000 013E                 if(gtc_timeout == 0) {
;PCODE: $000001C8 VOL: 1
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
; 0000 013F                   GTC_Gate_ID[0] = 0;
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
; 0000 0140                   GTC_Gate_ID[1] = 0;
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
; 0000 0141                   gtc_state = GTC_STATE_WAIT_ENTRY;
;PCODE: $000001D0 VOL: 0
; 0000 0142                   gtc_last_state = GTC_STATE_WAIT_EXIT;
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
; 0000 0143                   reset_gtc_timeout();
;PCODE: $000001D3 VOL: 0
; 0000 0144                   break;
;PCODE: $000001D4 VOL: 0
; 0000 0145                 }
; 0000 0146                 if(rx_counter!=0) ch = getchar();
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
; 0000 0147                 if(ch == 0x00){
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
; 0000 0148                   checksum = 0;
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
; 0000 0149                   ch = getchar();
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
; 0000 014A                   if(ch == 0xFF){
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
; 0000 014B                     len = getchar();
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
; 0000 014C                     for(i = 0; i < len; ++i){
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
; 0000 014D                       ch = getchar();
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
; 0000 014E                       GTC_Buffer[i] = ch;
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
; 0000 014F                       checksum += ch;
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
; 0000 0150                     }
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
; 0000 0151                     ch = getchar();
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
; 0000 0152                     if((checksum+ch) != 0) break;
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
; 0000 0153                     if(GTC_Buffer[0] == 0xA1){
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
; 0000 0154                         if(GTC_Buffer[1] == 0x01){
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
; 0000 0155                           if(GTC_Gate_ID[0] == GTC_Buffer[2] && GTC_Gate_ID[1] == GTC_Buffer[3]){
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
; 0000 0156                             reset_gtc_timeout();
;PCODE: $00000219 VOL: 0
; 0000 0157                             clear_buffer();
;PCODE: $0000021A VOL: 0
; 0000 0158                           }
; 0000 0159                         }
;PCODE: $0000021B VOL: 0
; 0000 015A                     }
;PCODE: $0000021C VOL: 0
; 0000 015B                   }
;PCODE: $0000021D VOL: 0
; 0000 015C                 }
;PCODE: $0000021E VOL: 0
; 0000 015D                 break;
;PCODE: $0000021F VOL: 0
;PCODE: $00000220 VOL: 0
; 0000 015E         }
;PCODE: $00000221 VOL: 0
; 0000 015F       }
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
; 0000 0160 }
;PCODE: $00000224 VOL: 0
;PCODE: $00000225 VOL: 0
;PCODE: $00000226 VOL: 0
