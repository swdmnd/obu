
AVRASM ver. 2.1.30  D:\My Files\AA\TEKNIK ELEKTRO\TA\obu\Debug\List\obu.asm Mon Nov 27 00:53:36 2017

D:\My Files\AA\TEKNIK ELEKTRO\TA\obu\Debug\List\obu.asm(1086): warning: Register r5 already defined by the .DEF directive
D:\My Files\AA\TEKNIK ELEKTRO\TA\obu\Debug\List\obu.asm(1087): warning: Register r4 already defined by the .DEF directive
D:\My Files\AA\TEKNIK ELEKTRO\TA\obu\Debug\List\obu.asm(1088): warning: Register r7 already defined by the .DEF directive
D:\My Files\AA\TEKNIK ELEKTRO\TA\obu\Debug\List\obu.asm(1089): warning: Register r6 already defined by the .DEF directive
D:\My Files\AA\TEKNIK ELEKTRO\TA\obu\Debug\List\obu.asm(1090): warning: Register r9 already defined by the .DEF directive
D:\My Files\AA\TEKNIK ELEKTRO\TA\obu\Debug\List\obu.asm(1091): warning: Register r8 already defined by the .DEF directive
D:\My Files\AA\TEKNIK ELEKTRO\TA\obu\Debug\List\obu.asm(1092): warning: Register r10 already defined by the .DEF directive
D:\My Files\AA\TEKNIK ELEKTRO\TA\obu\Debug\List\obu.asm(1093): warning: Register r11 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega8A
                 ;Program type           : Application
                 ;Clock frequency        : 12.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': No
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega8A
                 	#pragma AVRPART MEMORY PROG_FLASH 8192
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	RCALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	RCALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _rx_wr_index=R5
                 	.DEF _rx_rd_index=R4
                 	.DEF _rx_counter=R7
                 	.DEF _gtc_state=R6
                 	.DEF _gtc_last_state=R9
                 	.DEF _checksum=R8
                 	.DEF _i=R10
                 	.DEF _i_msb=R11
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 c02c      	RJMP __RESET
000001 cffe      	RJMP 0x00
000002 cffd      	RJMP 0x00
000003 cffc      	RJMP 0x00
000004 cffb      	RJMP 0x00
000005 cffa      	RJMP 0x00
000006 cff9      	RJMP 0x00
000007 cff8      	RJMP 0x00
000008 c08f      	RJMP _timer1_ovf_isr
000009 cff6      	RJMP 0x00
00000a cff5      	RJMP 0x00
00000b c051      	RJMP _usart_rx_isr
00000c cff3      	RJMP 0x00
00000d cff2      	RJMP 0x00
00000e cff1      	RJMP 0x00
00000f cff0      	RJMP 0x00
000010 cfef      	RJMP 0x00
000011 cfee      	RJMP 0x00
000012 cfed      	RJMP 0x00
                 
                 _tbl10_G101:
000013 2710
000014 03e8
000015 0064
000016 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
000017 0001      	.DB  0x1,0x0
                 _tbl16_G101:
000018 1000
000019 0100
00001a 0010
00001b 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;REGISTER BIT VARIABLES INITIALIZATION
                 __REG_BIT_VARS:
00001c 0000      	.DW  0x0000
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
00001d 0000
00001e 0000      	.DB  0x0,0x0,0x0,0x0
00001f 0000      	.DB  0x0,0x0
                 
                 _0x20003:
000020 ffff
000021 ffff
000022 ffff      	.DB  0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
                 
                 __GLOBAL_INI_TBL:
000023 0001      	.DW  0x01
000024 0002      	.DW  0x02
000025 0038      	.DW  __REG_BIT_VARS*2
                 
000026 0006      	.DW  0x06
000027 0004      	.DW  0x04
000028 003a      	.DW  __REG_VARS*2
                 
000029 0006      	.DW  0x06
00002a 03be      	.DW  _MIFARE_Key_A
00002b 0040      	.DW  _0x20003*2
                 
                 _0xFFFFFFFF:
00002c 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00002d 94f8      	CLI
00002e 27ee      	CLR  R30
00002f bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000030 e0f1      	LDI  R31,1
000031 bffb      	OUT  GICR,R31
000032 bfeb      	OUT  GICR,R30
000033 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000034 e08d      	LDI  R24,(14-2)+1
000035 e0a2      	LDI  R26,2
000036 27bb      	CLR  R27
                 __CLEAR_REG:
000037 93ed      	ST   X+,R30
000038 958a      	DEC  R24
000039 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00003a e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00003b e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00003c e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00003d 93ed      	ST   X+,R30
00003e 9701      	SBIW R24,1
00003f f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000040 e4e6      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000041 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000042 9185      	LPM  R24,Z+
000043 9195      	LPM  R25,Z+
000044 9700      	SBIW R24,0
000045 f061      	BREQ __GLOBAL_INI_END
000046 91a5      	LPM  R26,Z+
000047 91b5      	LPM  R27,Z+
000048 9005      	LPM  R0,Z+
000049 9015      	LPM  R1,Z+
00004a 01bf      	MOVW R22,R30
00004b 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00004c 9005      	LPM  R0,Z+
00004d 920d      	ST   X+,R0
00004e 9701      	SBIW R24,1
00004f f7e1      	BRNE __GLOBAL_INI_LOOP
000050 01fb      	MOVW R30,R22
000051 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000052 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000053 bfed      	OUT  SPL,R30
000054 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000055 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000056 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000057 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000058 c05c      	RJMP _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;#include <mega8.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;#include <string.h>
                 ;#include "PN532_I2C.h"
                 ;
                 ;// Declare your global variables here
                 ;
                 ;#define DATA_REGISTER_EMPTY (1<<UDRE)
                 ;#define RX_COMPLETE         (1<<RXC)
                 ;#define FRAMING_ERROR       (1<<FE)
                 ;#define PARITY_ERROR        (1<<UPE)
                 ;#define DATA_OVERRUN        (1<<DOR)
                 ;
                 ;unsigned char GTC_Buffer[64];
                 ;unsigned char GTC_Gate_ID[2] = {0x00, 0x00};
                 ;
                 ;// USART Receiver buffer
                 ;#define RX_BUFFER_SIZE 128
                 ;char rx_buffer[RX_BUFFER_SIZE];
                 ;
                 ;#if RX_BUFFER_SIZE <= 256
                 ;unsigned char rx_wr_index=0,rx_rd_index=0;
                 ;#else
                 ;unsigned int rx_wr_index=0,rx_rd_index=0;
                 ;#endif
                 ;
                 ;#if RX_BUFFER_SIZE < 256
                 ;unsigned char rx_counter=0;
                 ;#else
                 ;unsigned int rx_counter=0;
                 ;#endif
                 ;
                 ;void clear_buffer(){
                 ; 0000 0021 void clear_buffer(){
                 
                 	.CSEG
                 _clear_buffer:
                 ; .FSTART _clear_buffer
                 ; 0000 0022   rx_wr_index=0;
000059 2455      	CLR  R5
                 ; 0000 0023   rx_rd_index=0;
00005a 2444      	CLR  R4
                 ; 0000 0024   rx_counter=0;
00005b 2477      	CLR  R7
                 ; 0000 0025 }
00005c 9508      	RET
                 ; .FEND
                 ;
                 ;// This flag is set on USART Receiver buffer overflow
                 ;bit rx_buffer_overflow;
                 ;
                 ;// USART Receiver interrupt service routine
                 ;interrupt [USART_RXC] void usart_rx_isr(void)
                 ; 0000 002C {
                 _usart_rx_isr:
                 ; .FSTART _usart_rx_isr
00005d 93ea      	ST   -Y,R30
00005e 93fa      	ST   -Y,R31
00005f b7ef      	IN   R30,SREG
000060 93ea      	ST   -Y,R30
                 ; 0000 002D char status,data;
                 ; 0000 002E status=UCSRA;
000061 d3a2      	RCALL __SAVELOCR2
                 ;	status -> R17
                 ;	data -> R16
000062 b11b      	IN   R17,11
                 ; 0000 002F data=UDR;
000063 b10c      	IN   R16,12
                 ; 0000 0030 if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
000064 2fe1      	MOV  R30,R17
000065 71ec      	ANDI R30,LOW(0x1C)
000066 f489      	BRNE _0x3
                 ; 0000 0031    {
                 ; 0000 0032    rx_buffer[rx_wr_index++]=data;
000067 2de5      	MOV  R30,R5
000068 9453      	INC  R5
000069 e0f0      	LDI  R31,0
00006a 5ce4      	SUBI R30,LOW(-_rx_buffer)
00006b 4ffc      	SBCI R31,HIGH(-_rx_buffer)
00006c 8300      	ST   Z,R16
                 ; 0000 0033 #if RX_BUFFER_SIZE == 256
                 ; 0000 0034    // special case for receiver buffer size=256
                 ; 0000 0035    if (++rx_counter == 0) rx_buffer_overflow=1;
                 ; 0000 0036 #else
                 ; 0000 0037    if (rx_wr_index == RX_BUFFER_SIZE) rx_wr_index=0;
00006d e8e0      	LDI  R30,LOW(128)
00006e 15e5      	CP   R30,R5
00006f f409      	BRNE _0x4
000070 2455      	CLR  R5
                 ; 0000 0038    if (++rx_counter == RX_BUFFER_SIZE)
                 _0x4:
000071 9473      	INC  R7
000072 e8e0      	LDI  R30,LOW(128)
000073 15e7      	CP   R30,R7
000074 f419      	BRNE _0x5
                 ; 0000 0039       {
                 ; 0000 003A       rx_counter=0;
000075 2477      	CLR  R7
                 ; 0000 003B       rx_buffer_overflow=1;
000076 9468      	SET
000077 f820      	BLD  R2,0
                 ; 0000 003C       }
                 ; 0000 003D #endif
                 ; 0000 003E    }
                 _0x5:
                 ; 0000 003F }
                 _0x3:
000078 9109      	LD   R16,Y+
000079 9119      	LD   R17,Y+
00007a 91e9      	LD   R30,Y+
00007b bfef      	OUT  SREG,R30
00007c 91f9      	LD   R31,Y+
00007d 91e9      	LD   R30,Y+
00007e 9518      	RETI
                 ; .FEND
                 ;
                 ;#ifndef _DEBUG_TERMINAL_IO_
                 ;// Get a character from the USART Receiver buffer
                 ;#define _ALTERNATE_GETCHAR_
                 ;#pragma used+
                 ;char getchar(void)
                 ; 0000 0046 {
                 _getchar:
                 ; .FSTART _getchar
                 ; 0000 0047 char data;
                 ; 0000 0048 while (rx_counter==0);
00007f 931a      	ST   -Y,R17
                 ;	data -> R17
                 _0x6:
000080 2077      	TST  R7
000081 f3f1      	BREQ _0x6
                 ; 0000 0049 data=rx_buffer[rx_rd_index++];
000082 2de4      	MOV  R30,R4
000083 9443      	INC  R4
000084 e0f0      	LDI  R31,0
000085 5ce4      	SUBI R30,LOW(-_rx_buffer)
000086 4ffc      	SBCI R31,HIGH(-_rx_buffer)
000087 8110      	LD   R17,Z
                 ; 0000 004A #if RX_BUFFER_SIZE != 256
                 ; 0000 004B if (rx_rd_index == RX_BUFFER_SIZE) rx_rd_index=0;
000088 e8e0      	LDI  R30,LOW(128)
000089 15e4      	CP   R30,R4
00008a f409      	BRNE _0x9
00008b 2444      	CLR  R4
                 ; 0000 004C #endif
                 ; 0000 004D #asm("cli")
                 _0x9:
00008c 94f8      	cli
                 ; 0000 004E --rx_counter;
00008d 947a      	DEC  R7
                 ; 0000 004F #asm("sei")
00008e 9478      	sei
                 ; 0000 0050 return data;
00008f 2fe1      	MOV  R30,R17
000090 c267      	RJMP _0x2060004
                 ; 0000 0051 }
                 ; .FEND
                 ;#pragma used-
                 ;#endif
                 ;
                 ;#define GTC_ACK_TIMEOUT        1000
                 ;#define GTC_STATE_WAIT_ENTRY   0
                 ;#define GTC_STATE_WAIT_ACK     1
                 ;#define GTC_STATE_WAIT_EXIT    2
                 ;
                 ;volatile int gtc_timeout=0;
                 ;char gtc_state = GTC_STATE_WAIT_ENTRY, gtc_last_state = GTC_STATE_WAIT_ENTRY;
                 ;
                 ;void reset_gtc_timeout(){
                 ; 0000 005D void reset_gtc_timeout(){
                 _reset_gtc_timeout:
                 ; .FSTART _reset_gtc_timeout
                 ; 0000 005E   gtc_timeout = GTC_ACK_TIMEOUT;
000091 eee8      	LDI  R30,LOW(1000)
000092 e0f3      	LDI  R31,HIGH(1000)
000093 93e0 03bc 	STS  _gtc_timeout,R30
000095 93f0 03bd 	STS  _gtc_timeout+1,R31
                 ; 0000 005F }
000097 9508      	RET
                 ; .FEND
                 ;
                 ;// Standard Input/Output functions
                 ;#include <stdio.h>
                 ;
                 ;// Timer1 overflow interrupt service routine
                 ;interrupt [TIM1_OVF] void timer1_ovf_isr(void)
                 ; 0000 0066 {
                 _timer1_ovf_isr:
                 ; .FSTART _timer1_ovf_isr
000098 920a      	ST   -Y,R0
000099 93aa      	ST   -Y,R26
00009a 93ba      	ST   -Y,R27
00009b 93ea      	ST   -Y,R30
00009c 93fa      	ST   -Y,R31
00009d b7ef      	IN   R30,SREG
00009e 93ea      	ST   -Y,R30
                 ; 0000 0067 // Reinitialize Timer1 value
                 ; 0000 0068 TCNT1H=0xD1;
00009f d2ad      	RCALL SUBOPT_0x0
                 ; 0000 0069 TCNT1L=0x20;
                 ; 0000 006A // Place your code here
                 ; 0000 006B if(gtc_timeout>0) --gtc_timeout;
0000a0 91a0 03bc 	LDS  R26,_gtc_timeout
0000a2 91b0 03bd 	LDS  R27,_gtc_timeout+1
0000a4 d35b      	RCALL __CPW02
0000a5 f43c      	BRGE _0xA
0000a6 ebac      	LDI  R26,LOW(_gtc_timeout)
0000a7 e0b3      	LDI  R27,HIGH(_gtc_timeout)
0000a8 91ed      	LD   R30,X+
0000a9 91fd      	LD   R31,X+
0000aa 9731      	SBIW R30,1
0000ab 93fe      	ST   -X,R31
0000ac 93ee      	ST   -X,R30
                 ; 0000 006C }
                 _0xA:
0000ad 91e9      	LD   R30,Y+
0000ae bfef      	OUT  SREG,R30
0000af 91f9      	LD   R31,Y+
0000b0 91e9      	LD   R30,Y+
0000b1 91b9      	LD   R27,Y+
0000b2 91a9      	LD   R26,Y+
0000b3 9009      	LD   R0,Y+
0000b4 9518      	RETI
                 ; .FEND
                 ;
                 ;// Global variables
                 ;
                 ;void main(void)
                 ; 0000 0071 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0072 // Declare your local variables here
                 ; 0000 0073 int i, len;
                 ; 0000 0074 unsigned char ch, checksum;
                 ; 0000 0075 
                 ; 0000 0076 // Input/Output Ports initialization
                 ; 0000 0077 // Port B initialization
                 ; 0000 0078 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0079 DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
                 ;	i -> R16,R17
                 ;	len -> R18,R19
                 ;	ch -> R21
                 ;	checksum -> R20
0000b5 e0e0      	LDI  R30,LOW(0)
0000b6 bbe7      	OUT  0x17,R30
                 ; 0000 007A // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 007B PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (1<<PORTB1) | (0<<PORTB0);
0000b7 e0e2      	LDI  R30,LOW(2)
0000b8 bbe8      	OUT  0x18,R30
                 ; 0000 007C 
                 ; 0000 007D // Port C initialization
                 ; 0000 007E // Function: Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 007F DDRC=(0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
0000b9 e0e0      	LDI  R30,LOW(0)
0000ba bbe4      	OUT  0x14,R30
                 ; 0000 0080 // State: Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0081 PORTC=(0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
0000bb bbe5      	OUT  0x15,R30
                 ; 0000 0082 
                 ; 0000 0083 // Port D initialization
                 ; 0000 0084 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=Out Bit2=In Bit1=In Bit0=In
                 ; 0000 0085 DDRD=(0<<DDD7) | (0<<DDD6) | (1<<DDD5) | (1<<DDD4) | (1<<DDD3) | (1<<DDD2) | (0<<DDD1) | (0<<DDD0);
0000bc e3ec      	LDI  R30,LOW(60)
0000bd bbe1      	OUT  0x11,R30
                 ; 0000 0086 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=1 Bit2=T Bit1=T Bit0=T
                 ; 0000 0087 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (1<<PORTD3) | (1<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
0000be e0ec      	LDI  R30,LOW(12)
0000bf bbe2      	OUT  0x12,R30
                 ; 0000 0088 
                 ; 0000 0089 // Timer/Counter 0 initialization
                 ; 0000 008A // Clock source: System Clock
                 ; 0000 008B // Clock value: Timer 0 Stopped
                 ; 0000 008C TCCR0=(0<<CS02) | (0<<CS01) | (0<<CS00);
0000c0 e0e0      	LDI  R30,LOW(0)
0000c1 bfe3      	OUT  0x33,R30
                 ; 0000 008D TCNT0=0x00;
0000c2 bfe2      	OUT  0x32,R30
                 ; 0000 008E 
                 ; 0000 008F // Timer/Counter 1 initialization
                 ; 0000 0090 // Clock source: System Clock
                 ; 0000 0091 // Clock value: 12000.000 kHz
                 ; 0000 0092 // Mode: Normal top=0xFFFF
                 ; 0000 0093 // OC1A output: Disconnected
                 ; 0000 0094 // OC1B output: Disconnected
                 ; 0000 0095 // Noise Canceler: Off
                 ; 0000 0096 // Input Capture on Falling Edge
                 ; 0000 0097 // Timer Period: 1 ms
                 ; 0000 0098 // Timer1 Overflow Interrupt: On
                 ; 0000 0099 // Input Capture Interrupt: Off
                 ; 0000 009A // Compare A Match Interrupt: Off
                 ; 0000 009B // Compare B Match Interrupt: Off
                 ; 0000 009C TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
0000c3 bdef      	OUT  0x2F,R30
                 ; 0000 009D TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (1<<CS10);
0000c4 e0e1      	LDI  R30,LOW(1)
0000c5 bdee      	OUT  0x2E,R30
                 ; 0000 009E TCNT1H=0xD1;
0000c6 d286      	RCALL SUBOPT_0x0
                 ; 0000 009F TCNT1L=0x20;
                 ; 0000 00A0 ICR1H=0x00;
0000c7 e0e0      	LDI  R30,LOW(0)
0000c8 bde7      	OUT  0x27,R30
                 ; 0000 00A1 ICR1L=0x00;
0000c9 bde6      	OUT  0x26,R30
                 ; 0000 00A2 OCR1AH=0x00;
0000ca bdeb      	OUT  0x2B,R30
                 ; 0000 00A3 OCR1AL=0x00;
0000cb bdea      	OUT  0x2A,R30
                 ; 0000 00A4 OCR1BH=0x00;
0000cc bde9      	OUT  0x29,R30
                 ; 0000 00A5 OCR1BL=0x00;
0000cd bde8      	OUT  0x28,R30
                 ; 0000 00A6 
                 ; 0000 00A7 // Timer/Counter 2 initialization
                 ; 0000 00A8 // Clock source: System Clock
                 ; 0000 00A9 // Clock value: Timer2 Stopped
                 ; 0000 00AA // Mode: Normal top=0xFF
                 ; 0000 00AB // OC2 output: Disconnected
                 ; 0000 00AC ASSR=0<<AS2;
0000ce bde2      	OUT  0x22,R30
                 ; 0000 00AD TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
0000cf bde5      	OUT  0x25,R30
                 ; 0000 00AE TCNT2=0x00;
0000d0 bde4      	OUT  0x24,R30
                 ; 0000 00AF OCR2=0x00;
0000d1 bde3      	OUT  0x23,R30
                 ; 0000 00B0 
                 ; 0000 00B1 // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 00B2 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (1<<TOIE1) | (0<<TOIE0);
0000d2 e0e4      	LDI  R30,LOW(4)
0000d3 bfe9      	OUT  0x39,R30
                 ; 0000 00B3 
                 ; 0000 00B4 // External Interrupt(s) initialization
                 ; 0000 00B5 // INT0: Off
                 ; 0000 00B6 // INT1: Off
                 ; 0000 00B7 MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
0000d4 e0e0      	LDI  R30,LOW(0)
0000d5 bfe5      	OUT  0x35,R30
                 ; 0000 00B8 
                 ; 0000 00B9 // USART initialization
                 ; 0000 00BA // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0000 00BB // USART Receiver: On
                 ; 0000 00BC // USART Transmitter: On
                 ; 0000 00BD // USART Mode: Asynchronous
                 ; 0000 00BE // USART Baud Rate: 9600
                 ; 0000 00BF UCSRA=(0<<RXC) | (0<<TXC) | (0<<UDRE) | (0<<FE) | (0<<DOR) | (0<<UPE) | (0<<U2X) | (0<<MPCM);
0000d6 b9eb      	OUT  0xB,R30
                 ; 0000 00C0 UCSRB=(1<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (1<<RXEN) | (1<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
0000d7 e9e8      	LDI  R30,LOW(152)
0000d8 b9ea      	OUT  0xA,R30
                 ; 0000 00C1 UCSRC=(1<<URSEL) | (0<<UMSEL) | (0<<UPM1) | (0<<UPM0) | (0<<USBS) | (1<<UCSZ1) | (1<<UCSZ0) | (0<<UCPOL);
0000d9 e8e6      	LDI  R30,LOW(134)
0000da bde0      	OUT  0x20,R30
                 ; 0000 00C2 UBRRH=0x00;
0000db e0e0      	LDI  R30,LOW(0)
0000dc bde0      	OUT  0x20,R30
                 ; 0000 00C3 UBRRL=0x4D;
0000dd e4ed      	LDI  R30,LOW(77)
0000de b9e9      	OUT  0x9,R30
                 ; 0000 00C4 
                 ; 0000 00C5 // Analog Comparator initialization
                 ; 0000 00C6 // Analog Comparator: Off
                 ; 0000 00C7 // The Analog Comparator's positive input is
                 ; 0000 00C8 // connected to the AIN0 pin
                 ; 0000 00C9 // The Analog Comparator's negative input is
                 ; 0000 00CA // connected to the AIN1 pin
                 ; 0000 00CB ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
0000df e8e0      	LDI  R30,LOW(128)
0000e0 b9e8      	OUT  0x8,R30
                 ; 0000 00CC SFIOR=(0<<ACME);
0000e1 e0e0      	LDI  R30,LOW(0)
0000e2 bfe0      	OUT  0x30,R30
                 ; 0000 00CD 
                 ; 0000 00CE // ADC initialization
                 ; 0000 00CF // ADC disabled
                 ; 0000 00D0 ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADFR) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
0000e3 b9e6      	OUT  0x6,R30
                 ; 0000 00D1 
                 ; 0000 00D2 // SPI initialization
                 ; 0000 00D3 // SPI disabled
                 ; 0000 00D4 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
0000e4 b9ed      	OUT  0xD,R30
                 ; 0000 00D5 
                 ; 0000 00D6 // TWI initialization
                 ; 0000 00D7 // Mode: TWI Master
                 ; 0000 00D8 // Bit Rate: 400 kHz
                 ; 0000 00D9 //twi_master_init(400);
                 ; 0000 00DA TWIInit();
0000e5 d0e4      	RCALL _TWIInit
                 ; 0000 00DB 
                 ; 0000 00DC // Global enable interrupts
                 ; 0000 00DD #asm("sei")
0000e6 9478      	sei
                 ; 0000 00DE 
                 ; 0000 00DF #define LED_MERAH PORTC.3
                 ; 0000 00E0 #define LED_KUNING PORTC.2
                 ; 0000 00E1 #define LED_HIJAU PORTC.1
                 ; 0000 00E2 DDRC.3=1;DDRC.2=1;DDRC.1=1;
0000e7 9aa3      	SBI  0x14,3
0000e8 9aa2      	SBI  0x14,2
0000e9 9aa1      	SBI  0x14,1
                 ; 0000 00E3 LED_MERAH=0;LED_KUNING=1;LED_HIJAU=1;
0000ea 98ab      	CBI  0x15,3
0000eb 9aaa      	SBI  0x15,2
0000ec 9aa9      	SBI  0x15,1
                 ; 0000 00E4 
                 ; 0000 00E5 delay_ms(1000);
0000ed eea8      	LDI  R26,LOW(1000)
0000ee e0b3      	LDI  R27,HIGH(1000)
0000ef d302      	RCALL _delay_ms
                 ; 0000 00E6 PN532_SAM_config();
0000f0 d217      	RCALL _PN532_SAM_config
                 ; 0000 00E7 PN532_get_firmware();
0000f1 d208      	RCALL _PN532_get_firmware
                 ; 0000 00E8 
                 ; 0000 00E9 delay_ms(2000);
0000f2 eda0      	LDI  R26,LOW(2000)
0000f3 e0b7      	LDI  R27,HIGH(2000)
0000f4 d2fd      	RCALL _delay_ms
                 ; 0000 00EA while(!PN532_read_uid());
                 _0x17:
0000f5 d225      	RCALL _PN532_read_uid
0000f6 30e0      	CPI  R30,0
0000f7 f3e9      	BREQ _0x17
                 ; 0000 00EB 
                 ; 0000 00EC LED_MERAH=1;LED_KUNING=1;LED_HIJAU=0;
0000f8 9aab      	SBI  0x15,3
0000f9 9aaa      	SBI  0x15,2
0000fa 98a9      	CBI  0x15,1
                 ; 0000 00ED while (1)
                 _0x20:
                 ; 0000 00EE       {
                 ; 0000 00EF         switch(gtc_state){
0000fb 2de6      	MOV  R30,R6
                 ; 0000 00F0             case GTC_STATE_WAIT_ENTRY:
0000fc 30e0      	CPI  R30,0
0000fd f009      	BREQ PC+2
0000fe c051      	RJMP _0x26
                 ; 0000 00F1                 LED_MERAH=1;LED_KUNING=1;LED_HIJAU=0;
0000ff 9aab      	SBI  0x15,3
000100 9aaa      	SBI  0x15,2
000101 98a9      	CBI  0x15,1
                 ; 0000 00F2                 if(rx_counter!=0) ch = getchar();
000102 2077      	TST  R7
000103 f009      	BREQ _0x2D
000104 d24d      	RCALL SUBOPT_0x1
                 ; 0000 00F3                 gtc_last_state = GTC_STATE_WAIT_ENTRY;
                 _0x2D:
000105 2499      	CLR  R9
                 ; 0000 00F4                 if(ch == 0x00){
000106 3050      	CPI  R21,0
000107 f009      	BREQ PC+2
000108 c046      	RJMP _0x2E
                 ; 0000 00F5                   ch = getchar();
000109 d248      	RCALL SUBOPT_0x1
                 ; 0000 00F6                   if(ch == 0xFF){
00010a 3f5f      	CPI  R21,255
00010b f009      	BREQ PC+2
00010c c042      	RJMP _0x2F
                 ; 0000 00F7                     checksum = 0;
00010d d247      	RCALL SUBOPT_0x2
                 ; 0000 00F8                     len = getchar();
                 ; 0000 00F9                     for(i = 0; i < len; ++i){
                 _0x31:
                +
00010e 1702     +CP R16 , R18
00010f 0713     +CPC R17 , R19
                 	__CPWRR 16,17,18,19
000110 f424      	BRGE _0x32
                 ; 0000 00FA                       ch = getchar();
000111 d240      	RCALL SUBOPT_0x1
                 ; 0000 00FB                       GTC_Buffer[i] = ch;
000112 d249      	RCALL SUBOPT_0x3
                 ; 0000 00FC                       checksum += ch;
                 ; 0000 00FD                     }
000113 d24e      	RCALL SUBOPT_0x4
000114 cff9      	RJMP _0x31
                 _0x32:
                 ; 0000 00FE                     ch = getchar();
000115 d23c      	RCALL SUBOPT_0x1
                 ; 0000 00FF                     if((checksum+ch) != 0) break;
000116 2fe5      	MOV  R30,R21
000117 0fe4      	ADD  R30,R20
000118 f009      	BREQ _0x33
000119 c0ae      	RJMP _0x25
                 ; 0000 0100                     if(GTC_Buffer[0] == 0xA1){
                 _0x33:
00011a d24a      	RCALL SUBOPT_0x5
00011b f599      	BRNE _0x34
                 ; 0000 0101                         if(GTC_Buffer[1] == 0x01){
                +
00011c 91a0 02fb+LDS R26 , _GTC_Buffer + ( 1 )
                 	__GETB2MN _GTC_Buffer,1
00011e 30a1      	CPI  R26,LOW(0x1)
00011f f579      	BRNE _0x35
                 ; 0000 0102                             GTC_Gate_ID[0] = GTC_Buffer[2];
                +
000120 91e0 02fc+LDS R30 , _GTC_Buffer + ( 2 )
                 	__GETB1MN _GTC_Buffer,2
000122 93e0 033a 	STS  _GTC_Gate_ID,R30
                 ; 0000 0103                             GTC_Gate_ID[1] = GTC_Buffer[3];
                +
000124 91e0 02fd+LDS R30 , _GTC_Buffer + ( 3 )
                 	__GETB1MN _GTC_Buffer,3
                +
000126 93e0 033b+STS _GTC_Gate_ID + ( 1 ) , R30
                 	__PUTB1MN _GTC_Gate_ID,1
                 ; 0000 0104                             checksum = 0;
000128 e040      	LDI  R20,LOW(0)
                 ; 0000 0105                             putchar(0x00);
000129 e0a0      	LDI  R26,LOW(0)
00012a d21b      	RCALL _putchar
                 ; 0000 0106                             putchar(0xFF);
00012b efaf      	LDI  R26,LOW(255)
00012c d219      	RCALL _putchar
                 ; 0000 0107                             putchar(tag_uid.length+2);
                +
00012d 91a0 02a6+LDS R26 , _tag_uid + ( 80 )
                 	__GETB2MN _tag_uid,80
00012f 5fae      	SUBI R26,-LOW(2)
000130 d215      	RCALL _putchar
                 ; 0000 0108                             putchar(0xA2);                 checksum += 0xA2;
000131 eaa2      	LDI  R26,LOW(162)
000132 d213      	RCALL _putchar
000133 554e      	SUBI R20,-LOW(162)
                 ; 0000 0109                             putchar(tag_uid.length);       checksum += tag_uid.length;
                +
000134 91a0 02a6+LDS R26 , _tag_uid + ( 80 )
                 	__GETB2MN _tag_uid,80
000136 d20f      	RCALL _putchar
                +
000137 91e0 02a6+LDS R30 , _tag_uid + ( 80 )
                 	__GETB1MN _tag_uid,80
000139 0f4e      	ADD  R20,R30
                 ; 0000 010A                             for(i = 0; i<tag_uid.length; ++i)
00013a d22e      	RCALL SUBOPT_0x6
                 _0x37:
00013b d230      	RCALL SUBOPT_0x7
00013c 170e      	CP   R16,R30
00013d 071f      	CPC  R17,R31
00013e f444      	BRGE _0x38
                 ; 0000 010B                             {
                 ; 0000 010C                               putchar(tag_uid.buffer[i]);  checksum += tag_uid.buffer[i];
00013f d231      	RCALL SUBOPT_0x8
000140 91ac      	LD   R26,X
000141 d204      	RCALL _putchar
000142 d22e      	RCALL SUBOPT_0x8
000143 91ec      	LD   R30,X
000144 0f4e      	ADD  R20,R30
                 ; 0000 010D                             }
000145 d21c      	RCALL SUBOPT_0x4
000146 cff4      	RJMP _0x37
                 _0x38:
                 ; 0000 010E                             putchar((~checksum)+1);
000147 2fe4      	MOV  R30,R20
000148 95e1      	NEG  R30
000149 2fae      	MOV  R26,R30
00014a d1fb      	RCALL _putchar
                 ; 0000 010F                             gtc_state = GTC_STATE_WAIT_ACK;
00014b e0e1      	LDI  R30,LOW(1)
00014c 2e6e      	MOV  R6,R30
                 ; 0000 0110                             reset_gtc_timeout();
00014d df43      	RCALL _reset_gtc_timeout
                 ; 0000 0111                             clear_buffer();
00014e df0a      	RCALL _clear_buffer
                 ; 0000 0112                         }
                 ; 0000 0113                     }
                 _0x35:
                 ; 0000 0114                   }
                 _0x34:
                 ; 0000 0115                 }
                 _0x2F:
                 ; 0000 0116                 break;
                 _0x2E:
00014f c078      	RJMP _0x25
                 ; 0000 0117             case GTC_STATE_WAIT_ACK:
                 _0x26:
000150 30e1      	CPI  R30,LOW(0x1)
000151 f5f1      	BRNE _0x39
                 ; 0000 0118                 LED_MERAH=1;LED_KUNING=0;LED_HIJAU=0;
000152 9aab      	SBI  0x15,3
000153 98aa      	CBI  0x15,2
000154 d221      	RCALL SUBOPT_0x9
                 ; 0000 0119                 if(gtc_timeout == 0) {
000155 f429      	BRNE _0x40
                 ; 0000 011A                   GTC_Gate_ID[0] = 0;
000156 d226      	RCALL SUBOPT_0xA
                 ; 0000 011B                   GTC_Gate_ID[1] = 0;
                 ; 0000 011C                   gtc_state = GTC_STATE_WAIT_ENTRY;
                 ; 0000 011D                   gtc_last_state = GTC_STATE_WAIT_ACK;
000157 e0e1      	LDI  R30,LOW(1)
000158 2e9e      	MOV  R9,R30
                 ; 0000 011E                   reset_gtc_timeout();
000159 df37      	RCALL _reset_gtc_timeout
                 ; 0000 011F                   break;
00015a c06d      	RJMP _0x25
                 ; 0000 0120                 }
                 ; 0000 0121                 if(rx_counter!=0) ch = getchar();
                 _0x40:
00015b 2077      	TST  R7
00015c f009      	BREQ _0x41
00015d d1f4      	RCALL SUBOPT_0x1
                 ; 0000 0122                 if(ch == 0x00){
                 _0x41:
00015e 3050      	CPI  R21,0
00015f f579      	BRNE _0x42
                 ; 0000 0123                   ch = getchar();
000160 d1f1      	RCALL SUBOPT_0x1
                 ; 0000 0124                   if(ch == 0xFF){
000161 3f5f      	CPI  R21,255
000162 f561      	BRNE _0x43
                 ; 0000 0125                     checksum = 0;
000163 d1f1      	RCALL SUBOPT_0x2
                 ; 0000 0126                     len = getchar();
                 ; 0000 0127                     for(i = 0; i < len; ++i){
                 _0x45:
                +
000164 1702     +CP R16 , R18
000165 0713     +CPC R17 , R19
                 	__CPWRR 16,17,18,19
000166 f424      	BRGE _0x46
                 ; 0000 0128                       ch = getchar();
000167 d1ea      	RCALL SUBOPT_0x1
                 ; 0000 0129                       GTC_Buffer[i] = ch;
000168 d1f3      	RCALL SUBOPT_0x3
                 ; 0000 012A                       checksum += ch;
                 ; 0000 012B                     }
000169 d1f8      	RCALL SUBOPT_0x4
00016a cff9      	RJMP _0x45
                 _0x46:
                 ; 0000 012C                     ch = getchar();
00016b d1e6      	RCALL SUBOPT_0x1
                 ; 0000 012D                     if((checksum+ch) != 0) break;
00016c 2fe5      	MOV  R30,R21
00016d 0fe4      	ADD  R30,R20
00016e f009      	BREQ _0x47
00016f c058      	RJMP _0x25
                 ; 0000 012E                     if(GTC_Buffer[0] == 0xA1){
                 _0x47:
000170 d1f4      	RCALL SUBOPT_0x5
000171 f4e9      	BRNE _0x48
                 ; 0000 012F                         if(GTC_Buffer[1] == 0xFF){
                +
000172 91a0 02fb+LDS R26 , _GTC_Buffer + ( 1 )
                 	__GETB2MN _GTC_Buffer,1
000174 3faf      	CPI  R26,LOW(0xFF)
000175 f4c9      	BRNE _0x49
                 ; 0000 0130                             for(i = 0; i<GTC_Buffer[2]; ++i)
000176 d1f2      	RCALL SUBOPT_0x6
                 _0x4B:
                +
000177 91e0 02fc+LDS R30 , _GTC_Buffer + ( 2 )
                 	__GETB1MN _GTC_Buffer,2
000179 01d8      	MOVW R26,R16
00017a e0f0      	LDI  R31,0
00017b 17ae      	CP   R26,R30
00017c 07bf      	CPC  R27,R31
00017d f47c      	BRGE _0x4C
                 ; 0000 0131                             {
                 ; 0000 0132                               if(GTC_Buffer[i+3] == tag_uid.buffer[i]) gtc_state = GTC_STATE_WAIT_EXIT;
00017e 01f8      	MOVW R30,R16
                +
00017f 50e3     +SUBI R30 , LOW ( - _GTC_Buffer - ( 3 ) )
000180 4ffd     +SBCI R31 , HIGH ( - _GTC_Buffer - ( 3 ) )
                 	__ADDW1MN _GTC_Buffer,3
000181 8000      	LD   R0,Z
000182 d1ee      	RCALL SUBOPT_0x8
000183 91ec      	LD   R30,X
000184 15e0      	CP   R30,R0
000185 f419      	BRNE _0x4D
000186 e0e2      	LDI  R30,LOW(2)
000187 2e6e      	MOV  R6,R30
                 ; 0000 0133                               else {gtc_state = GTC_STATE_WAIT_ENTRY; break;}
000188 c002      	RJMP _0x4E
                 _0x4D:
000189 2466      	CLR  R6
00018a c002      	RJMP _0x4C
                 _0x4E:
                 ; 0000 0134                             }
00018b d1d6      	RCALL SUBOPT_0x4
00018c cfea      	RJMP _0x4B
                 _0x4C:
                 ; 0000 0135                             reset_gtc_timeout();
00018d df03      	RCALL _reset_gtc_timeout
                 ; 0000 0136                             clear_buffer();
00018e deca      	RCALL _clear_buffer
                 ; 0000 0137                         }
                 ; 0000 0138                     }
                 _0x49:
                 ; 0000 0139                   }
                 _0x48:
                 ; 0000 013A                 }
                 _0x43:
                 ; 0000 013B                 break;
                 _0x42:
00018f c038      	RJMP _0x25
                 ; 0000 013C             case GTC_STATE_WAIT_EXIT:
                 _0x39:
000190 30e2      	CPI  R30,LOW(0x2)
000191 f5b1      	BRNE _0x25
                 ; 0000 013D                 LED_MERAH=0;LED_KUNING=1;LED_HIJAU=0;
000192 98ab      	CBI  0x15,3
000193 9aaa      	SBI  0x15,2
000194 d1e1      	RCALL SUBOPT_0x9
                 ; 0000 013E                 if(gtc_timeout == 0) {
000195 f429      	BRNE _0x56
                 ; 0000 013F                   GTC_Gate_ID[0] = 0;
000196 d1e6      	RCALL SUBOPT_0xA
                 ; 0000 0140                   GTC_Gate_ID[1] = 0;
                 ; 0000 0141                   gtc_state = GTC_STATE_WAIT_ENTRY;
                 ; 0000 0142                   gtc_last_state = GTC_STATE_WAIT_EXIT;
000197 e0e2      	LDI  R30,LOW(2)
000198 2e9e      	MOV  R9,R30
                 ; 0000 0143                   reset_gtc_timeout();
000199 def7      	RCALL _reset_gtc_timeout
                 ; 0000 0144                   break;
00019a c02d      	RJMP _0x25
                 ; 0000 0145                 }
                 ; 0000 0146                 if(rx_counter!=0) ch = getchar();
                 _0x56:
00019b 2077      	TST  R7
00019c f009      	BREQ _0x57
00019d d1b4      	RCALL SUBOPT_0x1
                 ; 0000 0147                 if(ch == 0x00){
                 _0x57:
00019e 3050      	CPI  R21,0
00019f f541      	BRNE _0x58
                 ; 0000 0148                   checksum = 0;
0001a0 e040      	LDI  R20,LOW(0)
                 ; 0000 0149                   ch = getchar();
0001a1 d1b0      	RCALL SUBOPT_0x1
                 ; 0000 014A                   if(ch == 0xFF){
0001a2 3f5f      	CPI  R21,255
0001a3 f521      	BRNE _0x59
                 ; 0000 014B                     len = getchar();
0001a4 deda      	RCALL _getchar
0001a5 2f2e      	MOV  R18,R30
0001a6 2733      	CLR  R19
                 ; 0000 014C                     for(i = 0; i < len; ++i){
0001a7 d1c1      	RCALL SUBOPT_0x6
                 _0x5B:
                +
0001a8 1702     +CP R16 , R18
0001a9 0713     +CPC R17 , R19
                 	__CPWRR 16,17,18,19
0001aa f424      	BRGE _0x5C
                 ; 0000 014D                       ch = getchar();
0001ab d1a6      	RCALL SUBOPT_0x1
                 ; 0000 014E                       GTC_Buffer[i] = ch;
0001ac d1af      	RCALL SUBOPT_0x3
                 ; 0000 014F                       checksum += ch;
                 ; 0000 0150                     }
0001ad d1b4      	RCALL SUBOPT_0x4
0001ae cff9      	RJMP _0x5B
                 _0x5C:
                 ; 0000 0151                     ch = getchar();
0001af d1a2      	RCALL SUBOPT_0x1
                 ; 0000 0152                     if((checksum+ch) != 0) break;
0001b0 2fe5      	MOV  R30,R21
0001b1 0fe4      	ADD  R30,R20
0001b2 f4a9      	BRNE _0x25
                 ; 0000 0153                     if(GTC_Buffer[0] == 0xA1){
0001b3 d1b1      	RCALL SUBOPT_0x5
0001b4 f499      	BRNE _0x5E
                 ; 0000 0154                         if(GTC_Buffer[1] == 0x01){
                +
0001b5 91a0 02fb+LDS R26 , _GTC_Buffer + ( 1 )
                 	__GETB2MN _GTC_Buffer,1
0001b7 30a1      	CPI  R26,LOW(0x1)
0001b8 f479      	BRNE _0x5F
                 ; 0000 0155                           if(GTC_Gate_ID[0] == GTC_Buffer[2] && GTC_Gate_ID[1] == GTC_Buffer[3]){
                +
0001b9 91e0 02fc+LDS R30 , _GTC_Buffer + ( 2 )
                 	__GETB1MN _GTC_Buffer,2
0001bb 91a0 033a 	LDS  R26,_GTC_Gate_ID
0001bd 17ea      	CP   R30,R26
0001be f431      	BRNE _0x61
                +
0001bf 91a0 033b+LDS R26 , _GTC_Gate_ID + ( 1 )
                 	__GETB2MN _GTC_Gate_ID,1
                +
0001c1 91e0 02fd+LDS R30 , _GTC_Buffer + ( 3 )
                 	__GETB1MN _GTC_Buffer,3
0001c3 17ea      	CP   R30,R26
0001c4 f009      	BREQ _0x62
                 _0x61:
0001c5 c002      	RJMP _0x60
                 _0x62:
                 ; 0000 0156                             reset_gtc_timeout();
0001c6 deca      	RCALL _reset_gtc_timeout
                 ; 0000 0157                             clear_buffer();
0001c7 de91      	RCALL _clear_buffer
                 ; 0000 0158                           }
                 ; 0000 0159                         }
                 _0x60:
                 ; 0000 015A                     }
                 _0x5F:
                 ; 0000 015B                   }
                 _0x5E:
                 ; 0000 015C                 }
                 _0x59:
                 ; 0000 015D                 break;
                 _0x58:
                 ; 0000 015E         }
                 _0x25:
                 ; 0000 015F       }
0001c8 cf32      	RJMP _0x20
                 ; 0000 0160 }
                 _0x63:
0001c9 cfff      	RJMP _0x63
                 ; .FEND
                 ;#include "PN532_I2C.h"
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;#include <mega8.h>
                 ;
                 ;TWI_BUFFER_STRUCT twi_rx;
                 ;TWI_BUFFER_STRUCT twi_tx;
                 ;TWI_BUFFER_STRUCT PN532_msg;
                 ;TWI_BUFFER_STRUCT tag_uid;
                 ;TWI_BUFFER_STRUCT tag_data;
                 ;
                 ;unsigned char MIFARE_Key_A[] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
                 
                 	.DSEG
                 ;unsigned char checksum;
                 ;int i;
                 ;
                 ;void TWIInit(void)
                 ; 0001 000F {
                 
                 	.CSEG
                 _TWIInit:
                 ; .FSTART _TWIInit
                 ; 0001 0010     //set SCL to 400kHz
                 ; 0001 0011     TWSR = 0x00;
0001ca e0e0      	LDI  R30,LOW(0)
0001cb b9e1      	OUT  0x1,R30
                 ; 0001 0012     TWBR = 7;   //347,826
0001cc e0e7      	LDI  R30,LOW(7)
0001cd b9e0      	OUT  0x0,R30
                 ; 0001 0013     //enable TWI
                 ; 0001 0014     TWCR = (1<<TWEN);
0001ce e0e4      	LDI  R30,LOW(4)
0001cf bfe6      	OUT  0x36,R30
                 ; 0001 0015 }
0001d0 9508      	RET
                 ; .FEND
                 ;
                 ;void TWIStart(void)
                 ; 0001 0018 {
                 _TWIStart:
                 ; .FSTART _TWIStart
                 ; 0001 0019     TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
0001d1 eae4      	LDI  R30,LOW(164)
0001d2 bfe6      	OUT  0x36,R30
                 ; 0001 001A     while ((TWCR & (1<<TWINT)) == 0) ;
                 _0x20004:
0001d3 b7e6      	IN   R30,0x36
0001d4 ffe7      	SBRS R30,7
0001d5 cffd      	RJMP _0x20004
                 ; 0001 001B }
0001d6 9508      	RET
                 ; .FEND
                 ;
                 ;void TWIStop(void)
                 ; 0001 001E {
                 _TWIStop:
                 ; .FSTART _TWIStop
                 ; 0001 001F     //TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
                 ; 0001 0020 //    DDRC.4 = DDRC.5 = 0;
                 ; 0001 0021 //    delay_ms(2);
                 ; 0001 0022 //    DDRC.4=1;
                 ; 0001 0023     DDRC.4=DDRC.5=1;
0001d7 9aa5      	SBI  0x14,5
0001d8 9aa4      	SBI  0x14,4
                 ; 0001 0024     PORTC.4=0;PORTC.5=1;
0001d9 98ac      	CBI  0x15,4
0001da 9aad      	SBI  0x15,5
                 ; 0001 0025     delay_ms(1);
0001db d1a8      	RCALL SUBOPT_0xB
0001dc d215      	RCALL _delay_ms
                 ; 0001 0026     PORTC.4=1;
0001dd 9aac      	SBI  0x15,4
                 ; 0001 0027 }
0001de 9508      	RET
                 ; .FEND
                 ;
                 ;void TWIWrite(unsigned char u8data)
                 ; 0001 002A {
                 _TWIWrite:
                 ; .FSTART _TWIWrite
                 ; 0001 002B     TWDR = u8data;
0001df 93aa      	ST   -Y,R26
                 ;	u8data -> Y+0
0001e0 81e8      	LD   R30,Y
0001e1 b9e3      	OUT  0x3,R30
                 ; 0001 002C     TWCR = (1<<TWINT)|(1<<TWEN);
0001e2 e8e4      	LDI  R30,LOW(132)
0001e3 bfe6      	OUT  0x36,R30
                 ; 0001 002D     while ((TWCR & (1<<TWINT)) == 0);
                 _0x20011:
0001e4 b7e6      	IN   R30,0x36
0001e5 ffe7      	SBRS R30,7
0001e6 cffd      	RJMP _0x20011
                 ; 0001 002E }
0001e7 c163      	RJMP _0x2060001
                 ; .FEND
                 ;
                 ;//read byte with ACK (Set TWEA, clear TWEA to send NACK, indicating master receiver has read the last byte)
                 ;unsigned char TWIRead(int ack)
                 ; 0001 0032 {
                 _TWIRead:
                 ; .FSTART _TWIRead
                 ; 0001 0033     TWCR = (1<<TWINT)|(1<<TWEN)|(ack<<TWEA);
0001e8 d19e      	RCALL SUBOPT_0xC
                 ;	ack -> Y+0
0001e9 81e8      	LD   R30,Y
0001ea 95e2      	SWAP R30
0001eb 7fe0      	ANDI R30,0xF0
0001ec 0fee      	LSL  R30
0001ed 0fee      	LSL  R30
0001ee 68e4      	ORI  R30,LOW(0x84)
0001ef bfe6      	OUT  0x36,R30
                 ; 0001 0034     while ((TWCR & (1<<TWINT)) == 0) ;
                 _0x20014:
0001f0 b7e6      	IN   R30,0x36
0001f1 ffe7      	SBRS R30,7
0001f2 cffd      	RJMP _0x20014
                 ; 0001 0035     return TWDR;
0001f3 b1e3      	IN   R30,0x3
0001f4 c013      	RJMP _0x2060006
                 ; 0001 0036 }
                 ; .FEND
                 ;
                 ;void PN532_cmd(TWI_BUFFER_STRUCT* msg)
                 ; 0001 0039 {
                 _PN532_cmd:
                 ; .FSTART _PN532_cmd
                 ; 0001 003A   TWIStart();
0001f5 d191      	RCALL SUBOPT_0xC
                 ;	*msg -> Y+0
0001f6 dfda      	RCALL _TWIStart
                 ; 0001 003B   TWIWrite(PN532_ADD);
0001f7 e4a8      	LDI  R26,LOW(72)
0001f8 dfe6      	RCALL _TWIWrite
                 ; 0001 003C   for(i = 0; i < msg->length; ++i){
0001f9 d190      	RCALL SUBOPT_0xD
                 _0x20018:
0001fa 81a8      	LD   R26,Y
0001fb 81b9      	LDD  R27,Y+1
0001fc d190      	RCALL SUBOPT_0xE
0001fd d192      	RCALL SUBOPT_0xF
0001fe f444      	BRGE _0x20019
                 ; 0001 003D     TWIWrite(msg->buffer[i]);
0001ff 01f5      	MOVW R30,R10
000200 81a8      	LD   R26,Y
000201 81b9      	LDD  R27,Y+1
000202 d191      	RCALL SUBOPT_0x10
000203 91ac      	LD   R26,X
000204 dfda      	RCALL _TWIWrite
                 ; 0001 003E   }
000205 d191      	RCALL SUBOPT_0x11
000206 cff3      	RJMP _0x20018
                 _0x20019:
                 ; 0001 003F   TWIStop();
000207 dfcf      	RCALL _TWIStop
                 ; 0001 0040 }
                 _0x2060006:
000208 9622      	ADIW R28,2
000209 9508      	RET
                 ; .FEND
                 ;
                 ;void PN532_build_msg(TWI_BUFFER_STRUCT* buffer, TWI_BUFFER_STRUCT* msg)
                 ; 0001 0043 {
                 _PN532_build_msg:
                 ; .FSTART _PN532_build_msg
                 ; 0001 0044   int msg_length = 0;
                 ; 0001 0045   checksum = 0xD4;
00020a d17c      	RCALL SUBOPT_0xC
00020b d1f8      	RCALL __SAVELOCR2
                 ;	*buffer -> Y+4
                 ;	*msg -> Y+2
                 ;	msg_length -> R16,R17
00020c d15c      	RCALL SUBOPT_0x6
00020d ede4      	LDI  R30,LOW(212)
00020e 2e8e      	MOV  R8,R30
                 ; 0001 0046 
                 ; 0001 0047   buffer->buffer[PN532_START]=0x00;                     ++msg_length;
00020f d18b      	RCALL SUBOPT_0x12
000210 e0e0      	LDI  R30,LOW(0)
000211 d18c      	RCALL SUBOPT_0x13
                 ; 0001 0048   buffer->buffer[PN532_START+1]=0xFF;                   ++msg_length;
000212 d188      	RCALL SUBOPT_0x12
000213 9611      	ADIW R26,1
000214 efef      	LDI  R30,LOW(255)
000215 d188      	RCALL SUBOPT_0x13
                 ; 0001 0049   buffer->buffer[PN532_LEN]=msg->length+1;               ++msg_length;
000216 d189      	RCALL SUBOPT_0x14
                +
000217 81ac     +LDD R26 , Y + 4
000218 81bd     +LDD R27 , Y + 4 + 1
000219 9612     +ADIW R26 , 2
00021a 93ec     +ST X , R30
                 	__PUTB1SNS 4,2
00021b d146      	RCALL SUBOPT_0x4
                 ; 0001 004A   buffer->buffer[PN532_LCS]=(~(msg->length+1))+1;        ++msg_length;
00021c d183      	RCALL SUBOPT_0x14
00021d 95e1      	NEG  R30
                +
00021e 81ac     +LDD R26 , Y + 4
00021f 81bd     +LDD R27 , Y + 4 + 1
000220 9613     +ADIW R26 , 3
000221 93ec     +ST X , R30
                 	__PUTB1SNS 4,3
000222 d13f      	RCALL SUBOPT_0x4
                 ; 0001 004B   buffer->buffer[PN532_TFI]=0xD4;                       ++msg_length;
000223 d177      	RCALL SUBOPT_0x12
000224 9614      	ADIW R26,4
000225 ede4      	LDI  R30,LOW(212)
000226 d177      	RCALL SUBOPT_0x13
                 ; 0001 004C   for(i = 0; i<msg->length; ++i){
000227 d162      	RCALL SUBOPT_0xD
                 _0x2001B:
000228 d17d      	RCALL SUBOPT_0x15
000229 d163      	RCALL SUBOPT_0xE
00022a d165      	RCALL SUBOPT_0xF
00022b f464      	BRGE _0x2001C
                 ; 0001 004D     buffer->buffer[PN532_DATA+i]=msg->buffer[i];              ++msg_length;
00022c 01f5      	MOVW R30,R10
00022d 9635      	ADIW R30,5
00022e d16c      	RCALL SUBOPT_0x12
00022f d179      	RCALL SUBOPT_0x16
000230 010f      	MOVW R0,R30
000231 d17a      	RCALL SUBOPT_0x17
000232 01d0      	MOVW R26,R0
000233 d16a      	RCALL SUBOPT_0x13
                 ; 0001 004E     checksum += msg->buffer[i];
000234 d177      	RCALL SUBOPT_0x17
000235 0e8e      	ADD  R8,R30
                 ; 0001 004F   }
000236 d160      	RCALL SUBOPT_0x11
000237 cff0      	RJMP _0x2001B
                 _0x2001C:
                 ; 0001 0050   buffer->buffer[PN532_DATA+i]= (~(checksum&0xFF))+1;   ++msg_length;
000238 01f5      	MOVW R30,R10
000239 9635      	ADIW R30,5
00023a d160      	RCALL SUBOPT_0x12
00023b d158      	RCALL SUBOPT_0x10
00023c 2de8      	MOV  R30,R8
00023d 95e1      	NEG  R30
00023e d15f      	RCALL SUBOPT_0x13
                 ; 0001 0051   buffer->length = msg_length;
00023f 01f8      	MOVW R30,R16
                +
000240 81ac     +LDD R26 , Y + 4
000241 81bd     +LDD R27 , Y + 4 + 1
000242 5ba0     +SUBI R26 , LOW ( - 80 )
000243 4fbf     +SBCI R27 , HIGH ( - 80 )
000244 93ed     +ST X + , R30
000245 93fc     +ST X , R31
                 	__PUTW1SN 4,80
                 ; 0001 0052 }
000246 d1c0      	RCALL __LOADLOCR2
000247 9626      	ADIW R28,6
000248 9508      	RET
                 ; .FEND
                 ;
                 ;bool PN532_read(TWI_BUFFER_STRUCT* dest)
                 ; 0001 0055 {
                 _PN532_read:
                 ; .FSTART _PN532_read
                 ; 0001 0056   unsigned char data = 0x00;
                 ; 0001 0057   unsigned char len = 0x00;
                 ; 0001 0058   // check ready bit
                 ; 0001 0059   while(1){
000249 d13d      	RCALL SUBOPT_0xC
00024a d1b9      	RCALL __SAVELOCR2
                 ;	*dest -> Y+2
                 ;	data -> R17
                 ;	len -> R16
00024b e010      	LDI  R17,0
00024c e000      	LDI  R16,0
                 _0x2001D:
                 ; 0001 005A     TWIStart();
00024d d163      	RCALL SUBOPT_0x18
                 ; 0001 005B     TWIWrite(PN532_ADD | 1);
                 ; 0001 005C     if(TWSR == 0x48) continue;
00024e f3f1      	BREQ _0x2001D
                 ; 0001 005D     data = TWIRead(1);
00024f d134      	RCALL SUBOPT_0xB
000250 d166      	RCALL SUBOPT_0x19
                 ; 0001 005E     if(data==0x00) TWIStop();
000251 3010      	CPI  R17,0
000252 f411      	BRNE _0x20021
000253 df83      	RCALL _TWIStop
                 ; 0001 005F     else if(data==0x01) break;
000254 c002      	RJMP _0x20022
                 _0x20021:
000255 3011      	CPI  R17,1
000256 f009      	BREQ _0x2001F
                 ; 0001 0060   }
                 _0x20022:
000257 cff5      	RJMP _0x2001D
                 _0x2001F:
                 ; 0001 0061   // get rid of preamble
                 ; 0001 0062   TWIRead(1);
000258 d12b      	RCALL SUBOPT_0xB
000259 df8e      	RCALL _TWIRead
                 ; 0001 0063   //check start of packet
                 ; 0001 0064   if((data=TWIRead(1))!=0x00) {TWIStop(); return false;}
00025a d129      	RCALL SUBOPT_0xB
00025b d15b      	RCALL SUBOPT_0x19
00025c 30e0      	CPI  R30,0
00025d f011      	BREQ _0x20024
00025e d15b      	RCALL SUBOPT_0x1A
00025f c043      	RJMP _0x2060005
                 ; 0001 0065   dest->buffer[len++]=data;
                 _0x20024:
000260 d15c      	RCALL SUBOPT_0x1B
                 ; 0001 0066   if((data=TWIRead(1))!=0xFF) {TWIStop(); return false;}
000261 d122      	RCALL SUBOPT_0xB
000262 d154      	RCALL SUBOPT_0x19
000263 3fef      	CPI  R30,LOW(0xFF)
000264 f011      	BREQ _0x20025
000265 d154      	RCALL SUBOPT_0x1A
000266 c03c      	RJMP _0x2060005
                 ; 0001 0067   dest->buffer[len++]=data;
                 _0x20025:
000267 d155      	RCALL SUBOPT_0x1B
                 ; 0001 0068 
                 ; 0001 0069   //get length
                 ; 0001 006A   dest->buffer[len++]=TWIRead(1);
000268 d15b      	RCALL SUBOPT_0x1C
000269 93ff      	PUSH R31
00026a 93ef      	PUSH R30
00026b d118      	RCALL SUBOPT_0xB
00026c df7b      	RCALL _TWIRead
00026d 91af      	POP  R26
00026e 91bf      	POP  R27
00026f 93ec      	ST   X,R30
                 ; 0001 006B   //get length checksum
                 ; 0001 006C   dest->buffer[len++]=TWIRead(1);
000270 d153      	RCALL SUBOPT_0x1C
000271 93ff      	PUSH R31
000272 93ef      	PUSH R30
000273 d110      	RCALL SUBOPT_0xB
000274 df73      	RCALL _TWIRead
000275 91af      	POP  R26
000276 91bf      	POP  R27
000277 93ec      	ST   X,R30
                 ; 0001 006D   //get TFI (should be D5)
                 ; 0001 006E   dest->buffer[len++]=TWIRead(1);
000278 d14b      	RCALL SUBOPT_0x1C
000279 93ff      	PUSH R31
00027a 93ef      	PUSH R30
00027b d108      	RCALL SUBOPT_0xB
00027c df6b      	RCALL _TWIRead
00027d 91af      	POP  R26
00027e 91bf      	POP  R27
00027f 93ec      	ST   X,R30
                 ; 0001 006F 
                 ; 0001 0070   for(i =0; i < dest->buffer[PN532_LEN]-1; ++i)
000280 d109      	RCALL SUBOPT_0xD
                 _0x20027:
000281 81ea      	LDD  R30,Y+2
000282 81fb      	LDD  R31,Y+2+1
000283 81e2      	LDD  R30,Z+2
000284 50e1      	SUBI R30,LOW(1)
000285 01d5      	MOVW R26,R10
000286 e0f0      	LDI  R31,0
000287 17ae      	CP   R26,R30
000288 07bf      	CPC  R27,R31
000289 f454      	BRGE _0x20028
                 ; 0001 0071   {
                 ; 0001 0072     dest->buffer[len++] = TWIRead(1);
00028a d139      	RCALL SUBOPT_0x1C
00028b 93ff      	PUSH R31
00028c 93ef      	PUSH R30
00028d d0f6      	RCALL SUBOPT_0xB
00028e df59      	RCALL _TWIRead
00028f 91af      	POP  R26
000290 91bf      	POP  R27
000291 93ec      	ST   X,R30
                 ; 0001 0073   }
000292 d104      	RCALL SUBOPT_0x11
000293 cfed      	RJMP _0x20027
                 _0x20028:
                 ; 0001 0074 
                 ; 0001 0075   //skip data checksum
                 ; 0001 0076   dest->buffer[len++]=TWIRead(0);
000294 d12f      	RCALL SUBOPT_0x1C
000295 93ff      	PUSH R31
000296 93ef      	PUSH R30
000297 e0a0      	LDI  R26,LOW(0)
000298 e0b0      	LDI  R27,0
000299 df4e      	RCALL _TWIRead
00029a 91af      	POP  R26
00029b 91bf      	POP  R27
00029c 93ec      	ST   X,R30
                 ; 0001 0077 
                 ; 0001 0078   //set buffer length
                 ; 0001 0079   dest->length = len;
00029d d108      	RCALL SUBOPT_0x15
00029e d0ee      	RCALL SUBOPT_0xE
00029f 2fe0      	MOV  R30,R16
0002a0 d128      	RCALL SUBOPT_0x1D
                 ; 0001 007A 
                 ; 0001 007B   //close comm
                 ; 0001 007C   TWIStop();
0002a1 df35      	RCALL _TWIStop
                 ; 0001 007D 
                 ; 0001 007E   //return true on success
                 ; 0001 007F   return true;
0002a2 e0e1      	LDI  R30,LOW(1)
                 _0x2060005:
0002a3 d163      	RCALL __LOADLOCR2
0002a4 9624      	ADIW R28,4
0002a5 9508      	RET
                 ; 0001 0080 }
                 ; .FEND
                 ;
                 ;void PN532_get_msg(TWI_BUFFER_STRUCT* src, TWI_BUFFER_STRUCT* dest, unsigned char offset)
                 ; 0001 0083 {
                 _PN532_get_msg:
                 ; .FSTART _PN532_get_msg
                 ; 0001 0084   // exclude TFI from src, thus -1
                 ; 0001 0085   dest->length = src->buffer[PN532_LEN]-1-offset;
0002a6 93aa      	ST   -Y,R26
                 ;	*src -> Y+3
                 ;	*dest -> Y+1
                 ;	offset -> Y+0
0002a7 81e9      	LDD  R30,Y+1
0002a8 81fa      	LDD  R31,Y+1+1
0002a9 5be0      	SUBI R30,LOW(-80)
0002aa 4fff      	SBCI R31,HIGH(-80)
0002ab 010f      	MOVW R0,R30
0002ac 81eb      	LDD  R30,Y+3
0002ad 81fc      	LDD  R31,Y+3+1
0002ae 81e2      	LDD  R30,Z+2
0002af 50e1      	SUBI R30,LOW(1)
0002b0 81a8      	LD   R26,Y
0002b1 1bea      	SUB  R30,R26
0002b2 01d0      	MOVW R26,R0
0002b3 d115      	RCALL SUBOPT_0x1D
                 ; 0001 0086   for(i=0; i < dest->length; ++i)
0002b4 d0d5      	RCALL SUBOPT_0xD
                 _0x2002A:
0002b5 81a9      	LDD  R26,Y+1
0002b6 81ba      	LDD  R27,Y+1+1
0002b7 d0d5      	RCALL SUBOPT_0xE
0002b8 d0d7      	RCALL SUBOPT_0xF
0002b9 f494      	BRGE _0x2002B
                 ; 0001 0087   {
                 ; 0001 0088     dest->buffer[i] = src->buffer[PN532_DATA+i+offset];
0002ba 01f5      	MOVW R30,R10
0002bb 81a9      	LDD  R26,Y+1
0002bc 81ba      	LDD  R27,Y+1+1
0002bd d0eb      	RCALL SUBOPT_0x16
0002be 010f      	MOVW R0,R30
0002bf 01d5      	MOVW R26,R10
0002c0 9615      	ADIW R26,5
0002c1 81e8      	LD   R30,Y
0002c2 e0f0      	LDI  R31,0
0002c3 d0e5      	RCALL SUBOPT_0x16
0002c4 81ab      	LDD  R26,Y+3
0002c5 81bc      	LDD  R27,Y+3+1
0002c6 d0cd      	RCALL SUBOPT_0x10
0002c7 91ec      	LD   R30,X
0002c8 01d0      	MOVW R26,R0
0002c9 93ec      	ST   X,R30
                 ; 0001 0089   }
0002ca d0cc      	RCALL SUBOPT_0x11
0002cb cfe9      	RJMP _0x2002A
                 _0x2002B:
                 ; 0001 008A }
0002cc 9625      	ADIW R28,5
0002cd 9508      	RET
                 ; .FEND
                 ;
                 ;bool PN532_wait_for_ack(){
                 ; 0001 008C _Bool PN532_wait_for_ack(){
                 _PN532_wait_for_ack:
                 ; .FSTART _PN532_wait_for_ack
                 ; 0001 008D   unsigned char data = 0x00;
                 ; 0001 008E   // check ready bit
                 ; 0001 008F   while(1){
0002ce 931a      	ST   -Y,R17
                 ;	data -> R17
0002cf e010      	LDI  R17,0
                 _0x2002C:
                 ; 0001 0090     TWIStart();
0002d0 d0e0      	RCALL SUBOPT_0x18
                 ; 0001 0091     TWIWrite(PN532_ADD | 1);
                 ; 0001 0092 
                 ; 0001 0093     // if NACK received, repeat data request
                 ; 0001 0094     if(TWSR == 0x48) continue;
0002d1 f3f1      	BREQ _0x2002C
                 ; 0001 0095     //TWIStart();
                 ; 0001 0096     data = TWIRead(1);
0002d2 d0b1      	RCALL SUBOPT_0xB
0002d3 d0e3      	RCALL SUBOPT_0x19
                 ; 0001 0097     if(data==0x00) TWIStop();
0002d4 3010      	CPI  R17,0
0002d5 f411      	BRNE _0x20030
0002d6 df00      	RCALL _TWIStop
                 ; 0001 0098     else if(data==0x01) break;
0002d7 c002      	RJMP _0x20031
                 _0x20030:
0002d8 3011      	CPI  R17,1
0002d9 f009      	BREQ _0x2002E
                 ; 0001 0099   }
                 _0x20031:
0002da cff5      	RJMP _0x2002C
                 _0x2002E:
                 ; 0001 009A   // get rid of preamble
                 ; 0001 009B   TWIRead(1);
0002db d0a8      	RCALL SUBOPT_0xB
0002dc df0b      	RCALL _TWIRead
                 ; 0001 009C   //check start of packet
                 ; 0001 009D   if(TWIRead(1)!=0x00) {TWIStop(); return false;}
0002dd d0a6      	RCALL SUBOPT_0xB
0002de df09      	RCALL _TWIRead
0002df 30e0      	CPI  R30,0
0002e0 f011      	BREQ _0x20033
0002e1 d0d8      	RCALL SUBOPT_0x1A
0002e2 c015      	RJMP _0x2060004
                 ; 0001 009E   if(TWIRead(1)!=0xFF) {TWIStop(); return false;}
                 _0x20033:
0002e3 d0a0      	RCALL SUBOPT_0xB
0002e4 df03      	RCALL _TWIRead
0002e5 3fef      	CPI  R30,LOW(0xFF)
0002e6 f011      	BREQ _0x20034
0002e7 d0d2      	RCALL SUBOPT_0x1A
0002e8 c00f      	RJMP _0x2060004
                 ; 0001 009F 
                 ; 0001 00A0   //check ack
                 ; 0001 00A1   if(TWIRead(1)!=0x00) {TWIStop(); return false;}
                 _0x20034:
0002e9 d09a      	RCALL SUBOPT_0xB
0002ea defd      	RCALL _TWIRead
0002eb 30e0      	CPI  R30,0
0002ec f011      	BREQ _0x20035
0002ed d0cc      	RCALL SUBOPT_0x1A
0002ee c009      	RJMP _0x2060004
                 ; 0001 00A2   if(TWIRead(0)!=0xFF) {TWIStop(); return false;}
                 _0x20035:
0002ef e0a0      	LDI  R26,LOW(0)
0002f0 e0b0      	LDI  R27,0
0002f1 def6      	RCALL _TWIRead
0002f2 3fef      	CPI  R30,LOW(0xFF)
0002f3 f011      	BREQ _0x20036
0002f4 d0c5      	RCALL SUBOPT_0x1A
0002f5 c002      	RJMP _0x2060004
                 ; 0001 00A3   TWIStop();
                 _0x20036:
0002f6 dee0      	RCALL _TWIStop
                 ; 0001 00A4   return true;
0002f7 e0e1      	LDI  R30,LOW(1)
                 _0x2060004:
0002f8 9119      	LD   R17,Y+
0002f9 9508      	RET
                 ; 0001 00A5 }
                 ; .FEND
                 ;
                 ;void PN532_get_firmware()
                 ; 0001 00A8 {
                 _PN532_get_firmware:
                 ; .FSTART _PN532_get_firmware
                 ; 0001 00A9   PN532_msg.buffer[0]=PN532_CMD_GETFIRMWARE;
0002fa e0e2      	LDI  R30,LOW(2)
0002fb 93e0 0204 	STS  _PN532_msg,R30
                 ; 0001 00AA   PN532_msg.length=1;
0002fd e0e1      	LDI  R30,LOW(1)
0002fe e0f0      	LDI  R31,HIGH(1)
0002ff d0cd      	RCALL SUBOPT_0x1E
                 ; 0001 00AB   PN532_build_msg(&twi_tx, &PN532_msg);
                 ; 0001 00AC   PN532_cmd(&twi_tx);
                 ; 0001 00AD   TWIInit();
000300 dec9      	RCALL _TWIInit
                 ; 0001 00AE   while(!PN532_wait_for_ack());
                 _0x20037:
000301 dfcc      	RCALL _PN532_wait_for_ack
000302 30e0      	CPI  R30,0
000303 f3e9      	BREQ _0x20037
                 ; 0001 00AF   PN532_read(&twi_rx);
000304 d0d6      	RCALL SUBOPT_0x1F
                 ; 0001 00B0   PN532_get_msg(&twi_rx, &PN532_msg, 1);
000305 e0a1      	LDI  R26,LOW(1)
000306 df9f      	RCALL _PN532_get_msg
                 ; 0001 00B1 }
000307 9508      	RET
                 ; .FEND
                 ;
                 ;bool PN532_SAM_config()
                 ; 0001 00B4 {
                 _PN532_SAM_config:
                 ; .FSTART _PN532_SAM_config
                 ; 0001 00B5   PN532_msg.buffer[0] = PN532_CMD_SAMCONFIGURATION;
000308 e1e4      	LDI  R30,LOW(20)
000309 d0dd      	RCALL SUBOPT_0x20
                 ; 0001 00B6   PN532_msg.buffer[1] = 0x01; // normal mode;
                 ; 0001 00B7   PN532_msg.buffer[2] = 0x14; // timeout 50ms * 20 = 1 second
00030a e1e4      	LDI  R30,LOW(20)
                +
00030b 93e0 0206+STS _PN532_msg + ( 2 ) , R30
                 	__PUTB1MN _PN532_msg,2
                 ; 0001 00B8   PN532_msg.buffer[3] = 0x00; // not using IRQ pin!
00030d e0e0      	LDI  R30,LOW(0)
                +
00030e 93e0 0207+STS _PN532_msg + ( 3 ) , R30
                 	__PUTB1MN _PN532_msg,3
                 ; 0001 00B9   PN532_msg.length=4;
000310 e0e4      	LDI  R30,LOW(4)
000311 e0f0      	LDI  R31,HIGH(4)
000312 d0ba      	RCALL SUBOPT_0x1E
                 ; 0001 00BA   PN532_build_msg(&twi_tx, &PN532_msg);
                 ; 0001 00BB   PN532_cmd(&twi_tx);
                 ; 0001 00BC   while(!PN532_wait_for_ack());
                 _0x2003A:
000313 dfba      	RCALL _PN532_wait_for_ack
000314 30e0      	CPI  R30,0
000315 f3e9      	BREQ _0x2003A
                 ; 0001 00BD   PN532_read(&twi_rx);
000316 d0c4      	RCALL SUBOPT_0x1F
                 ; 0001 00BE   PN532_get_msg(&twi_rx, &PN532_msg, 0);
000317 d0d5      	RCALL SUBOPT_0x21
                 ; 0001 00BF   if(PN532_msg.buffer[0]==0x15) return true;
000318 31a5      	CPI  R26,LOW(0x15)
000319 f151      	BREQ _0x2060002
                 ; 0001 00C0   else return false;
00031a c013      	RJMP _0x2060003
                 ; 0001 00C1 }
                 ; .FEND
                 ;
                 ;bool PN532_read_uid()
                 ; 0001 00C4 {
                 _PN532_read_uid:
                 ; .FSTART _PN532_read_uid
                 ; 0001 00C5   PN532_msg.buffer[0] = PN532_CMD_INLISTPASSIVETARGET;
00031b e4ea      	LDI  R30,LOW(74)
00031c d0ca      	RCALL SUBOPT_0x20
                 ; 0001 00C6   PN532_msg.buffer[1] = 1;  // max 1 cards at once
                 ; 0001 00C7   PN532_msg.buffer[2] = PN532_MIFARE_ISO14443A; //baudrate
00031d e0e0      	LDI  R30,LOW(0)
                +
00031e 93e0 0206+STS _PN532_msg + ( 2 ) , R30
                 	__PUTB1MN _PN532_msg,2
                 ; 0001 00C8   PN532_msg.length=3;
000320 e0e3      	LDI  R30,LOW(3)
000321 e0f0      	LDI  R31,HIGH(3)
000322 d0aa      	RCALL SUBOPT_0x1E
                 ; 0001 00C9   PN532_build_msg(&twi_tx, &PN532_msg);
                 ; 0001 00CA   PN532_cmd(&twi_tx);
                 ; 0001 00CB   while(!PN532_wait_for_ack());
                 _0x2003F:
000323 dfaa      	RCALL _PN532_wait_for_ack
000324 30e0      	CPI  R30,0
000325 f3e9      	BREQ _0x2003F
                 ; 0001 00CC   PN532_read(&twi_rx);
000326 d0b4      	RCALL SUBOPT_0x1F
                 ; 0001 00CD   PN532_get_msg(&twi_rx, &PN532_msg, 0);
000327 d0c5      	RCALL SUBOPT_0x21
                 ; 0001 00CE   if(PN532_msg.buffer[0] != PN532_CMD_INLISTPASSIVETARGET+1 || PN532_msg.buffer[1] < 1) return false;
000328 34ab      	CPI  R26,LOW(0x4B)
000329 f421      	BRNE _0x20043
                +
00032a 91a0 0205+LDS R26 , _PN532_msg + ( 1 )
                 	__GETB2MN _PN532_msg,1
00032c 30a1      	CPI  R26,LOW(0x1)
00032d f410      	BRSH _0x20042
                 _0x20043:
                 _0x2060003:
00032e e0e0      	LDI  R30,LOW(0)
00032f 9508      	RET
                 ; 0001 00CF   tag_uid.length = PN532_msg.buffer[6];
                 _0x20042:
                +
000330 eaa6     +LDI R26 , LOW ( _tag_uid + ( 80 ) )
000331 e0b2     +LDI R27 , HIGH ( _tag_uid + ( 80 ) )
                 	__POINTW2MN _tag_uid,80
                +
000332 91e0 020a+LDS R30 , _PN532_msg + ( 6 )
                 	__GETB1MN _PN532_msg,6
000334 d094      	RCALL SUBOPT_0x1D
                 ; 0001 00D0   for(i = 0; i<tag_uid.length; ++i)
000335 d054      	RCALL SUBOPT_0xD
                 _0x20046:
000336 d035      	RCALL SUBOPT_0x7
000337 16ae      	CP   R10,R30
000338 06bf      	CPC  R11,R31
000339 f454      	BRGE _0x20047
                 ; 0001 00D1   {
                 ; 0001 00D2     tag_uid.buffer[i] = PN532_msg.buffer[7+i];
00033a 01d5      	MOVW R26,R10
00033b 5aaa      	SUBI R26,LOW(-_tag_uid)
00033c 4fbd      	SBCI R27,HIGH(-_tag_uid)
00033d 01f5      	MOVW R30,R10
                +
00033e 5fe5     +SUBI R30 , LOW ( - _PN532_msg - ( 7 ) )
00033f 4ffd     +SBCI R31 , HIGH ( - _PN532_msg - ( 7 ) )
                 	__ADDW1MN _PN532_msg,7
000340 81e0      	LD   R30,Z
000341 93ec      	ST   X,R30
                 ; 0001 00D3   }
000342 d054      	RCALL SUBOPT_0x11
000343 cff2      	RJMP _0x20046
                 _0x20047:
                 ; 0001 00D4   return true;
                 _0x2060002:
000344 e0e1      	LDI  R30,LOW(1)
000345 9508      	RET
                 ; 0001 00D5 }
                 ; .FEND
                 ;
                 ;bool PN532_auth_tag(unsigned char block_number, unsigned char key_select, unsigned char* key_buffer)
                 ; 0001 00D8 {
                 ; 0001 00D9   PN532_read_uid();
                 ;	block_number -> Y+3
                 ;	key_select -> Y+2
                 ;	*key_buffer -> Y+0
                 ; 0001 00DA   PN532_msg.buffer[0] = PN532_CMD_INDATAEXCHANGE;
                 ; 0001 00DB   PN532_msg.buffer[1] = 1;                              /* Max card numbers */
                 ; 0001 00DC   PN532_msg.buffer[2] = (key_select) ? MIFARE_CMD_AUTH_B : MIFARE_CMD_AUTH_A;
                 ; 0001 00DD   PN532_msg.buffer[3] = block_number;                    /* Block Number (1K = 0..63, 4K = 0..255 */
                 ; 0001 00DE   for (i = 0; i < 6; ++i)
                 ; 0001 00DF   {
                 ; 0001 00E0     PN532_msg.buffer[4+i] = key_buffer[i];                /* 6 byte auth key */
                 ; 0001 00E1   }
                 ; 0001 00E2   for (i = 0; i < tag_uid.length; ++i)
                 ; 0001 00E3   {
                 ; 0001 00E4     PN532_msg.buffer[10+i] = tag_uid.buffer[i];                /* 4 byte card ID */
                 ; 0001 00E5   }
                 ; 0001 00E6   PN532_msg.length = 10+tag_uid.length;
                 ; 0001 00E7 
                 ; 0001 00E8   PN532_build_msg(&twi_tx, &PN532_msg);
                 ; 0001 00E9   PN532_cmd(&twi_tx);
                 ; 0001 00EA   while(!PN532_wait_for_ack());
                 ; 0001 00EB   PN532_read(&twi_rx);
                 ; 0001 00EC   PN532_get_msg(&twi_rx, &PN532_msg, 1);
                 ; 0001 00ED   if(PN532_msg.buffer[0] != 0x00) return false;
                 ; 0001 00EE   return true;
                 ; 0001 00EF }
                 ;
                 ;bool PN532_read_passive_tag(unsigned char block_number)
                 ; 0001 00F2 {
                 ; 0001 00F3   if(!PN532_auth_tag(block_number, 0, MIFARE_Key_A)) return false;
                 ;	block_number -> Y+0
                 ; 0001 00F4   PN532_msg.buffer[0] = PN532_CMD_INDATAEXCHANGE;
                 ; 0001 00F5   PN532_msg.buffer[1] = 1;                              /* Max card numbers */
                 ; 0001 00F6   PN532_msg.buffer[2] = MIFARE_CMD_READ;
                 ; 0001 00F7   PN532_msg.buffer[3] = block_number;                    /* Block Number (1K = 0..63, 4K = 0..255 */
                 ; 0001 00F8   PN532_msg.length = 4;
                 ; 0001 00F9 
                 ; 0001 00FA   PN532_build_msg(&twi_tx, &PN532_msg);
                 ; 0001 00FB   PN532_cmd(&twi_tx);
                 ; 0001 00FC   while(!PN532_wait_for_ack());
                 ; 0001 00FD   PN532_read(&twi_rx);
                 ; 0001 00FE   PN532_get_msg(&twi_rx, &PN532_msg, 1);
                 ; 0001 00FF   if(PN532_msg.buffer[0] != 0x00) return false;
                 ; 0001 0100   PN532_get_msg(&twi_rx, &tag_data, 2);
                 ; 0001 0101   return true;
                 ; 0001 0102 }
                 ;
                 ;bool PN532_write_passive_tag(unsigned char block_number, TWI_BUFFER_STRUCT* data)
                 ; 0001 0105 {
                 ; 0001 0106   if(!PN532_auth_tag(block_number, 0, MIFARE_Key_A)) return false;
                 ;	block_number -> Y+2
                 ;	*data -> Y+0
                 ; 0001 0107   PN532_msg.buffer[0] = PN532_CMD_INDATAEXCHANGE;
                 ; 0001 0108   PN532_msg.buffer[1] = 1;                              /* Max card numbers */
                 ; 0001 0109   PN532_msg.buffer[2] = MIFARE_CMD_WRITE;
                 ; 0001 010A   PN532_msg.buffer[3] = block_number;                    /* Block Number (1K = 0..63, 4K = 0..255 */
                 ; 0001 010B   for (i = 0; i < data->length && i < 16; ++i)
                 ; 0001 010C   {
                 ; 0001 010D     PN532_msg.buffer[4+i] = data->buffer[i];                /* 16 byte data */
                 ; 0001 010E   }
                 ; 0001 010F   PN532_msg.length = 4+i;
                 ; 0001 0110 
                 ; 0001 0111   PN532_build_msg(&twi_tx, &PN532_msg);
                 ; 0001 0112   PN532_cmd(&twi_tx);
                 ; 0001 0113   while(!PN532_wait_for_ack());
                 ; 0001 0114   PN532_read(&twi_rx);
                 ; 0001 0115   PN532_get_msg(&twi_rx, &PN532_msg, 1);
                 ; 0001 0116   if(PN532_msg.buffer[0] != 0x00) return false;
                 ; 0001 0117   PN532_get_msg(&twi_rx, &tag_data, 2);
                 ; 0001 0118   return true;
                 ; 0001 0119 }
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _putchar:
                 ; .FSTART _putchar
000346 93aa      	ST   -Y,R26
                 putchar0:
000347 9b5d           sbis usr,udre
000348 cffe           rjmp putchar0
000349 81e8           ld   r30,y
00034a b9ec           out  udr,r30
                 _0x2060001:
00034b 9621      	ADIW R28,1
00034c 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.DSEG
                 _twi_rx:
000160           	.BYTE 0x52
                 _twi_tx:
0001b2           	.BYTE 0x52
                 _PN532_msg:
000204           	.BYTE 0x52
                 _tag_uid:
000256           	.BYTE 0x52
                 _tag_data:
0002a8           	.BYTE 0x52
                 _GTC_Buffer:
0002fa           	.BYTE 0x40
                 _GTC_Gate_ID:
00033a           	.BYTE 0x2
                 _rx_buffer:
00033c           	.BYTE 0x80
                 _gtc_timeout:
0003bc           	.BYTE 0x2
                 _MIFARE_Key_A:
0003be           	.BYTE 0x6
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
00034d ede1      	LDI  R30,LOW(209)
00034e bded      	OUT  0x2D,R30
00034f e2e0      	LDI  R30,LOW(32)
000350 bdec      	OUT  0x2C,R30
000351 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 12 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x1:
000352 dd2c      	RCALL _getchar
000353 2f5e      	MOV  R21,R30
000354 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x2:
000355 e040      	LDI  R20,LOW(0)
000356 dd28      	RCALL _getchar
000357 2f2e      	MOV  R18,R30
000358 2733      	CLR  R19
                +
000359 e000     +LDI R16 , LOW ( 0 )
00035a e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
00035b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x3:
00035c 01f8      	MOVW R30,R16
00035d 50e6      	SUBI R30,LOW(-_GTC_Buffer)
00035e 4ffd      	SBCI R31,HIGH(-_GTC_Buffer)
00035f 8350      	ST   Z,R21
000360 0f45      	ADD  R20,R21
000361 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 12 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x4:
                +
000362 5f0f     +SUBI R16 , LOW ( - 1 )
000363 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000364 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x5:
000365 91a0 02fa 	LDS  R26,_GTC_Buffer
000367 3aa1      	CPI  R26,LOW(0xA1)
000368 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x6:
                +
000369 e000     +LDI R16 , LOW ( 0 )
00036a e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
00036b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x7:
                +
00036c 91e0 02a6+LDS R30 , _tag_uid + ( 80 )
00036e 91f0 02a7+LDS R31 , _tag_uid + ( 80 ) + 1
                 	__GETW1MN _tag_uid,80
000370 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x8:
000371 e5a6      	LDI  R26,LOW(_tag_uid)
000372 e0b2      	LDI  R27,HIGH(_tag_uid)
000373 0fa0      	ADD  R26,R16
000374 1fb1      	ADC  R27,R17
000375 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x9:
000376 98a9      	CBI  0x15,1
000377 91e0 03bc 	LDS  R30,_gtc_timeout
000379 91f0 03bd 	LDS  R31,_gtc_timeout+1
00037b 9730      	SBIW R30,0
00037c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0xA:
00037d e0e0      	LDI  R30,LOW(0)
00037e 93e0 033a 	STS  _GTC_Gate_ID,R30
                +
000380 93e0 033b+STS _GTC_Gate_ID + ( 1 ) , R30
                 	__PUTB1MN _GTC_Gate_ID,1
000382 2466      	CLR  R6
000383 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 14 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0xB:
000384 e0a1      	LDI  R26,LOW(1)
000385 e0b0      	LDI  R27,0
000386 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xC:
000387 93ba      	ST   -Y,R27
000388 93aa      	ST   -Y,R26
000389 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0xD:
00038a 24aa      	CLR  R10
00038b 24bb      	CLR  R11
00038c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xE:
00038d 5ba0      	SUBI R26,LOW(-80)
00038e 4fbf      	SBCI R27,HIGH(-80)
00038f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0xF:
000390 d06b      	RCALL __GETW1P
000391 16ae      	CP   R10,R30
000392 06bf      	CPC  R11,R31
000393 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x10:
000394 0fae      	ADD  R26,R30
000395 1fbf      	ADC  R27,R31
000396 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x11:
000397 01f5      	MOVW R30,R10
000398 9631      	ADIW R30,1
000399 015f      	MOVW R10,R30
00039a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x12:
00039b 81ac      	LDD  R26,Y+4
00039c 81bd      	LDD  R27,Y+4+1
00039d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x13:
00039e 93ec      	ST   X,R30
00039f cfc2      	RJMP SUBOPT_0x4
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x14:
0003a0 81aa      	LDD  R26,Y+2
0003a1 81bb      	LDD  R27,Y+2+1
0003a2 dfea      	RCALL SUBOPT_0xE
0003a3 91ec      	LD   R30,X
0003a4 5fef      	SUBI R30,-LOW(1)
0003a5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 11 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x15:
0003a6 81aa      	LDD  R26,Y+2
0003a7 81bb      	LDD  R27,Y+2+1
0003a8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 10 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x16:
0003a9 0fea      	ADD  R30,R26
0003aa 1ffb      	ADC  R31,R27
0003ab 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x17:
0003ac 01f5      	MOVW R30,R10
0003ad dff8      	RCALL SUBOPT_0x15
0003ae dfe5      	RCALL SUBOPT_0x10
0003af 91ec      	LD   R30,X
0003b0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x18:
0003b1 de1f      	RCALL _TWIStart
0003b2 e4a9      	LDI  R26,LOW(73)
0003b3 de2b      	RCALL _TWIWrite
0003b4 b1e1      	IN   R30,0x1
0003b5 34e8      	CPI  R30,LOW(0x48)
0003b6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x19:
0003b7 de30      	RCALL _TWIRead
0003b8 2f1e      	MOV  R17,R30
0003b9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x1A:
0003ba de1c      	RCALL _TWIStop
0003bb e0e0      	LDI  R30,LOW(0)
0003bc 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x1B:
0003bd 2fe0      	MOV  R30,R16
0003be 5f0f      	SUBI R16,-1
0003bf dfe6      	RCALL SUBOPT_0x15
0003c0 e0f0      	LDI  R31,0
0003c1 dfe7      	RCALL SUBOPT_0x16
0003c2 8310      	ST   Z,R17
0003c3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:14 WORDS
                 SUBOPT_0x1C:
0003c4 2fe0      	MOV  R30,R16
0003c5 5f0f      	SUBI R16,-1
0003c6 dfdf      	RCALL SUBOPT_0x15
0003c7 e0f0      	LDI  R31,0
0003c8 cfe0      	RJMP SUBOPT_0x16
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x1D:
0003c9 e0f0      	LDI  R31,0
0003ca 93ed      	ST   X+,R30
0003cb 93fc      	ST   X,R31
0003cc 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:24 WORDS
                 SUBOPT_0x1E:
                +
0003cd 93e0 0254+STS _PN532_msg + ( 80 ) , R30
0003cf 93f0 0255+STS _PN532_msg + ( 80 ) + 1 , R31
                 	__PUTW1MN _PN532_msg,80
0003d1 ebe2      	LDI  R30,LOW(_twi_tx)
0003d2 e0f1      	LDI  R31,HIGH(_twi_tx)
0003d3 93fa      	ST   -Y,R31
0003d4 93ea      	ST   -Y,R30
0003d5 e0a4      	LDI  R26,LOW(_PN532_msg)
0003d6 e0b2      	LDI  R27,HIGH(_PN532_msg)
0003d7 de32      	RCALL _PN532_build_msg
0003d8 eba2      	LDI  R26,LOW(_twi_tx)
0003d9 e0b1      	LDI  R27,HIGH(_twi_tx)
0003da ce1a      	RJMP _PN532_cmd
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:18 WORDS
                 SUBOPT_0x1F:
0003db e6a0      	LDI  R26,LOW(_twi_rx)
0003dc e0b1      	LDI  R27,HIGH(_twi_rx)
0003dd de6b      	RCALL _PN532_read
0003de e6e0      	LDI  R30,LOW(_twi_rx)
0003df e0f1      	LDI  R31,HIGH(_twi_rx)
0003e0 93fa      	ST   -Y,R31
0003e1 93ea      	ST   -Y,R30
0003e2 e0e4      	LDI  R30,LOW(_PN532_msg)
0003e3 e0f2      	LDI  R31,HIGH(_PN532_msg)
0003e4 93fa      	ST   -Y,R31
0003e5 93ea      	ST   -Y,R30
0003e6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x20:
0003e7 93e0 0204 	STS  _PN532_msg,R30
0003e9 e0e1      	LDI  R30,LOW(1)
                +
0003ea 93e0 0205+STS _PN532_msg + ( 1 ) , R30
                 	__PUTB1MN _PN532_msg,1
0003ec 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x21:
0003ed e0a0      	LDI  R26,LOW(0)
0003ee deb7      	RCALL _PN532_get_msg
0003ef 91a0 0204 	LDS  R26,_PN532_msg
0003f1 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
0003f2 9610      	adiw r26,0
0003f3 f039      	breq __delay_ms1
                 __delay_ms0:
                +
0003f4 eb88     +LDI R24 , LOW ( 0xBB8 )
0003f5 e09b     +LDI R25 , HIGH ( 0xBB8 )
                +__DELAY_USW_LOOP :
0003f6 9701     +SBIW R24 , 1
0003f7 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xBB8
0003f8 95a8      	wdr
0003f9 9711      	sbiw r26,1
0003fa f7c9      	brne __delay_ms0
                 __delay_ms1:
0003fb 9508      	ret
                 
                 __GETW1P:
0003fc 91ed      	LD   R30,X+
0003fd 91fc      	LD   R31,X
0003fe 9711      	SBIW R26,1
0003ff 9508      	RET
                 
                 __CPW02:
000400 2400      	CLR  R0
000401 160a      	CP   R0,R26
000402 060b      	CPC  R0,R27
000403 9508      	RET
                 
                 __SAVELOCR2:
000404 931a      	ST   -Y,R17
000405 930a      	ST   -Y,R16
000406 9508      	RET
                 
                 __LOADLOCR2:
000407 8119      	LDD  R17,Y+1
000408 8108      	LD   R16,Y
000409 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega8A register use summary:
r0 :  17 r1 :   1 r2 :   1 r3 :   0 r4 :   5 r5 :   5 r6 :   5 r7 :   9 
r8 :   3 r9 :   3 r10:  14 r11:   3 r12:   0 r13:   0 r14:   0 r15:   0 
r16:  23 r17:  26 r18:   5 r19:   5 r20:  11 r21:  12 r22:   2 r23:   0 
r24:   9 r25:   3 r26:  93 r27:  42 r28:   6 r29:   1 r30: 282 r31:  55 
x  :  30 y  :  71 z  :  15 
Registers used: 29 out of 35 (82.9%)

ATmega8A instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   3 add   :  10 
adiw  :  14 and   :   0 andi  :   2 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :  27 
brge  :  11 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 
brlt  :   0 brmi  :   0 brne  :  29 brpl  :   0 brsh  :   1 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 cbi   :   7 
cbr   :   0 clc   :   0 clh   :   0 cli   :   2 cln   :   0 clr   :  16 
cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :  15 
cpc   :   9 cpi   :  31 cpse  :   0 dec   :   2 des   :   0 eor   :   0 
fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 in    :   9 
inc   :   3 ld    :  34 ldd   :  29 ldi   : 122 lds   :  23 lpm   :   7 
lsl   :   2 lsr   :   0 mov   :  23 movw  :  24 mul   :   0 muls  :   0 
mulsu :   0 neg   :   3 nop   :   0 or    :   0 ori   :   1 out   :  49 
pop   :  10 push  :  10 rcall : 200 ret   :  50 reti  :   2 rjmp  :  66 
rol   :   0 ror   :   0 sbc   :   0 sbci  :  10 sbi   :  15 sbic  :   0 
sbis  :   1 sbiw  :   8 sbr   :   0 sbrc  :   0 sbrs  :   3 sec   :   0 
seh   :   0 sei   :   2 sen   :   0 ser   :   0 ses   :   0 set   :   1 
sev   :   0 sez   :   0 sleep :   0 spm   :   0 st    :  46 std   :   0 
sts   :  14 sub   :   1 subi  :  17 swap  :   1 tst   :   4 wdr   :   1 

Instructions used: 49 out of 114 (43.0%)

ATmega8A memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000814   2016     52   2068    8192  25.2%
[.dseg] 0x000060 0x0003c4      0    612    612    1024  59.8%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 8 warnings
