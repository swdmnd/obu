
AVRASM ver. 2.1.30  D:\My Files\AA\TEKNIK ELEKTRO\TA\obu\Debug\List\obu.asm Mon Sep 11 10:40:15 2017

D:\My Files\AA\TEKNIK ELEKTRO\TA\obu\Debug\List\obu.asm(1086): warning: Register r5 already defined by the .DEF directive
D:\My Files\AA\TEKNIK ELEKTRO\TA\obu\Debug\List\obu.asm(1087): warning: Register r4 already defined by the .DEF directive
D:\My Files\AA\TEKNIK ELEKTRO\TA\obu\Debug\List\obu.asm(1088): warning: Register r7 already defined by the .DEF directive
D:\My Files\AA\TEKNIK ELEKTRO\TA\obu\Debug\List\obu.asm(1089): warning: Register r6 already defined by the .DEF directive
D:\My Files\AA\TEKNIK ELEKTRO\TA\obu\Debug\List\obu.asm(1090): warning: Register r8 already defined by the .DEF directive
D:\My Files\AA\TEKNIK ELEKTRO\TA\obu\Debug\List\obu.asm(1091): warning: Register r9 already defined by the .DEF directive
D:\My Files\AA\TEKNIK ELEKTRO\TA\obu\Debug\List\obu.asm(1092): warning: Register r11 already defined by the .DEF directive
D:\My Files\AA\TEKNIK ELEKTRO\TA\obu\Debug\List\obu.asm(1093): warning: Register r10 already defined by the .DEF directive
D:\My Files\AA\TEKNIK ELEKTRO\TA\obu\Debug\List\obu.asm(1094): warning: Register r13 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega8A
                 ;Program type           : Application
                 ;Clock frequency        : 12.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega8A
                 	#pragma AVRPART MEMORY PROG_FLASH 8192
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	RCALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	RCALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _rx_wr_index=R5
                 	.DEF _rx_rd_index=R4
                 	.DEF _rx_counter=R7
                 	.DEF _checksum=R6
                 	.DEF _i=R8
                 	.DEF _i_msb=R9
                 	.DEF __lcd_x=R11
                 	.DEF __lcd_y=R10
                 	.DEF __lcd_maxx=R13
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 c032      	RJMP __RESET
000001 cffe      	RJMP 0x00
000002 cffd      	RJMP 0x00
000003 cffc      	RJMP 0x00
000004 cffb      	RJMP 0x00
000005 cffa      	RJMP 0x00
000006 cff9      	RJMP 0x00
000007 cff8      	RJMP 0x00
000008 cff7      	RJMP 0x00
000009 cff6      	RJMP 0x00
00000a cff5      	RJMP 0x00
00000b c053      	RJMP _usart_rx_isr
00000c cff3      	RJMP 0x00
00000d cff2      	RJMP 0x00
00000e cff1      	RJMP 0x00
00000f cff0      	RJMP 0x00
000010 cfef      	RJMP 0x00
000011 cfee      	RJMP 0x00
000012 cfed      	RJMP 0x00
                 
                 _tbl10_G102:
000013 2710
000014 03e8
000015 0064
000016 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
000017 0001      	.DB  0x1,0x0
                 _tbl16_G102:
000018 1000
000019 0100
00001a 0010
00001b 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;REGISTER BIT VARIABLES INITIALIZATION
                 __REG_BIT_VARS:
00001c 0000      	.DW  0x0000
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
00001d 0000
00001e 0000      	.DB  0x0,0x0,0x0,0x0
                 
                 _0x0:
00001f 3025
000020 7832
D:\My Files\AA\TEKNIK ELEKTRO\TA\obu\Debug\List\obu.asm(1138): warning: .cseg .db misalignment - padding zero byte
000021 0000      	.DB  0x25,0x30,0x32,0x78,0x0
                 _0x20003:
000022 ffff
000023 ffff
000024 ffff      	.DB  0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
                 _0x2020003:
000025 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
000026 0001      	.DW  0x01
000027 0002      	.DW  0x02
000028 0038      	.DW  __REG_BIT_VARS*2
                 
000029 0004      	.DW  0x04
00002a 0004      	.DW  0x04
00002b 003a      	.DW  __REG_VARS*2
                 
00002c 0006      	.DW  0x06
00002d 0302      	.DW  _MIFARE_Key_A
00002e 0044      	.DW  _0x20003*2
                 
00002f 0002      	.DW  0x02
000030 0308      	.DW  __base_y_G101
000031 004a      	.DW  _0x2020003*2
                 
                 _0xFFFFFFFF:
000032 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000033 94f8      	CLI
000034 27ee      	CLR  R30
000035 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000036 e0f1      	LDI  R31,1
000037 bffb      	OUT  GICR,R31
000038 bfeb      	OUT  GICR,R30
000039 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
00003a e08d      	LDI  R24,(14-2)+1
00003b e0a2      	LDI  R26,2
00003c 27bb      	CLR  R27
                 __CLEAR_REG:
00003d 93ed      	ST   X+,R30
00003e 958a      	DEC  R24
00003f f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000040 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000041 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000042 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000043 93ed      	ST   X+,R30
000044 9701      	SBIW R24,1
000045 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000046 e4ec      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000047 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000048 9185      	LPM  R24,Z+
000049 9195      	LPM  R25,Z+
00004a 9700      	SBIW R24,0
00004b f061      	BREQ __GLOBAL_INI_END
00004c 91a5      	LPM  R26,Z+
00004d 91b5      	LPM  R27,Z+
00004e 9005      	LPM  R0,Z+
00004f 9015      	LPM  R1,Z+
000050 01bf      	MOVW R22,R30
000051 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000052 9005      	LPM  R0,Z+
000053 920d      	ST   X+,R0
000054 9701      	SBIW R24,1
000055 f7e1      	BRNE __GLOBAL_INI_LOOP
000056 01fb      	MOVW R30,R22
000057 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000058 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000059 bfed      	OUT  SPL,R30
00005a e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00005b bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00005c e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00005d e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00005e c022      	RJMP _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;#include <mega8.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;#include <string.h>
                 ;#include "PN532_I2C.h"
                 ;
                 ;// Alphanumeric LCD functions
                 ;#include <alcd.h>
                 ;
                 ;// Declare your global variables here
                 ;
                 ;#define DATA_REGISTER_EMPTY (1<<UDRE)
                 ;#define RX_COMPLETE         (1<<RXC)
                 ;#define FRAMING_ERROR       (1<<FE)
                 ;#define PARITY_ERROR        (1<<UPE)
                 ;#define DATA_OVERRUN        (1<<DOR)
                 ;
                 ;// USART Receiver buffer
                 ;#define RX_BUFFER_SIZE 8
                 ;char rx_buffer[RX_BUFFER_SIZE];
                 ;
                 ;#if RX_BUFFER_SIZE <= 256
                 ;unsigned char rx_wr_index=0,rx_rd_index=0;
                 ;#else
                 ;unsigned int rx_wr_index=0,rx_rd_index=0;
                 ;#endif
                 ;
                 ;#if RX_BUFFER_SIZE < 256
                 ;unsigned char rx_counter=0;
                 ;#else
                 ;unsigned int rx_counter=0;
                 ;#endif
                 ;
                 ;// This flag is set on USART Receiver buffer overflow
                 ;bit rx_buffer_overflow;
                 ;
                 ;// USART Receiver interrupt service routine
                 ;interrupt [USART_RXC] void usart_rx_isr(void)
                 ; 0000 0026 {
                 
                 	.CSEG
                 _usart_rx_isr:
                 ; .FSTART _usart_rx_isr
00005f 93ea      	ST   -Y,R30
000060 93fa      	ST   -Y,R31
000061 b7ef      	IN   R30,SREG
000062 93ea      	ST   -Y,R30
                 ; 0000 0027 char status,data;
                 ; 0000 0028 status=UCSRA;
000063 d4fa      	RCALL __SAVELOCR2
                 ;	status -> R17
                 ;	data -> R16
000064 b11b      	IN   R17,11
                 ; 0000 0029 data=UDR;
000065 b10c      	IN   R16,12
                 ; 0000 002A if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
000066 2fe1      	MOV  R30,R17
000067 71ec      	ANDI R30,LOW(0x1C)
000068 f489      	BRNE _0x3
                 ; 0000 002B    {
                 ; 0000 002C    rx_buffer[rx_wr_index++]=data;
000069 2de5      	MOV  R30,R5
00006a 9453      	INC  R5
00006b e0f0      	LDI  R31,0
00006c 50e6      	SUBI R30,LOW(-_rx_buffer)
00006d 4ffd      	SBCI R31,HIGH(-_rx_buffer)
00006e 8300      	ST   Z,R16
                 ; 0000 002D #if RX_BUFFER_SIZE == 256
                 ; 0000 002E    // special case for receiver buffer size=256
                 ; 0000 002F    if (++rx_counter == 0) rx_buffer_overflow=1;
                 ; 0000 0030 #else
                 ; 0000 0031    if (rx_wr_index == RX_BUFFER_SIZE) rx_wr_index=0;
00006f e0e8      	LDI  R30,LOW(8)
000070 15e5      	CP   R30,R5
000071 f409      	BRNE _0x4
000072 2455      	CLR  R5
                 ; 0000 0032    if (++rx_counter == RX_BUFFER_SIZE)
                 _0x4:
000073 9473      	INC  R7
000074 e0e8      	LDI  R30,LOW(8)
000075 15e7      	CP   R30,R7
000076 f419      	BRNE _0x5
                 ; 0000 0033       {
                 ; 0000 0034       rx_counter=0;
000077 2477      	CLR  R7
                 ; 0000 0035       rx_buffer_overflow=1;
000078 9468      	SET
000079 f820      	BLD  R2,0
                 ; 0000 0036       }
                 ; 0000 0037 #endif
                 ; 0000 0038    }
                 _0x5:
                 ; 0000 0039 }
                 _0x3:
00007a 9109      	LD   R16,Y+
00007b 9119      	LD   R17,Y+
00007c 91e9      	LD   R30,Y+
00007d bfef      	OUT  SREG,R30
00007e 91f9      	LD   R31,Y+
00007f 91e9      	LD   R30,Y+
000080 9518      	RETI
                 ; .FEND
                 ;
                 ;#ifndef _DEBUG_TERMINAL_IO_
                 ;// Get a character from the USART Receiver buffer
                 ;#define _ALTERNATE_GETCHAR_
                 ;#pragma used+
                 ;char getchar(void)
                 ; 0000 0040 {
                 ; 0000 0041 char data;
                 ; 0000 0042 while (rx_counter==0);
                 ;	data -> R17
                 ; 0000 0043 data=rx_buffer[rx_rd_index++];
                 ; 0000 0044 #if RX_BUFFER_SIZE != 256
                 ; 0000 0045 if (rx_rd_index == RX_BUFFER_SIZE) rx_rd_index=0;
                 ; 0000 0046 #endif
                 ; 0000 0047 #asm("cli")
                 ; 0000 0048 --rx_counter;
                 ; 0000 0049 #asm("sei")
                 ; 0000 004A return data;
                 ; 0000 004B }
                 ;#pragma used-
                 ;#endif
                 ;
                 ;// Standard Input/Output functions
                 ;#include <stdio.h>
                 ;
                 ;// Global variables
                 ;
                 ;void main(void)
                 ; 0000 0055 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0056 // Declare your local variables here
                 ; 0000 0057 int i;
                 ; 0000 0058 //unsigned char write_data[] = {'M', '.', ' ', 'A', 'R', 'I', 'E', 'F', ' ', 'F', '.', '.', '.', '.', '.', '.'};
                 ; 0000 0059 
                 ; 0000 005A // Input/Output Ports initialization
                 ; 0000 005B // Port B initialization
                 ; 0000 005C // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 005D DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
                 ;	i -> R16,R17
000081 e0e0      	LDI  R30,LOW(0)
000082 bbe7      	OUT  0x17,R30
                 ; 0000 005E // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 005F PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (1<<PORTB1) | (0<<PORTB0);
000083 e0e2      	LDI  R30,LOW(2)
000084 bbe8      	OUT  0x18,R30
                 ; 0000 0060 
                 ; 0000 0061 // Port C initialization
                 ; 0000 0062 // Function: Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0063 DDRC=(0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
000085 e0e0      	LDI  R30,LOW(0)
000086 bbe4      	OUT  0x14,R30
                 ; 0000 0064 // State: Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0065 PORTC=(0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
000087 bbe5      	OUT  0x15,R30
                 ; 0000 0066 
                 ; 0000 0067 // Port D initialization
                 ; 0000 0068 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=Out Bit2=In Bit1=In Bit0=In
                 ; 0000 0069 DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (1<<DDD3) | (1<<DDD2) | (0<<DDD1) | (0<<DDD0);
000088 e0ec      	LDI  R30,LOW(12)
000089 bbe1      	OUT  0x11,R30
                 ; 0000 006A // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=1 Bit2=T Bit1=T Bit0=T
                 ; 0000 006B PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (1<<PORTD3) | (1<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
00008a bbe2      	OUT  0x12,R30
                 ; 0000 006C 
                 ; 0000 006D // Timer/Counter 0 initialization
                 ; 0000 006E // Clock source: System Clock
                 ; 0000 006F // Clock value: Timer 0 Stopped
                 ; 0000 0070 TCCR0=(0<<CS02) | (0<<CS01) | (0<<CS00);
00008b e0e0      	LDI  R30,LOW(0)
00008c bfe3      	OUT  0x33,R30
                 ; 0000 0071 TCNT0=0x00;
00008d bfe2      	OUT  0x32,R30
                 ; 0000 0072 
                 ; 0000 0073 // Timer/Counter 1 initialization
                 ; 0000 0074 // Clock source: System Clock
                 ; 0000 0075 // Clock value: Timer1 Stopped
                 ; 0000 0076 // Mode: Normal top=0xFFFF
                 ; 0000 0077 // OC1A output: Disconnected
                 ; 0000 0078 // OC1B output: Disconnected
                 ; 0000 0079 // Noise Canceler: Off
                 ; 0000 007A // Input Capture on Falling Edge
                 ; 0000 007B // Timer1 Overflow Interrupt: Off
                 ; 0000 007C // Input Capture Interrupt: Off
                 ; 0000 007D // Compare A Match Interrupt: Off
                 ; 0000 007E // Compare B Match Interrupt: Off
                 ; 0000 007F TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
00008e bdef      	OUT  0x2F,R30
                 ; 0000 0080 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
00008f bdee      	OUT  0x2E,R30
                 ; 0000 0081 TCNT1H=0x00;
000090 bded      	OUT  0x2D,R30
                 ; 0000 0082 TCNT1L=0x00;
000091 bdec      	OUT  0x2C,R30
                 ; 0000 0083 ICR1H=0x00;
000092 bde7      	OUT  0x27,R30
                 ; 0000 0084 ICR1L=0x00;
000093 bde6      	OUT  0x26,R30
                 ; 0000 0085 OCR1AH=0x00;
000094 bdeb      	OUT  0x2B,R30
                 ; 0000 0086 OCR1AL=0x00;
000095 bdea      	OUT  0x2A,R30
                 ; 0000 0087 OCR1BH=0x00;
000096 bde9      	OUT  0x29,R30
                 ; 0000 0088 OCR1BL=0x00;
000097 bde8      	OUT  0x28,R30
                 ; 0000 0089 
                 ; 0000 008A // Timer/Counter 2 initialization
                 ; 0000 008B // Clock source: System Clock
                 ; 0000 008C // Clock value: Timer2 Stopped
                 ; 0000 008D // Mode: Normal top=0xFF
                 ; 0000 008E // OC2 output: Disconnected
                 ; 0000 008F ASSR=0<<AS2;
000098 bde2      	OUT  0x22,R30
                 ; 0000 0090 TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
000099 bde5      	OUT  0x25,R30
                 ; 0000 0091 TCNT2=0x00;
00009a bde4      	OUT  0x24,R30
                 ; 0000 0092 OCR2=0x00;
00009b bde3      	OUT  0x23,R30
                 ; 0000 0093 
                 ; 0000 0094 // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 0095 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<TOIE0);
00009c bfe9      	OUT  0x39,R30
                 ; 0000 0096 
                 ; 0000 0097 // External Interrupt(s) initialization
                 ; 0000 0098 // INT0: Off
                 ; 0000 0099 // INT1: Off
                 ; 0000 009A MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
00009d bfe5      	OUT  0x35,R30
                 ; 0000 009B 
                 ; 0000 009C // USART initialization
                 ; 0000 009D // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0000 009E // USART Receiver: On
                 ; 0000 009F // USART Transmitter: On
                 ; 0000 00A0 // USART Mode: Asynchronous
                 ; 0000 00A1 // USART Baud Rate: 9600
                 ; 0000 00A2 UCSRA=(0<<RXC) | (0<<TXC) | (0<<UDRE) | (0<<FE) | (0<<DOR) | (0<<UPE) | (0<<U2X) | (0<<MPCM);
00009e b9eb      	OUT  0xB,R30
                 ; 0000 00A3 //UCSRB=(1<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (1<<RXEN) | (1<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
                 ; 0000 00A4 UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (1<<RXEN) | (1<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
00009f e1e8      	LDI  R30,LOW(24)
0000a0 b9ea      	OUT  0xA,R30
                 ; 0000 00A5 UCSRC=(1<<URSEL) | (0<<UMSEL) | (0<<UPM1) | (0<<UPM0) | (0<<USBS) | (1<<UCSZ1) | (1<<UCSZ0) | (0<<UCPOL);
0000a1 e8e6      	LDI  R30,LOW(134)
0000a2 bde0      	OUT  0x20,R30
                 ; 0000 00A6 UBRRH=0x00;
0000a3 e0e0      	LDI  R30,LOW(0)
0000a4 bde0      	OUT  0x20,R30
                 ; 0000 00A7 UBRRL=0x4D;
0000a5 e4ed      	LDI  R30,LOW(77)
0000a6 b9e9      	OUT  0x9,R30
                 ; 0000 00A8 
                 ; 0000 00A9 // Analog Comparator initialization
                 ; 0000 00AA // Analog Comparator: Off
                 ; 0000 00AB // The Analog Comparator's positive input is
                 ; 0000 00AC // connected to the AIN0 pin
                 ; 0000 00AD // The Analog Comparator's negative input is
                 ; 0000 00AE // connected to the AIN1 pin
                 ; 0000 00AF ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
0000a7 e8e0      	LDI  R30,LOW(128)
0000a8 b9e8      	OUT  0x8,R30
                 ; 0000 00B0 SFIOR=(0<<ACME);
0000a9 e0e0      	LDI  R30,LOW(0)
0000aa bfe0      	OUT  0x30,R30
                 ; 0000 00B1 
                 ; 0000 00B2 // ADC initialization
                 ; 0000 00B3 // ADC disabled
                 ; 0000 00B4 ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADFR) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
0000ab b9e6      	OUT  0x6,R30
                 ; 0000 00B5 
                 ; 0000 00B6 // SPI initialization
                 ; 0000 00B7 // SPI disabled
                 ; 0000 00B8 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
0000ac b9ed      	OUT  0xD,R30
                 ; 0000 00B9 
                 ; 0000 00BA // TWI initialization
                 ; 0000 00BB // Mode: TWI Master
                 ; 0000 00BC // Bit Rate: 400 kHz
                 ; 0000 00BD //twi_master_init(400);
                 ; 0000 00BE TWIInit();
0000ad d02b      	RCALL _TWIInit
                 ; 0000 00BF 
                 ; 0000 00C0 // Alphanumeric LCD initialization
                 ; 0000 00C1 // Connections are specified in the
                 ; 0000 00C2 // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
                 ; 0000 00C3 // RS - PORTD Bit 6
                 ; 0000 00C4 // RD - PORTD Bit 5
                 ; 0000 00C5 // EN - PORTD Bit 4
                 ; 0000 00C6 // D4 - PORTC Bit 3
                 ; 0000 00C7 // D5 - PORTC Bit 2
                 ; 0000 00C8 // D6 - PORTC Bit 1
                 ; 0000 00C9 // D7 - PORTC Bit 0
                 ; 0000 00CA // Characters/line: 16
                 ; 0000 00CB lcd_init(16);
0000ae e1a0      	LDI  R26,LOW(16)
0000af d263      	RCALL _lcd_init
                 ; 0000 00CC 
                 ; 0000 00CD // Global enable interrupts
                 ; 0000 00CE #asm("sei")
0000b0 9478      	sei
                 ; 0000 00CF //printf("starting");
                 ; 0000 00D0 delay_ms(1000);
0000b1 eea8      	LDI  R26,LOW(1000)
0000b2 e0b3      	LDI  R27,HIGH(1000)
0000b3 d480      	RCALL _delay_ms
                 ; 0000 00D1 //PN532_begin();
                 ; 0000 00D2 putchar('a');
0000b4 e6a1      	LDI  R26,LOW(97)
0000b5 d285      	RCALL _putchar
                 ; 0000 00D3 PN532_SAM_config();
0000b6 d15e      	RCALL _PN532_SAM_config
                 ; 0000 00D4 PN532_get_firmware();
0000b7 d14e      	RCALL _PN532_get_firmware
                 ; 0000 00D5 //tag_data.length = 16;
                 ; 0000 00D6 //memcpy(tag_data.buffer, write_data, 16);
                 ; 0000 00D7 //PN532_write_passive_tag(5, &tag_data);
                 ; 0000 00D8 
                 ; 0000 00D9 while (1)
                 _0xA:
                 ; 0000 00DA       {
                 ; 0000 00DB       // Place your code here
                 ; 0000 00DC //        PN532_read_passive_tag(4);
                 ; 0000 00DD //        for(i = 0; i<tag_data.length; ++i)
                 ; 0000 00DE //        {
                 ; 0000 00DF //          putchar(tag_data.buffer[i]);
                 ; 0000 00E0 //        }
                 ; 0000 00E1         //PN532_read_uid();
                 ; 0000 00E2         PN532_read_passive_tag(4);
0000b8 e0a4      	LDI  R26,LOW(4)
0000b9 d1db      	RCALL _PN532_read_passive_tag
                 ; 0000 00E3         for(i = 0; i<tag_data.length; ++i)
                +
0000ba e000     +LDI R16 , LOW ( 0 )
0000bb e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0xE:
                +
0000bc 91e0 02f8+LDS R30 , _tag_data + ( 80 )
0000be 91f0 02f9+LDS R31 , _tag_data + ( 80 ) + 1
                 	__GETW1MN _tag_data,80
0000c0 170e      	CP   R16,R30
0000c1 071f      	CPC  R17,R31
0000c2 f48c      	BRGE _0xF
                 ; 0000 00E4         {
                 ; 0000 00E5           printf("%02x", tag_data.buffer[i]);
                +
0000c3 e3ee     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
0000c4 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
0000c5 d3bc      	RCALL SUBOPT_0x0
0000c6 eaa8      	LDI  R26,LOW(_tag_data)
0000c7 e0b2      	LDI  R27,HIGH(_tag_data)
0000c8 0fa0      	ADD  R26,R16
0000c9 1fb1      	ADC  R27,R17
0000ca 91ec      	LD   R30,X
0000cb 27ff      	CLR  R31
0000cc 2766      	CLR  R22
0000cd 2777      	CLR  R23
0000ce d47f      	RCALL __PUTPARD1
0000cf e084      	LDI  R24,4
0000d0 d393      	RCALL _printf
0000d1 9626      	ADIW R28,6
                 ; 0000 00E6         }
0000d2 d3b2      	RCALL SUBOPT_0x1
0000d3 cfe8      	RJMP _0xE
                 _0xF:
                 ; 0000 00E7         delay_ms(500);
0000d4 efa4      	LDI  R26,LOW(500)
0000d5 e0b1      	LDI  R27,HIGH(500)
0000d6 d45d      	RCALL _delay_ms
                 ; 0000 00E8       }
0000d7 cfe0      	RJMP _0xA
                 ; 0000 00E9 }
                 _0x10:
0000d8 cfff      	RJMP _0x10
                 ; .FEND
                 ;#include "PN532_I2C.h"
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;#include <mega8.h>
                 ;
                 ;TWI_BUFFER_STRUCT twi_rx;
                 ;TWI_BUFFER_STRUCT twi_tx;
                 ;TWI_BUFFER_STRUCT PN532_msg;
                 ;TWI_BUFFER_STRUCT tag_uid;
                 ;TWI_BUFFER_STRUCT tag_data;
                 ;
                 ;unsigned char MIFARE_Key_A[] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
                 
                 	.DSEG
                 ;unsigned char checksum;
                 ;int i;
                 ;
                 ;void TWIInit(void)
                 ; 0001 000F {
                 
                 	.CSEG
                 _TWIInit:
                 ; .FSTART _TWIInit
                 ; 0001 0010     //set SCL to 100kHz
                 ; 0001 0011     TWSR = 0x00;
0000d9 e0e0      	LDI  R30,LOW(0)
0000da b9e1      	OUT  0x1,R30
                 ; 0001 0012     TWBR = 7;   //347,826
0000db e0e7      	LDI  R30,LOW(7)
0000dc b9e0      	OUT  0x0,R30
                 ; 0001 0013     //enable TWI
                 ; 0001 0014     TWCR = (1<<TWEN);
0000dd e0e4      	LDI  R30,LOW(4)
0000de bfe6      	OUT  0x36,R30
                 ; 0001 0015 }
0000df 9508      	RET
                 ; .FEND
                 ;
                 ;void TWIStart(void)
                 ; 0001 0018 {
                 _TWIStart:
                 ; .FSTART _TWIStart
                 ; 0001 0019     TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
0000e0 eae4      	LDI  R30,LOW(164)
0000e1 bfe6      	OUT  0x36,R30
                 ; 0001 001A     while ((TWCR & (1<<TWINT)) == 0) ;
                 _0x20004:
0000e2 b7e6      	IN   R30,0x36
0000e3 ffe7      	SBRS R30,7
0000e4 cffd      	RJMP _0x20004
                 ; 0001 001B }
0000e5 9508      	RET
                 ; .FEND
                 ;
                 ;void TWIStop(void)
                 ; 0001 001E {
                 _TWIStop:
                 ; .FSTART _TWIStop
                 ; 0001 001F     //TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
                 ; 0001 0020     DDRC.4 = DDRC.5 = 0;
0000e6 98a5      	CBI  0x14,5
0000e7 98a4      	CBI  0x14,4
                 ; 0001 0021     delay_ms(2);
0000e8 e0a2      	LDI  R26,LOW(2)
0000e9 d39e      	RCALL SUBOPT_0x2
                 ; 0001 0022     DDRC.4=1;
0000ea 9aa4      	SBI  0x14,4
                 ; 0001 0023 }
0000eb 9508      	RET
                 ; .FEND
                 ;
                 ;void TWIWrite(unsigned char u8data)
                 ; 0001 0026 {
                 _TWIWrite:
                 ; .FSTART _TWIWrite
                 ; 0001 0027     TWDR = u8data;
0000ec 93aa      	ST   -Y,R26
                 ;	u8data -> Y+0
0000ed 81e8      	LD   R30,Y
0000ee b9e3      	OUT  0x3,R30
                 ; 0001 0028     TWCR = (1<<TWINT)|(1<<TWEN);
0000ef e8e4      	LDI  R30,LOW(132)
0000f0 bfe6      	OUT  0x36,R30
                 ; 0001 0029     while ((TWCR & (1<<TWINT)) == 0);
                 _0x2000D:
0000f1 b7e6      	IN   R30,0x36
0000f2 ffe7      	SBRS R30,7
0000f3 cffd      	RJMP _0x2000D
                 ; 0001 002A }
0000f4 c24b      	RJMP _0x2080001
                 ; .FEND
                 ;
                 ;//read byte with ACK (Set TWEA, clear TWEA to send NACK, indicating master receiver has read the last byte)
                 ;unsigned char TWIRead(int ack)
                 ; 0001 002E {
                 _TWIRead:
                 ; .FSTART _TWIRead
                 ; 0001 002F     TWCR = (1<<TWINT)|(1<<TWEN)|(ack<<TWEA);
0000f5 d394      	RCALL SUBOPT_0x3
                 ;	ack -> Y+0
0000f6 81e8      	LD   R30,Y
0000f7 95e2      	SWAP R30
0000f8 7fe0      	ANDI R30,0xF0
0000f9 0fee      	LSL  R30
0000fa 0fee      	LSL  R30
0000fb 68e4      	ORI  R30,LOW(0x84)
0000fc bfe6      	OUT  0x36,R30
                 ; 0001 0030     while ((TWCR & (1<<TWINT)) == 0) ;
                 _0x20010:
0000fd b7e6      	IN   R30,0x36
0000fe ffe7      	SBRS R30,7
0000ff cffd      	RJMP _0x20010
                 ; 0001 0031     return TWDR;
000100 b1e3      	IN   R30,0x3
000101 c00f      	RJMP _0x2080004
                 ; 0001 0032 }
                 ; .FEND
                 ;
                 ;void PN532_cmd(TWI_BUFFER_STRUCT* msg)
                 ; 0001 0035 {
                 _PN532_cmd:
                 ; .FSTART _PN532_cmd
                 ; 0001 0036   TWIStart();
000102 d387      	RCALL SUBOPT_0x3
                 ;	*msg -> Y+0
000103 dfdc      	RCALL _TWIStart
                 ; 0001 0037   TWIWrite(PN532_ADD);
000104 e4a8      	LDI  R26,LOW(72)
000105 dfe6      	RCALL _TWIWrite
                 ; 0001 0038   for(i = 0; i < msg->length; ++i){
000106 d386      	RCALL SUBOPT_0x4
                 _0x20014:
000107 d388      	RCALL SUBOPT_0x5
000108 d38a      	RCALL SUBOPT_0x6
000109 d38c      	RCALL SUBOPT_0x7
00010a f42c      	BRGE _0x20015
                 ; 0001 0039     TWIWrite(msg->buffer[i]);
00010b d38e      	RCALL SUBOPT_0x8
00010c 91ac      	LD   R26,X
00010d dfde      	RCALL _TWIWrite
                 ; 0001 003A   }
00010e d390      	RCALL SUBOPT_0x9
00010f cff7      	RJMP _0x20014
                 _0x20015:
                 ; 0001 003B   TWIStop();
000110 dfd5      	RCALL _TWIStop
                 ; 0001 003C }
                 _0x2080004:
000111 9622      	ADIW R28,2
000112 9508      	RET
                 ; .FEND
                 ;
                 ;void PN532_build_msg(TWI_BUFFER_STRUCT* buffer, TWI_BUFFER_STRUCT* msg)
                 ; 0001 003F {
                 _PN532_build_msg:
                 ; .FSTART _PN532_build_msg
                 ; 0001 0040   int msg_length = 0;
                 ; 0001 0041   checksum = 0xD4;
000113 d376      	RCALL SUBOPT_0x3
000114 d449      	RCALL __SAVELOCR2
                 ;	*buffer -> Y+4
                 ;	*msg -> Y+2
                 ;	msg_length -> R16,R17
                +
000115 e000     +LDI R16 , LOW ( 0 )
000116 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
000117 ede4      	LDI  R30,LOW(212)
000118 2e6e      	MOV  R6,R30
                 ; 0001 0042 
                 ; 0001 0043   buffer->buffer[PN532_START]=0x00;                     ++msg_length;
000119 d389      	RCALL SUBOPT_0xA
00011a e0e0      	LDI  R30,LOW(0)
00011b d38a      	RCALL SUBOPT_0xB
                 ; 0001 0044   buffer->buffer[PN532_START+1]=0xFF;                   ++msg_length;
00011c d386      	RCALL SUBOPT_0xA
00011d 9611      	ADIW R26,1
00011e efef      	LDI  R30,LOW(255)
00011f d386      	RCALL SUBOPT_0xB
                 ; 0001 0045   buffer->buffer[PN532_LEN]=msg->length+1;               ++msg_length;
000120 d387      	RCALL SUBOPT_0xC
                +
000121 81ac     +LDD R26 , Y + 4
000122 81bd     +LDD R27 , Y + 4 + 1
000123 9612     +ADIW R26 , 2
000124 93ec     +ST X , R30
                 	__PUTB1SNS 4,2
000125 d35f      	RCALL SUBOPT_0x1
                 ; 0001 0046   buffer->buffer[PN532_LCS]=(~(msg->length+1))+1;        ++msg_length;
000126 d381      	RCALL SUBOPT_0xC
000127 95e1      	NEG  R30
                +
000128 81ac     +LDD R26 , Y + 4
000129 81bd     +LDD R27 , Y + 4 + 1
00012a 9613     +ADIW R26 , 3
00012b 93ec     +ST X , R30
                 	__PUTB1SNS 4,3
00012c d358      	RCALL SUBOPT_0x1
                 ; 0001 0047   buffer->buffer[PN532_TFI]=0xD4;                       ++msg_length;
00012d d375      	RCALL SUBOPT_0xA
00012e 9614      	ADIW R26,4
00012f ede4      	LDI  R30,LOW(212)
000130 d375      	RCALL SUBOPT_0xB
                 ; 0001 0048   for(i = 0; i<msg->length; ++i){
000131 d35b      	RCALL SUBOPT_0x4
                 _0x20017:
000132 d37b      	RCALL SUBOPT_0xD
000133 d35f      	RCALL SUBOPT_0x6
000134 d361      	RCALL SUBOPT_0x7
000135 f464      	BRGE _0x20018
                 ; 0001 0049     buffer->buffer[PN532_DATA+i]=msg->buffer[i];              ++msg_length;
000136 01f4      	MOVW R30,R8
000137 9635      	ADIW R30,5
000138 d36a      	RCALL SUBOPT_0xA
000139 d377      	RCALL SUBOPT_0xE
00013a 010f      	MOVW R0,R30
00013b d378      	RCALL SUBOPT_0xF
00013c 01d0      	MOVW R26,R0
00013d d368      	RCALL SUBOPT_0xB
                 ; 0001 004A     checksum += msg->buffer[i];
00013e d375      	RCALL SUBOPT_0xF
00013f 0e6e      	ADD  R6,R30
                 ; 0001 004B   }
000140 d35e      	RCALL SUBOPT_0x9
000141 cff0      	RJMP _0x20017
                 _0x20018:
                 ; 0001 004C   buffer->buffer[PN532_DATA+i]= (~(checksum&0xFF))+1;   ++msg_length;
000142 01f4      	MOVW R30,R8
000143 9635      	ADIW R30,5
000144 d35e      	RCALL SUBOPT_0xA
000145 0fae      	ADD  R26,R30
000146 1fbf      	ADC  R27,R31
000147 2de6      	MOV  R30,R6
000148 95e1      	NEG  R30
000149 d35c      	RCALL SUBOPT_0xB
                 ; 0001 004D   buffer->length = msg_length;
00014a 01f8      	MOVW R30,R16
                +
00014b 81ac     +LDD R26 , Y + 4
00014c 81bd     +LDD R27 , Y + 4 + 1
00014d 5ba0     +SUBI R26 , LOW ( - 80 )
00014e 4fbf     +SBCI R27 , HIGH ( - 80 )
00014f 93ed     +ST X + , R30
000150 93fc     +ST X , R31
                 	__PUTW1SN 4,80
                 ; 0001 004E }
000151 d413      	RCALL __LOADLOCR2
000152 9626      	ADIW R28,6
000153 9508      	RET
                 ; .FEND
                 ;
                 ;bool PN532_read(TWI_BUFFER_STRUCT* dest)
                 ; 0001 0051 {
                 _PN532_read:
                 ; .FSTART _PN532_read
                 ; 0001 0052   unsigned char data = 0x00;
                 ; 0001 0053   unsigned char len = 0x00;
                 ; 0001 0054   // check ready bit
                 ; 0001 0055   while(1){
000154 d335      	RCALL SUBOPT_0x3
000155 d408      	RCALL __SAVELOCR2
                 ;	*dest -> Y+2
                 ;	data -> R17
                 ;	len -> R16
000156 e010      	LDI  R17,0
000157 e000      	LDI  R16,0
                 _0x20019:
                 ; 0001 0056     TWIStart();
000158 df87      	RCALL _TWIStart
                 ; 0001 0057     TWIWrite(PN532_ADD | 1);
000159 e4a9      	LDI  R26,LOW(73)
00015a df91      	RCALL _TWIWrite
                 ; 0001 0058     data = TWIRead(1);
00015b d35e      	RCALL SUBOPT_0x10
00015c 2f1e      	MOV  R17,R30
                 ; 0001 0059     if(data==0x00) TWIStop();
00015d 3010      	CPI  R17,0
00015e f411      	BRNE _0x2001C
00015f df86      	RCALL _TWIStop
                 ; 0001 005A     else if(data==0x01) break;
000160 c002      	RJMP _0x2001D
                 _0x2001C:
000161 3011      	CPI  R17,1
000162 f009      	BREQ _0x2001B
                 ; 0001 005B   }
                 _0x2001D:
000163 cff4      	RJMP _0x20019
                 _0x2001B:
                 ; 0001 005C   // get rid of preamble
                 ; 0001 005D   TWIRead(1);
000164 d355      	RCALL SUBOPT_0x10
                 ; 0001 005E   //check start of packet
                 ; 0001 005F   if((data=TWIRead(1))!=0x00) {TWIStop(); return false;}
000165 d354      	RCALL SUBOPT_0x10
000166 2f1e      	MOV  R17,R30
000167 30e0      	CPI  R30,0
000168 f021      	BREQ _0x2001F
000169 df7c      	RCALL _TWIStop
00016a e0e0      	LDI  R30,LOW(0)
00016b d3f9      	RCALL __LOADLOCR2
00016c c126      	RJMP _0x2080002
                 ; 0001 0060   dest->buffer[len++]=data;
                 _0x2001F:
00016d d34f      	RCALL SUBOPT_0x11
                 ; 0001 0061   if((data=TWIRead(1))!=0xFF) {TWIStop(); return false;}
00016e d34b      	RCALL SUBOPT_0x10
00016f 2f1e      	MOV  R17,R30
000170 3fef      	CPI  R30,LOW(0xFF)
000171 f019      	BREQ _0x20020
000172 d351      	RCALL SUBOPT_0x12
000173 d3f1      	RCALL __LOADLOCR2
000174 c11e      	RJMP _0x2080002
                 ; 0001 0062   dest->buffer[len++]=data;
                 _0x20020:
000175 d347      	RCALL SUBOPT_0x11
                 ; 0001 0063 
                 ; 0001 0064   //get length
                 ; 0001 0065   dest->buffer[len++]=TWIRead(1);
000176 d350      	RCALL SUBOPT_0x13
000177 93ff      	PUSH R31
000178 93ef      	PUSH R30
000179 d340      	RCALL SUBOPT_0x10
00017a 91af      	POP  R26
00017b 91bf      	POP  R27
00017c 93ec      	ST   X,R30
                 ; 0001 0066   //get length checksum
                 ; 0001 0067   dest->buffer[len++]=TWIRead(1);
00017d d349      	RCALL SUBOPT_0x13
00017e 93ff      	PUSH R31
00017f 93ef      	PUSH R30
000180 d339      	RCALL SUBOPT_0x10
000181 91af      	POP  R26
000182 91bf      	POP  R27
000183 93ec      	ST   X,R30
                 ; 0001 0068   //get TFI (should be D5)
                 ; 0001 0069   dest->buffer[len++]=TWIRead(1);
000184 d342      	RCALL SUBOPT_0x13
000185 93ff      	PUSH R31
000186 93ef      	PUSH R30
000187 d332      	RCALL SUBOPT_0x10
000188 91af      	POP  R26
000189 91bf      	POP  R27
00018a 93ec      	ST   X,R30
                 ; 0001 006A 
                 ; 0001 006B   for(i =0; i < dest->buffer[PN532_LEN]-1; ++i)
00018b d301      	RCALL SUBOPT_0x4
                 _0x20022:
00018c 81ea      	LDD  R30,Y+2
00018d 81fb      	LDD  R31,Y+2+1
00018e 81e2      	LDD  R30,Z+2
00018f e0f0      	LDI  R31,0
000190 9731      	SBIW R30,1
000191 d33a      	RCALL SUBOPT_0x14
000192 f44c      	BRGE _0x20023
                 ; 0001 006C   {
                 ; 0001 006D     dest->buffer[len++] = TWIRead(1);
000193 d333      	RCALL SUBOPT_0x13
000194 93ff      	PUSH R31
000195 93ef      	PUSH R30
000196 d323      	RCALL SUBOPT_0x10
000197 91af      	POP  R26
000198 91bf      	POP  R27
000199 93ec      	ST   X,R30
                 ; 0001 006E   }
00019a d304      	RCALL SUBOPT_0x9
00019b cff0      	RJMP _0x20022
                 _0x20023:
                 ; 0001 006F 
                 ; 0001 0070   //skip data checksum
                 ; 0001 0071   dest->buffer[len++]=TWIRead(0);
00019c d32a      	RCALL SUBOPT_0x13
00019d 93ff      	PUSH R31
00019e 93ef      	PUSH R30
00019f e0a0      	LDI  R26,LOW(0)
0001a0 e0b0      	LDI  R27,0
0001a1 df53      	RCALL _TWIRead
0001a2 91af      	POP  R26
0001a3 91bf      	POP  R27
0001a4 93ec      	ST   X,R30
                 ; 0001 0072 
                 ; 0001 0073   //set buffer length
                 ; 0001 0074   dest->length = len;
0001a5 d308      	RCALL SUBOPT_0xD
0001a6 d2ec      	RCALL SUBOPT_0x6
0001a7 2fe0      	MOV  R30,R16
0001a8 e0f0      	LDI  R31,0
0001a9 93ed      	ST   X+,R30
0001aa 93fc      	ST   X,R31
                 ; 0001 0075 
                 ; 0001 0076   //close comm
                 ; 0001 0077   TWIStop();
0001ab df3a      	RCALL _TWIStop
                 ; 0001 0078 
                 ; 0001 0079   //return true on success
                 ; 0001 007A   return true;
0001ac e0e1      	LDI  R30,LOW(1)
0001ad d3b7      	RCALL __LOADLOCR2
0001ae c0e4      	RJMP _0x2080002
                 ; 0001 007B }
                 ; .FEND
                 ;
                 ;void PN532_get_msg(TWI_BUFFER_STRUCT* src, TWI_BUFFER_STRUCT* dest, unsigned char offset)
                 ; 0001 007E {
                 _PN532_get_msg:
                 ; .FSTART _PN532_get_msg
                 ; 0001 007F   // exclude TFI from src, thus -1
                 ; 0001 0080   dest->length = src->buffer[PN532_LEN]-1-offset;
0001af 93aa      	ST   -Y,R26
                 ;	*src -> Y+3
                 ;	*dest -> Y+1
                 ;	offset -> Y+0
0001b0 81eb      	LDD  R30,Y+3
0001b1 81fc      	LDD  R31,Y+3+1
0001b2 81e2      	LDD  R30,Z+2
0001b3 e0f0      	LDI  R31,0
0001b4 9731      	SBIW R30,1
0001b5 01df      	MOVW R26,R30
0001b6 81e8      	LD   R30,Y
0001b7 e0f0      	LDI  R31,0
0001b8 d39a      	RCALL __SWAPW12
0001b9 1bea      	SUB  R30,R26
0001ba 0bfb      	SBC  R31,R27
                +
0001bb 81a9     +LDD R26 , Y + 1
0001bc 81ba     +LDD R27 , Y + 1 + 1
0001bd 5ba0     +SUBI R26 , LOW ( - 80 )
0001be 4fbf     +SBCI R27 , HIGH ( - 80 )
0001bf 93ed     +ST X + , R30
0001c0 93fc     +ST X , R31
                 	__PUTW1SN 1,80
                 ; 0001 0081   for(i=0; i < dest->length; ++i)
0001c1 d2cb      	RCALL SUBOPT_0x4
                 _0x20025:
0001c2 81a9      	LDD  R26,Y+1
0001c3 81ba      	LDD  R27,Y+1+1
0001c4 d2ce      	RCALL SUBOPT_0x6
0001c5 d2d0      	RCALL SUBOPT_0x7
0001c6 f48c      	BRGE _0x20026
                 ; 0001 0082   {
                 ; 0001 0083     dest->buffer[i] = src->buffer[PN532_DATA+i+offset];
0001c7 01f4      	MOVW R30,R8
0001c8 81a9      	LDD  R26,Y+1
0001c9 81ba      	LDD  R27,Y+1+1
0001ca d2e6      	RCALL SUBOPT_0xE
0001cb 010f      	MOVW R0,R30
0001cc 01d4      	MOVW R26,R8
0001cd 9615      	ADIW R26,5
0001ce 81e8      	LD   R30,Y
0001cf e0f0      	LDI  R31,0
0001d0 d2e0      	RCALL SUBOPT_0xE
0001d1 81ab      	LDD  R26,Y+3
0001d2 81bc      	LDD  R27,Y+3+1
0001d3 0fae      	ADD  R26,R30
0001d4 1fbf      	ADC  R27,R31
0001d5 d2f9      	RCALL SUBOPT_0x15
                 ; 0001 0084   }
0001d6 d2c8      	RCALL SUBOPT_0x9
0001d7 cfea      	RJMP _0x20025
                 _0x20026:
                 ; 0001 0085 }
0001d8 9625      	ADIW R28,5
0001d9 9508      	RET
                 ; .FEND
                 ;
                 ;bool PN532_wait_for_ack(){
                 ; 0001 0087 _Bool PN532_wait_for_ack(){
                 _PN532_wait_for_ack:
                 ; .FSTART _PN532_wait_for_ack
                 ; 0001 0088   unsigned char data = 0x00;
                 ; 0001 0089   // check ready bit
                 ; 0001 008A   while(1){
0001da 931a      	ST   -Y,R17
                 ;	data -> R17
0001db e010      	LDI  R17,0
                 _0x20027:
                 ; 0001 008B     TWIStart();
0001dc df03      	RCALL _TWIStart
                 ; 0001 008C     TWIWrite(PN532_ADD | 1);
0001dd e4a9      	LDI  R26,LOW(73)
0001de df0d      	RCALL _TWIWrite
                 ; 0001 008D 
                 ; 0001 008E     // if NACK received, repeat data request
                 ; 0001 008F     if(TWSR == 0x48) continue;
0001df b1e1      	IN   R30,0x1
0001e0 34e8      	CPI  R30,LOW(0x48)
0001e1 f3d1      	BREQ _0x20027
                 ; 0001 0090     //TWIStart();
                 ; 0001 0091     data = TWIRead(1);
0001e2 d2d7      	RCALL SUBOPT_0x10
0001e3 2f1e      	MOV  R17,R30
                 ; 0001 0092     if(data==0x00) TWIStop();
0001e4 3010      	CPI  R17,0
0001e5 f411      	BRNE _0x2002B
0001e6 deff      	RCALL _TWIStop
                 ; 0001 0093     else if(data==0x01) break;
0001e7 c002      	RJMP _0x2002C
                 _0x2002B:
0001e8 3011      	CPI  R17,1
0001e9 f009      	BREQ _0x20029
                 ; 0001 0094   }
                 _0x2002C:
0001ea cff1      	RJMP _0x20027
                 _0x20029:
                 ; 0001 0095   // get rid of preamble
                 ; 0001 0096   TWIRead(1);
0001eb d2ce      	RCALL SUBOPT_0x10
                 ; 0001 0097   //check start of packet
                 ; 0001 0098   if(TWIRead(1)!=0x00) {TWIStop(); return false;}
0001ec d2cd      	RCALL SUBOPT_0x10
0001ed 30e0      	CPI  R30,0
0001ee f011      	BREQ _0x2002E
0001ef d2d4      	RCALL SUBOPT_0x12
0001f0 c013      	RJMP _0x2080003
                 ; 0001 0099   if(TWIRead(1)!=0xFF) {TWIStop(); return false;}
                 _0x2002E:
0001f1 d2c8      	RCALL SUBOPT_0x10
0001f2 3fef      	CPI  R30,LOW(0xFF)
0001f3 f011      	BREQ _0x2002F
0001f4 d2cf      	RCALL SUBOPT_0x12
0001f5 c00e      	RJMP _0x2080003
                 ; 0001 009A 
                 ; 0001 009B   //check ack
                 ; 0001 009C   if(TWIRead(1)!=0x00) {TWIStop(); return false;}
                 _0x2002F:
0001f6 d2c3      	RCALL SUBOPT_0x10
0001f7 30e0      	CPI  R30,0
0001f8 f011      	BREQ _0x20030
0001f9 d2ca      	RCALL SUBOPT_0x12
0001fa c009      	RJMP _0x2080003
                 ; 0001 009D   if(TWIRead(0)!=0xFF) {TWIStop(); return false;}
                 _0x20030:
0001fb e0a0      	LDI  R26,LOW(0)
0001fc e0b0      	LDI  R27,0
0001fd def7      	RCALL _TWIRead
0001fe 3fef      	CPI  R30,LOW(0xFF)
0001ff f011      	BREQ _0x20031
000200 d2c3      	RCALL SUBOPT_0x12
000201 c002      	RJMP _0x2080003
                 ; 0001 009E   TWIStop();
                 _0x20031:
000202 dee3      	RCALL _TWIStop
                 ; 0001 009F   return true;
000203 e0e1      	LDI  R30,LOW(1)
                 _0x2080003:
000204 9119      	LD   R17,Y+
000205 9508      	RET
                 ; 0001 00A0 }
                 ; .FEND
                 ;
                 ;void PN532_get_firmware()
                 ; 0001 00A3 {
                 _PN532_get_firmware:
                 ; .FSTART _PN532_get_firmware
                 ; 0001 00A4   PN532_msg.buffer[0]=PN532_CMD_GETFIRMWARE;
000206 e0e2      	LDI  R30,LOW(2)
000207 d2cb      	RCALL SUBOPT_0x16
                 ; 0001 00A5   PN532_msg.length=1;
000208 e0e1      	LDI  R30,LOW(1)
000209 e0f0      	LDI  R31,HIGH(1)
00020a d2cb      	RCALL SUBOPT_0x17
                 ; 0001 00A6   PN532_build_msg(&twi_tx, &PN532_msg);
                 ; 0001 00A7   PN532_cmd(&twi_tx);
                 ; 0001 00A8   TWIInit();
00020b decd      	RCALL _TWIInit
                 ; 0001 00A9   delay_ms(20);
00020c d2d6      	RCALL SUBOPT_0x18
                 ; 0001 00AA   while(!PN532_wait_for_ack()) delay_ms(20);
                 _0x20032:
00020d d2d7      	RCALL SUBOPT_0x19
00020e f411      	BRNE _0x20034
00020f d2d3      	RCALL SUBOPT_0x18
000210 cffc      	RJMP _0x20032
                 _0x20034:
                 ; 0001 00AB delay_ms(20);
000211 d2d1      	RCALL SUBOPT_0x18
                 ; 0001 00AC   PN532_read(&twi_rx);
000212 d2d5      	RCALL SUBOPT_0x1A
                 ; 0001 00AD   PN532_get_msg(&twi_rx, &PN532_msg, 1);
000213 d2dd      	RCALL SUBOPT_0x1B
                 ; 0001 00AE }
000214 9508      	RET
                 ; .FEND
                 ;
                 ;bool PN532_SAM_config()
                 ; 0001 00B1 {
                 _PN532_SAM_config:
                 ; .FSTART _PN532_SAM_config
                 ; 0001 00B2   PN532_msg.buffer[0] = PN532_CMD_SAMCONFIGURATION;
000215 e1e4      	LDI  R30,LOW(20)
000216 d2dc      	RCALL SUBOPT_0x1C
                 ; 0001 00B3   PN532_msg.buffer[1] = 0x01; // normal mode;
                 ; 0001 00B4   PN532_msg.buffer[2] = 0x14; // timeout 50ms * 20 = 1 second
000217 e1e4      	LDI  R30,LOW(20)
000218 d2df      	RCALL SUBOPT_0x1D
                 ; 0001 00B5   PN532_msg.buffer[3] = 0x00; // not using IRQ pin!
000219 e0e0      	LDI  R30,LOW(0)
                +
00021a 93e0 0207+STS _PN532_msg + ( 3 ) , R30
                 	__PUTB1MN _PN532_msg,3
                 ; 0001 00B6   PN532_msg.length=4;
00021c e0e4      	LDI  R30,LOW(4)
00021d e0f0      	LDI  R31,HIGH(4)
00021e d2b7      	RCALL SUBOPT_0x17
                 ; 0001 00B7   PN532_build_msg(&twi_tx, &PN532_msg);
                 ; 0001 00B8   PN532_cmd(&twi_tx);
                 ; 0001 00B9   delay_ms(20);
00021f d2c3      	RCALL SUBOPT_0x18
                 ; 0001 00BA   while(!PN532_wait_for_ack()) delay_ms(20);
                 _0x20035:
000220 d2c4      	RCALL SUBOPT_0x19
000221 f411      	BRNE _0x20037
000222 d2c0      	RCALL SUBOPT_0x18
000223 cffc      	RJMP _0x20035
                 _0x20037:
                 ; 0001 00BB delay_ms(20);
000224 d2be      	RCALL SUBOPT_0x18
                 ; 0001 00BC   PN532_read(&twi_rx);
000225 d2c2      	RCALL SUBOPT_0x1A
                 ; 0001 00BD   PN532_get_msg(&twi_rx, &PN532_msg, 0);
000226 e0a0      	LDI  R26,LOW(0)
000227 df87      	RCALL _PN532_get_msg
                 ; 0001 00BE   if(PN532_msg.buffer[0]==0x15) return true;
000228 91a0 0204 	LDS  R26,_PN532_msg
00022a 31a5      	CPI  R26,LOW(0x15)
00022b f411      	BRNE _0x20038
00022c e0e1      	LDI  R30,LOW(1)
00022d 9508      	RET
                 ; 0001 00BF   else return false;
                 _0x20038:
00022e e0e0      	LDI  R30,LOW(0)
00022f 9508      	RET
                 ; 0001 00C0 }
000230 9508      	RET
                 ; .FEND
                 ;
                 ;void PN532_read_uid()
                 ; 0001 00C3 {
                 _PN532_read_uid:
                 ; .FSTART _PN532_read_uid
                 ; 0001 00C4   PN532_msg.buffer[0] = PN532_CMD_INLISTPASSIVETARGET;
000231 e4ea      	LDI  R30,LOW(74)
000232 d2c0      	RCALL SUBOPT_0x1C
                 ; 0001 00C5   PN532_msg.buffer[1] = 1;  // max 1 cards at once
                 ; 0001 00C6   PN532_msg.buffer[2] = PN532_MIFARE_ISO14443A; //baudrate
000233 e0e0      	LDI  R30,LOW(0)
000234 d2c3      	RCALL SUBOPT_0x1D
                 ; 0001 00C7   PN532_msg.length=3;
000235 e0e3      	LDI  R30,LOW(3)
000236 e0f0      	LDI  R31,HIGH(3)
000237 d29e      	RCALL SUBOPT_0x17
                 ; 0001 00C8   PN532_build_msg(&twi_tx, &PN532_msg);
                 ; 0001 00C9   PN532_cmd(&twi_tx);
                 ; 0001 00CA   delay_ms(20);
000238 d2aa      	RCALL SUBOPT_0x18
                 ; 0001 00CB   while(!PN532_wait_for_ack()) delay_ms(20);
                 _0x2003A:
000239 d2ab      	RCALL SUBOPT_0x19
00023a f411      	BRNE _0x2003C
00023b d2a7      	RCALL SUBOPT_0x18
00023c cffc      	RJMP _0x2003A
                 _0x2003C:
                 ; 0001 00CC delay_ms(20);
00023d d2a5      	RCALL SUBOPT_0x18
                 ; 0001 00CD   PN532_read(&twi_rx);
00023e d2a9      	RCALL SUBOPT_0x1A
                 ; 0001 00CE   PN532_get_msg(&twi_rx, &PN532_msg, 1);
00023f d2b1      	RCALL SUBOPT_0x1B
                 ; 0001 00CF   tag_uid.length = PN532_msg.buffer[5];
                +
000240 eaa6     +LDI R26 , LOW ( _tag_uid + ( 80 ) )
000241 e0b2     +LDI R27 , HIGH ( _tag_uid + ( 80 ) )
                 	__POINTW2MN _tag_uid,80
                +
000242 91e0 0209+LDS R30 , _PN532_msg + ( 5 )
                 	__GETB1MN _PN532_msg,5
000244 e0f0      	LDI  R31,0
000245 93ed      	ST   X+,R30
000246 93fc      	ST   X,R31
                 ; 0001 00D0   for(i = 0; i<tag_uid.length; ++i)
000247 d245      	RCALL SUBOPT_0x4
                 _0x2003E:
000248 d2b2      	RCALL SUBOPT_0x1E
000249 f454      	BRGE _0x2003F
                 ; 0001 00D1   {
                 ; 0001 00D2     tag_uid.buffer[i] = PN532_msg.buffer[6+i];
00024a 01d4      	MOVW R26,R8
00024b 5aaa      	SUBI R26,LOW(-_tag_uid)
00024c 4fbd      	SBCI R27,HIGH(-_tag_uid)
00024d 01f4      	MOVW R30,R8
                +
00024e 5fe6     +SUBI R30 , LOW ( - _PN532_msg - ( 6 ) )
00024f 4ffd     +SBCI R31 , HIGH ( - _PN532_msg - ( 6 ) )
                 	__ADDW1MN _PN532_msg,6
000250 81e0      	LD   R30,Z
000251 93ec      	ST   X,R30
                 ; 0001 00D3   }
000252 d24c      	RCALL SUBOPT_0x9
000253 cff4      	RJMP _0x2003E
                 _0x2003F:
                 ; 0001 00D4 }
000254 9508      	RET
                 ; .FEND
                 ;
                 ;bool PN532_auth_tag(unsigned char block_number, unsigned char key_select, unsigned char* key_buffer)
                 ; 0001 00D7 {
                 _PN532_auth_tag:
                 ; .FSTART _PN532_auth_tag
                 ; 0001 00D8   PN532_read_uid();
000255 d234      	RCALL SUBOPT_0x3
                 ;	block_number -> Y+3
                 ;	key_select -> Y+2
                 ;	*key_buffer -> Y+0
000256 dfda      	RCALL _PN532_read_uid
                 ; 0001 00D9   PN532_msg.buffer[0] = PN532_CMD_INDATAEXCHANGE;
000257 e4e0      	LDI  R30,LOW(64)
000258 d29a      	RCALL SUBOPT_0x1C
                 ; 0001 00DA   PN532_msg.buffer[1] = 1;                              /* Max card numbers */
                 ; 0001 00DB   PN532_msg.buffer[2] = (key_select) ? MIFARE_CMD_AUTH_B : MIFARE_CMD_AUTH_A;
000259 81ea      	LDD  R30,Y+2
00025a 30e0      	CPI  R30,0
00025b f011      	BREQ _0x20040
00025c e6e1      	LDI  R30,LOW(97)
00025d c001      	RJMP _0x20041
                 _0x20040:
00025e e6e0      	LDI  R30,LOW(96)
                 _0x20041:
00025f d298      	RCALL SUBOPT_0x1D
                 ; 0001 00DC   PN532_msg.buffer[3] = block_number;                    /* Block Number (1K = 0..63, 4K = 0..255 */
000260 81eb      	LDD  R30,Y+3
                +
000261 93e0 0207+STS _PN532_msg + ( 3 ) , R30
                 	__PUTB1MN _PN532_msg,3
                 ; 0001 00DD   for (i = 0; i < 6; ++i)
000263 d229      	RCALL SUBOPT_0x4
                 _0x20044:
000264 e0e6      	LDI  R30,LOW(6)
000265 e0f0      	LDI  R31,HIGH(6)
000266 d265      	RCALL SUBOPT_0x14
000267 f444      	BRGE _0x20045
                 ; 0001 00DE   {
                 ; 0001 00DF     PN532_msg.buffer[4+i] = key_buffer[i];                /* 6 byte auth key */
000268 01f4      	MOVW R30,R8
                +
000269 5fe8     +SUBI R30 , LOW ( - _PN532_msg - ( 4 ) )
00026a 4ffd     +SBCI R31 , HIGH ( - _PN532_msg - ( 4 ) )
                 	__ADDW1MN _PN532_msg,4
00026b 010f      	MOVW R0,R30
00026c d22d      	RCALL SUBOPT_0x8
00026d d261      	RCALL SUBOPT_0x15
                 ; 0001 00E0   }
00026e d230      	RCALL SUBOPT_0x9
00026f cff4      	RJMP _0x20044
                 _0x20045:
                 ; 0001 00E1   for (i = 0; i < tag_uid.length; ++i)
000270 d21c      	RCALL SUBOPT_0x4
                 _0x20047:
000271 d289      	RCALL SUBOPT_0x1E
000272 f45c      	BRGE _0x20048
                 ; 0001 00E2   {
                 ; 0001 00E3     PN532_msg.buffer[10+i] = tag_uid.buffer[i];                /* 4 byte card ID */
000273 01f4      	MOVW R30,R8
                +
000274 5fe2     +SUBI R30 , LOW ( - _PN532_msg - ( 10 ) )
000275 4ffd     +SBCI R31 , HIGH ( - _PN532_msg - ( 10 ) )
                 	__ADDW1MN _PN532_msg,10
000276 010f      	MOVW R0,R30
000277 e5a6      	LDI  R26,LOW(_tag_uid)
000278 e0b2      	LDI  R27,HIGH(_tag_uid)
000279 0da8      	ADD  R26,R8
00027a 1db9      	ADC  R27,R9
00027b d253      	RCALL SUBOPT_0x15
                 ; 0001 00E4   }
00027c d222      	RCALL SUBOPT_0x9
00027d cff3      	RJMP _0x20047
                 _0x20048:
                 ; 0001 00E5   PN532_msg.length = 10+tag_uid.length;
                +
00027e 91e0 02a6+LDS R30 , _tag_uid + ( 80 )
000280 91f0 02a7+LDS R31 , _tag_uid + ( 80 ) + 1
                 	__GETW1MN _tag_uid,80
000282 963a      	ADIW R30,10
000283 d252      	RCALL SUBOPT_0x17
                 ; 0001 00E6 
                 ; 0001 00E7   PN532_build_msg(&twi_tx, &PN532_msg);
                 ; 0001 00E8   PN532_cmd(&twi_tx);
                 ; 0001 00E9   delay_ms(20);
000284 d25e      	RCALL SUBOPT_0x18
                 ; 0001 00EA   while(!PN532_wait_for_ack()) delay_ms(20);
                 _0x20049:
000285 d25f      	RCALL SUBOPT_0x19
000286 f411      	BRNE _0x2004B
000287 d25b      	RCALL SUBOPT_0x18
000288 cffc      	RJMP _0x20049
                 _0x2004B:
                 ; 0001 00EB delay_ms(20);
000289 d259      	RCALL SUBOPT_0x18
                 ; 0001 00EC   PN532_read(&twi_rx);
00028a d25d      	RCALL SUBOPT_0x1A
                 ; 0001 00ED   PN532_get_msg(&twi_rx, &PN532_msg, 1);
00028b d265      	RCALL SUBOPT_0x1B
                 ; 0001 00EE   if(PN532_msg.buffer[0] != 0x00) return false;
00028c 91e0 0204 	LDS  R30,_PN532_msg
00028e 30e0      	CPI  R30,0
00028f f011      	BREQ _0x2004C
000290 e0e0      	LDI  R30,LOW(0)
000291 c001      	RJMP _0x2080002
                 ; 0001 00EF   return true;
                 _0x2004C:
000292 e0e1      	LDI  R30,LOW(1)
                 _0x2080002:
000293 9624      	ADIW R28,4
000294 9508      	RET
                 ; 0001 00F0 }
                 ; .FEND
                 ;
                 ;bool PN532_read_passive_tag(unsigned char block_number)
                 ; 0001 00F3 {
                 _PN532_read_passive_tag:
                 ; .FSTART _PN532_read_passive_tag
                 ; 0001 00F4   if(!PN532_auth_tag(block_number, 0, MIFARE_Key_A)) return false;
000295 93aa      	ST   -Y,R26
                 ;	block_number -> Y+0
000296 81e8      	LD   R30,Y
000297 93ea      	ST   -Y,R30
000298 e0e0      	LDI  R30,LOW(0)
000299 93ea      	ST   -Y,R30
00029a e0a2      	LDI  R26,LOW(_MIFARE_Key_A)
00029b e0b3      	LDI  R27,HIGH(_MIFARE_Key_A)
00029c dfb8      	RCALL _PN532_auth_tag
00029d 30e0      	CPI  R30,0
00029e f411      	BRNE _0x2004D
00029f e0e0      	LDI  R30,LOW(0)
0002a0 c09f      	RJMP _0x2080001
                 ; 0001 00F5   PN532_msg.buffer[0] = PN532_CMD_INDATAEXCHANGE;
                 _0x2004D:
0002a1 e4e0      	LDI  R30,LOW(64)
0002a2 d250      	RCALL SUBOPT_0x1C
                 ; 0001 00F6   PN532_msg.buffer[1] = 1;                              /* Max card numbers */
                 ; 0001 00F7   PN532_msg.buffer[2] = MIFARE_CMD_READ;
0002a3 e3e0      	LDI  R30,LOW(48)
0002a4 d253      	RCALL SUBOPT_0x1D
                 ; 0001 00F8   PN532_msg.buffer[3] = block_number;                    /* Block Number (1K = 0..63, 4K = 0..255 */
0002a5 81e8      	LD   R30,Y
                +
0002a6 93e0 0207+STS _PN532_msg + ( 3 ) , R30
                 	__PUTB1MN _PN532_msg,3
                 ; 0001 00F9   PN532_msg.length = 4;
0002a8 e0e4      	LDI  R30,LOW(4)
0002a9 e0f0      	LDI  R31,HIGH(4)
0002aa d22b      	RCALL SUBOPT_0x17
                 ; 0001 00FA 
                 ; 0001 00FB   PN532_build_msg(&twi_tx, &PN532_msg);
                 ; 0001 00FC   PN532_cmd(&twi_tx);
                 ; 0001 00FD   delay_ms(20);
0002ab d237      	RCALL SUBOPT_0x18
                 ; 0001 00FE   while(!PN532_wait_for_ack()) delay_ms(20);
                 _0x2004E:
0002ac d238      	RCALL SUBOPT_0x19
0002ad f411      	BRNE _0x20050
0002ae d234      	RCALL SUBOPT_0x18
0002af cffc      	RJMP _0x2004E
                 _0x20050:
                 ; 0001 00FF delay_ms(20);
0002b0 d232      	RCALL SUBOPT_0x18
                 ; 0001 0100   PN532_read(&twi_rx);
0002b1 d236      	RCALL SUBOPT_0x1A
                 ; 0001 0101   PN532_get_msg(&twi_rx, &PN532_msg, 1);
0002b2 d23e      	RCALL SUBOPT_0x1B
                 ; 0001 0102   if(PN532_msg.buffer[0] != 0x00) return false;
0002b3 91e0 0204 	LDS  R30,_PN532_msg
0002b5 30e0      	CPI  R30,0
0002b6 f011      	BREQ _0x20051
0002b7 e0e0      	LDI  R30,LOW(0)
0002b8 c087      	RJMP _0x2080001
                 ; 0001 0103   PN532_get_msg(&twi_rx, &tag_data, 2);
                 _0x20051:
0002b9 e6e0      	LDI  R30,LOW(_twi_rx)
0002ba e0f1      	LDI  R31,HIGH(_twi_rx)
0002bb d1c6      	RCALL SUBOPT_0x0
0002bc eae8      	LDI  R30,LOW(_tag_data)
0002bd e0f2      	LDI  R31,HIGH(_tag_data)
0002be d1c3      	RCALL SUBOPT_0x0
0002bf e0a2      	LDI  R26,LOW(2)
0002c0 deee      	RCALL _PN532_get_msg
                 ; 0001 0104   return true;
0002c1 e0e1      	LDI  R30,LOW(1)
0002c2 c07d      	RJMP _0x2080001
                 ; 0001 0105 }
                 ; .FEND
                 ;
                 ;bool PN532_write_passive_tag(unsigned char block_number, TWI_BUFFER_STRUCT* data)
                 ; 0001 0108 {
                 ; 0001 0109   if(!PN532_auth_tag(block_number, 0, MIFARE_Key_A)) return false;
                 ;	block_number -> Y+2
                 ;	*data -> Y+0
                 ; 0001 010A   PN532_msg.buffer[0] = PN532_CMD_INDATAEXCHANGE;
                 ; 0001 010B   PN532_msg.buffer[1] = 1;                              /* Max card numbers */
                 ; 0001 010C   PN532_msg.buffer[2] = MIFARE_CMD_WRITE;
                 ; 0001 010D   PN532_msg.buffer[3] = block_number;                    /* Block Number (1K = 0..63, 4K = 0..255 */
                 ; 0001 010E   for (i = 0; i < data->length && i < 16; ++i)
                 ; 0001 010F   {
                 ; 0001 0110     PN532_msg.buffer[4+i] = data->buffer[i];                /* 16 byte data */
                 ; 0001 0111   }
                 ; 0001 0112   PN532_msg.length = 4+i;
                 ; 0001 0113 
                 ; 0001 0114   PN532_build_msg(&twi_tx, &PN532_msg);
                 ; 0001 0115   PN532_cmd(&twi_tx);
                 ; 0001 0116   delay_ms(20);
                 ; 0001 0117   while(!PN532_wait_for_ack()) delay_ms(20);
                 ; 0001 0118 delay_ms(20);
                 ; 0001 0119   PN532_read(&twi_rx);
                 ; 0001 011A   PN532_get_msg(&twi_rx, &PN532_msg, 1);
                 ; 0001 011B   if(PN532_msg.buffer[0] != 0x00) return false;
                 ; 0001 011C   PN532_get_msg(&twi_rx, &tag_data, 2);
                 ; 0001 011D   return true;
                 ; 0001 011E }
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
0002c3 d1c6      	RCALL SUBOPT_0x3
0002c4 91a9          ld   r26,y+
0002c5 91b9          ld   r27,y+
0002c6 27ee          clr  r30
0002c7 27ff          clr  r31
                 strlen0:
0002c8 916d          ld   r22,x+
0002c9 2366          tst  r22
0002ca f011          breq strlen1
0002cb 9631          adiw r30,1
0002cc cffb          rjmp strlen0
                 strlen1:
0002cd 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
0002ce d1bb      	RCALL SUBOPT_0x3
0002cf 27aa          clr  r26
0002d0 27bb          clr  r27
0002d1 91e9          ld   r30,y+
0002d2 91f9          ld   r31,y+
                 strlenf0:
0002d3 9005      	lpm  r0,z+
0002d4 2000          tst  r0
0002d5 f011          breq strlenf1
0002d6 9611          adiw r26,1
0002d7 cffb          rjmp strlenf0
                 strlenf1:
0002d8 01fd          movw r30,r26
0002d9 9508          ret
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G101:
                 ; .FSTART __lcd_write_nibble_G101
0002da 93aa      	ST   -Y,R26
0002db 81e8      	LD   R30,Y
0002dc 71e0      	ANDI R30,LOW(0x10)
0002dd f011      	BREQ _0x2020004
0002de 9aab      	SBI  0x15,3
0002df c001      	RJMP _0x2020005
                 _0x2020004:
0002e0 98ab      	CBI  0x15,3
                 _0x2020005:
0002e1 81e8      	LD   R30,Y
0002e2 72e0      	ANDI R30,LOW(0x20)
0002e3 f011      	BREQ _0x2020006
0002e4 9aaa      	SBI  0x15,2
0002e5 c001      	RJMP _0x2020007
                 _0x2020006:
0002e6 98aa      	CBI  0x15,2
                 _0x2020007:
0002e7 81e8      	LD   R30,Y
0002e8 74e0      	ANDI R30,LOW(0x40)
0002e9 f011      	BREQ _0x2020008
0002ea 9aa9      	SBI  0x15,1
0002eb c001      	RJMP _0x2020009
                 _0x2020008:
0002ec 98a9      	CBI  0x15,1
                 _0x2020009:
0002ed 81e8      	LD   R30,Y
0002ee 78e0      	ANDI R30,LOW(0x80)
0002ef f011      	BREQ _0x202000A
0002f0 9aa8      	SBI  0x15,0
0002f1 c001      	RJMP _0x202000B
                 _0x202000A:
0002f2 98a8      	CBI  0x15,0
                 _0x202000B:
0002f3 d20c      	RCALL SUBOPT_0x1F
0002f4 9a94      	SBI  0x12,4
0002f5 d20a      	RCALL SUBOPT_0x1F
0002f6 9894      	CBI  0x12,4
0002f7 d208      	RCALL SUBOPT_0x1F
0002f8 c047      	RJMP _0x2080001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
0002f9 93aa      	ST   -Y,R26
0002fa 81a8      	LD   R26,Y
0002fb dfde      	RCALL __lcd_write_nibble_G101
0002fc 81e8          ld    r30,y
0002fd 95e2          swap  r30
0002fe 83e8          st    y,r30
0002ff 81a8      	LD   R26,Y
000300 dfd9      	RCALL __lcd_write_nibble_G101
                +
000301 ec88     +LDI R24 , LOW ( 200 )
                +__DELAY_USB_LOOP :
000302 958a     +DEC R24
000303 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 200
000304 c03b      	RJMP _0x2080001
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
000305 e0a2      	LDI  R26,LOW(2)
000306 dff2      	RCALL __lcd_write_data
000307 e0a3      	LDI  R26,LOW(3)
000308 d17f      	RCALL SUBOPT_0x2
000309 e0ac      	LDI  R26,LOW(12)
00030a dfee      	RCALL __lcd_write_data
00030b e0a1      	LDI  R26,LOW(1)
00030c dfec      	RCALL __lcd_write_data
00030d e0a3      	LDI  R26,LOW(3)
00030e d179      	RCALL SUBOPT_0x2
00030f e0e0      	LDI  R30,LOW(0)
000310 2eae      	MOV  R10,R30
000311 2ebe      	MOV  R11,R30
000312 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
000313 93aa      	ST   -Y,R26
000314 9aa3      	SBI  0x14,3
000315 9aa2      	SBI  0x14,2
000316 9aa1      	SBI  0x14,1
000317 9aa0      	SBI  0x14,0
000318 9a8c      	SBI  0x11,4
000319 9a8e      	SBI  0x11,6
00031a 9a8d      	SBI  0x11,5
00031b 9894      	CBI  0x12,4
00031c 9896      	CBI  0x12,6
00031d 9895      	CBI  0x12,5
00031e 80d8      	LDD  R13,Y+0
00031f 81e8      	LD   R30,Y
000320 58e0      	SUBI R30,-LOW(128)
                +
000321 93e0 030a+STS __base_y_G101 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G101,2
000323 81e8      	LD   R30,Y
000324 54e0      	SUBI R30,-LOW(192)
                +
000325 93e0 030b+STS __base_y_G101 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G101,3
000327 d1bb      	RCALL SUBOPT_0x18
000328 d1db      	RCALL SUBOPT_0x20
000329 d1da      	RCALL SUBOPT_0x20
00032a d1d9      	RCALL SUBOPT_0x20
00032b e2a0      	LDI  R26,LOW(32)
00032c dfad      	RCALL __lcd_write_nibble_G101
                +
00032d e28c     +LDI R24 , LOW ( 300 )
00032e e091     +LDI R25 , HIGH ( 300 )
                +__DELAY_USW_LOOP :
00032f 9701     +SBIW R24 , 1
000330 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 300
000331 e2a8      	LDI  R26,LOW(40)
000332 dfc6      	RCALL __lcd_write_data
000333 e0a4      	LDI  R26,LOW(4)
000334 dfc4      	RCALL __lcd_write_data
000335 e8a5      	LDI  R26,LOW(133)
000336 dfc2      	RCALL __lcd_write_data
000337 e0a6      	LDI  R26,LOW(6)
000338 dfc0      	RCALL __lcd_write_data
000339 dfcb      	RCALL _lcd_clear
00033a c005      	RJMP _0x2080001
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _putchar:
                 ; .FSTART _putchar
00033b 93aa      	ST   -Y,R26
                 putchar0:
00033c 9b5d           sbis usr,udre
00033d cffe           rjmp putchar0
00033e 81e8           ld   r30,y
00033f b9ec           out  udr,r30
                 _0x2080001:
000340 9621      	ADIW R28,1
000341 9508      	RET
                 ; .FEND
                 _put_usart_G102:
                 ; .FSTART _put_usart_G102
000342 d147      	RCALL SUBOPT_0x3
000343 81aa      	LDD  R26,Y+2
000344 dff6      	RCALL _putchar
000345 d14a      	RCALL SUBOPT_0x5
000346 91ed      	LD   R30,X+
000347 91fd      	LD   R31,X+
000348 9631      	ADIW R30,1
000349 93fe      	ST   -X,R31
00034a 93ee      	ST   -X,R30
00034b 9623      	ADIW R28,3
00034c 9508      	RET
                 ; .FEND
                 __print_G102:
                 ; .FSTART __print_G102
00034d d13c      	RCALL SUBOPT_0x3
00034e 9726      	SBIW R28,6
00034f d20a      	RCALL __SAVELOCR6
000350 e010      	LDI  R17,0
000351 85ac      	LDD  R26,Y+12
000352 85bd      	LDD  R27,Y+12+1
000353 e0e0      	LDI  R30,LOW(0)
000354 e0f0      	LDI  R31,HIGH(0)
000355 93ed      	ST   X+,R30
000356 93fc      	ST   X,R31
                 _0x2040016:
000357 89ea      	LDD  R30,Y+18
000358 89fb      	LDD  R31,Y+18+1
000359 9631      	ADIW R30,1
00035a 8bea      	STD  Y+18,R30
00035b 8bfb      	STD  Y+18+1,R31
00035c 9731      	SBIW R30,1
00035d 91e4      	LPM  R30,Z
00035e 2f2e      	MOV  R18,R30
00035f 30e0      	CPI  R30,0
000360 f409      	BRNE PC+2
000361 c0fc      	RJMP _0x2040018
000362 2fe1      	MOV  R30,R17
000363 30e0      	CPI  R30,0
000364 f431      	BRNE _0x204001C
000365 3225      	CPI  R18,37
000366 f411      	BRNE _0x204001D
000367 e011      	LDI  R17,LOW(1)
000368 c001      	RJMP _0x204001E
                 _0x204001D:
000369 d1a1      	RCALL SUBOPT_0x21
                 _0x204001E:
00036a c0f2      	RJMP _0x204001B
                 _0x204001C:
00036b 30e1      	CPI  R30,LOW(0x1)
00036c f4a1      	BRNE _0x204001F
00036d 3225      	CPI  R18,37
00036e f411      	BRNE _0x2040020
00036f d19b      	RCALL SUBOPT_0x21
000370 c0eb      	RJMP _0x20400CC
                 _0x2040020:
000371 e012      	LDI  R17,LOW(2)
000372 e040      	LDI  R20,LOW(0)
000373 e000      	LDI  R16,LOW(0)
000374 322d      	CPI  R18,45
000375 f411      	BRNE _0x2040021
000376 e001      	LDI  R16,LOW(1)
000377 c0e5      	RJMP _0x204001B
                 _0x2040021:
000378 322b      	CPI  R18,43
000379 f411      	BRNE _0x2040022
00037a e24b      	LDI  R20,LOW(43)
00037b c0e1      	RJMP _0x204001B
                 _0x2040022:
00037c 3220      	CPI  R18,32
00037d f411      	BRNE _0x2040023
00037e e240      	LDI  R20,LOW(32)
00037f c0dd      	RJMP _0x204001B
                 _0x2040023:
000380 c002      	RJMP _0x2040024
                 _0x204001F:
000381 30e2      	CPI  R30,LOW(0x2)
000382 f439      	BRNE _0x2040025
                 _0x2040024:
000383 e050      	LDI  R21,LOW(0)
000384 e013      	LDI  R17,LOW(3)
000385 3320      	CPI  R18,48
000386 f411      	BRNE _0x2040026
000387 6800      	ORI  R16,LOW(128)
000388 c0d4      	RJMP _0x204001B
                 _0x2040026:
000389 c003      	RJMP _0x2040027
                 _0x2040025:
00038a 30e3      	CPI  R30,LOW(0x3)
00038b f009      	BREQ PC+2
00038c c0d0      	RJMP _0x204001B
                 _0x2040027:
00038d 3320      	CPI  R18,48
00038e f010      	BRLO _0x204002A
00038f 332a      	CPI  R18,58
000390 f008      	BRLO _0x204002B
                 _0x204002A:
000391 c007      	RJMP _0x2040029
                 _0x204002B:
000392 e0aa      	LDI  R26,LOW(10)
000393 9f5a      	MUL  R21,R26
000394 2d50      	MOV  R21,R0
000395 2fe2      	MOV  R30,R18
000396 53e0      	SUBI R30,LOW(48)
000397 0f5e      	ADD  R21,R30
000398 c0c4      	RJMP _0x204001B
                 _0x2040029:
000399 2fe2      	MOV  R30,R18
00039a 36e3      	CPI  R30,LOW(0x63)
00039b f439      	BRNE _0x204002F
00039c d175      	RCALL SUBOPT_0x22
00039d d177      	RCALL SUBOPT_0x23
00039e d173      	RCALL SUBOPT_0x22
00039f 81a4      	LDD  R26,Z+4
0003a0 93aa      	ST   -Y,R26
0003a1 d177      	RCALL SUBOPT_0x24
0003a2 c0b9      	RJMP _0x2040030
                 _0x204002F:
0003a3 37e3      	CPI  R30,LOW(0x73)
0003a4 f429      	BRNE _0x2040032
0003a5 d179      	RCALL SUBOPT_0x25
0003a6 d17a      	RCALL SUBOPT_0x26
0003a7 df1b      	RCALL _strlen
0003a8 2f1e      	MOV  R17,R30
0003a9 c007      	RJMP _0x2040033
                 _0x2040032:
0003aa 37e0      	CPI  R30,LOW(0x70)
0003ab f449      	BRNE _0x2040035
0003ac d172      	RCALL SUBOPT_0x25
0003ad d173      	RCALL SUBOPT_0x26
0003ae df1f      	RCALL _strlenf
0003af 2f1e      	MOV  R17,R30
0003b0 6008      	ORI  R16,LOW(8)
                 _0x2040033:
0003b1 6002      	ORI  R16,LOW(2)
0003b2 770f      	ANDI R16,LOW(127)
0003b3 e030      	LDI  R19,LOW(0)
0003b4 c02d      	RJMP _0x2040036
                 _0x2040035:
0003b5 36e4      	CPI  R30,LOW(0x64)
0003b6 f011      	BREQ _0x2040039
0003b7 36e9      	CPI  R30,LOW(0x69)
0003b8 f411      	BRNE _0x204003A
                 _0x2040039:
0003b9 6004      	ORI  R16,LOW(4)
0003ba c002      	RJMP _0x204003B
                 _0x204003A:
0003bb 37e5      	CPI  R30,LOW(0x75)
0003bc f429      	BRNE _0x204003C
                 _0x204003B:
0003bd e2e6      	LDI  R30,LOW(_tbl10_G102*2)
0003be e0f0      	LDI  R31,HIGH(_tbl10_G102*2)
0003bf d16a      	RCALL SUBOPT_0x27
0003c0 e015      	LDI  R17,LOW(5)
0003c1 c00b      	RJMP _0x204003D
                 _0x204003C:
0003c2 35e8      	CPI  R30,LOW(0x58)
0003c3 f411      	BRNE _0x204003F
0003c4 6008      	ORI  R16,LOW(8)
0003c5 c003      	RJMP _0x2040040
                 _0x204003F:
0003c6 37e8      	CPI  R30,LOW(0x78)
0003c7 f009      	BREQ PC+2
0003c8 c093      	RJMP _0x2040071
                 _0x2040040:
0003c9 e3e0      	LDI  R30,LOW(_tbl16_G102*2)
0003ca e0f0      	LDI  R31,HIGH(_tbl16_G102*2)
0003cb d15e      	RCALL SUBOPT_0x27
0003cc e014      	LDI  R17,LOW(4)
                 _0x204003D:
0003cd ff02      	SBRS R16,2
0003ce c011      	RJMP _0x2040042
0003cf d14f      	RCALL SUBOPT_0x25
0003d0 d15c      	RCALL SUBOPT_0x28
0003d1 85ab      	LDD  R26,Y+11
0003d2 23aa      	TST  R26
0003d3 f432      	BRPL _0x2040043
0003d4 85ea      	LDD  R30,Y+10
0003d5 85fb      	LDD  R31,Y+10+1
0003d6 d16b      	RCALL __ANEGW1
0003d7 87ea      	STD  Y+10,R30
0003d8 87fb      	STD  Y+10+1,R31
0003d9 e24d      	LDI  R20,LOW(45)
                 _0x2040043:
0003da 3040      	CPI  R20,0
0003db f011      	BREQ _0x2040044
0003dc 5f1f      	SUBI R17,-LOW(1)
0003dd c001      	RJMP _0x2040045
                 _0x2040044:
0003de 7f0b      	ANDI R16,LOW(251)
                 _0x2040045:
0003df c002      	RJMP _0x2040046
                 _0x2040042:
0003e0 d13e      	RCALL SUBOPT_0x25
0003e1 d14b      	RCALL SUBOPT_0x28
                 _0x2040046:
                 _0x2040036:
0003e2 fd00      	SBRC R16,0
0003e3 c010      	RJMP _0x2040047
                 _0x2040048:
0003e4 1715      	CP   R17,R21
0003e5 f470      	BRSH _0x204004A
0003e6 ff07      	SBRS R16,7
0003e7 c008      	RJMP _0x204004B
0003e8 ff02      	SBRS R16,2
0003e9 c004      	RJMP _0x204004C
0003ea 7f0b      	ANDI R16,LOW(251)
0003eb 2f24      	MOV  R18,R20
0003ec 5011      	SUBI R17,LOW(1)
0003ed c001      	RJMP _0x204004D
                 _0x204004C:
0003ee e320      	LDI  R18,LOW(48)
                 _0x204004D:
0003ef c001      	RJMP _0x204004E
                 _0x204004B:
0003f0 e220      	LDI  R18,LOW(32)
                 _0x204004E:
0003f1 d119      	RCALL SUBOPT_0x21
0003f2 5051      	SUBI R21,LOW(1)
0003f3 cff0      	RJMP _0x2040048
                 _0x204004A:
                 _0x2040047:
0003f4 2f31      	MOV  R19,R17
0003f5 ff01      	SBRS R16,1
0003f6 c015      	RJMP _0x204004F
                 _0x2040050:
0003f7 3030      	CPI  R19,0
0003f8 f091      	BREQ _0x2040052
0003f9 ff03      	SBRS R16,3
0003fa c005      	RJMP _0x2040053
0003fb 81ee      	LDD  R30,Y+6
0003fc 81ff      	LDD  R31,Y+6+1
0003fd 9125      	LPM  R18,Z+
0003fe d12b      	RCALL SUBOPT_0x27
0003ff c005      	RJMP _0x2040054
                 _0x2040053:
000400 81ae      	LDD  R26,Y+6
000401 81bf      	LDD  R27,Y+6+1
000402 912d      	LD   R18,X+
000403 83ae      	STD  Y+6,R26
000404 83bf      	STD  Y+6+1,R27
                 _0x2040054:
000405 d105      	RCALL SUBOPT_0x21
000406 3050      	CPI  R21,0
000407 f009      	BREQ _0x2040055
000408 5051      	SUBI R21,LOW(1)
                 _0x2040055:
000409 5031      	SUBI R19,LOW(1)
00040a cfec      	RJMP _0x2040050
                 _0x2040052:
00040b c047      	RJMP _0x2040056
                 _0x204004F:
                 _0x2040058:
00040c e320      	LDI  R18,LOW(48)
00040d 81ee      	LDD  R30,Y+6
00040e 81ff      	LDD  R31,Y+6+1
00040f d13a      	RCALL __GETW1PF
000410 87e8      	STD  Y+8,R30
000411 87f9      	STD  Y+8+1,R31
000412 81ee      	LDD  R30,Y+6
000413 81ff      	LDD  R31,Y+6+1
000414 9632      	ADIW R30,2
000415 d114      	RCALL SUBOPT_0x27
                 _0x204005A:
000416 85e8      	LDD  R30,Y+8
000417 85f9      	LDD  R31,Y+8+1
000418 85aa      	LDD  R26,Y+10
000419 85bb      	LDD  R27,Y+10+1
00041a 17ae      	CP   R26,R30
00041b 07bf      	CPC  R27,R31
00041c f050      	BRLO _0x204005C
00041d 5f2f      	SUBI R18,-LOW(1)
00041e 85a8      	LDD  R26,Y+8
00041f 85b9      	LDD  R27,Y+8+1
000420 85ea      	LDD  R30,Y+10
000421 85fb      	LDD  R31,Y+10+1
000422 1bea      	SUB  R30,R26
000423 0bfb      	SBC  R31,R27
000424 87ea      	STD  Y+10,R30
000425 87fb      	STD  Y+10+1,R31
000426 cfef      	RJMP _0x204005A
                 _0x204005C:
000427 332a      	CPI  R18,58
000428 f028      	BRLO _0x204005D
000429 ff03      	SBRS R16,3
00042a c002      	RJMP _0x204005E
00042b 5f29      	SUBI R18,-LOW(7)
00042c c001      	RJMP _0x204005F
                 _0x204005E:
00042d 5d29      	SUBI R18,-LOW(39)
                 _0x204005F:
                 _0x204005D:
00042e fd04      	SBRC R16,4
00042f c019      	RJMP _0x2040061
000430 3321      	CPI  R18,49
000431 f420      	BRSH _0x2040063
000432 85a8      	LDD  R26,Y+8
000433 85b9      	LDD  R27,Y+8+1
000434 9711      	SBIW R26,1
000435 f409      	BRNE _0x2040062
                 _0x2040063:
000436 c009      	RJMP _0x20400CD
                 _0x2040062:
000437 1753      	CP   R21,R19
000438 f010      	BRLO _0x2040067
000439 ff00      	SBRS R16,0
00043a c001      	RJMP _0x2040068
                 _0x2040067:
00043b c011      	RJMP _0x2040066
                 _0x2040068:
00043c e220      	LDI  R18,LOW(32)
00043d ff07      	SBRS R16,7
00043e c00a      	RJMP _0x2040069
00043f e320      	LDI  R18,LOW(48)
                 _0x20400CD:
000440 6100      	ORI  R16,LOW(16)
000441 ff02      	SBRS R16,2
000442 c006      	RJMP _0x204006A
000443 7f0b      	ANDI R16,LOW(251)
000444 934a      	ST   -Y,R20
000445 d0d3      	RCALL SUBOPT_0x24
000446 3050      	CPI  R21,0
000447 f009      	BREQ _0x204006B
000448 5051      	SUBI R21,LOW(1)
                 _0x204006B:
                 _0x204006A:
                 _0x2040069:
                 _0x2040061:
000449 d0c1      	RCALL SUBOPT_0x21
00044a 3050      	CPI  R21,0
00044b f009      	BREQ _0x204006C
00044c 5051      	SUBI R21,LOW(1)
                 _0x204006C:
                 _0x2040066:
00044d 5031      	SUBI R19,LOW(1)
00044e 85a8      	LDD  R26,Y+8
00044f 85b9      	LDD  R27,Y+8+1
000450 9712      	SBIW R26,2
000451 f008      	BRLO _0x2040059
000452 cfb9      	RJMP _0x2040058
                 _0x2040059:
                 _0x2040056:
000453 ff00      	SBRS R16,0
000454 c007      	RJMP _0x204006D
                 _0x204006E:
000455 3050      	CPI  R21,0
000456 f029      	BREQ _0x2040070
000457 5051      	SUBI R21,LOW(1)
000458 e2e0      	LDI  R30,LOW(32)
000459 93ea      	ST   -Y,R30
00045a d0be      	RCALL SUBOPT_0x24
00045b cff9      	RJMP _0x204006E
                 _0x2040070:
                 _0x204006D:
                 _0x2040071:
                 _0x2040030:
                 _0x20400CC:
00045c e010      	LDI  R17,LOW(0)
                 _0x204001B:
00045d cef9      	RJMP _0x2040016
                 _0x2040018:
00045e 85ac      	LDD  R26,Y+12
00045f 85bd      	LDD  R27,Y+12+1
000460 d0e5      	RCALL __GETW1P
000461 d0ff      	RCALL __LOADLOCR6
000462 9664      	ADIW R28,20
000463 9508      	RET
                 ; .FEND
                 _printf:
                 ; .FSTART _printf
000464 92ff      	PUSH R15
000465 2ef8      	MOV  R15,R24
000466 9726      	SBIW R28,6
000467 d0f6      	RCALL __SAVELOCR2
000468 01de      	MOVW R26,R28
000469 9614      	ADIW R26,4
00046a d0d3      	RCALL __ADDW2R15
00046b 018d      	MOVW R16,R26
00046c e0e0      	LDI  R30,LOW(0)
00046d 83ec      	STD  Y+4,R30
00046e 83ed      	STD  Y+4+1,R30
00046f 83ee      	STD  Y+6,R30
000470 83ef      	STD  Y+6+1,R30
000471 01de      	MOVW R26,R28
000472 9618      	ADIW R26,8
000473 d0ca      	RCALL __ADDW2R15
000474 d0d1      	RCALL __GETW1P
000475 d00c      	RCALL SUBOPT_0x0
000476 931a      	ST   -Y,R17
000477 930a      	ST   -Y,R16
000478 e4e2      	LDI  R30,LOW(_put_usart_G102)
000479 e0f3      	LDI  R31,HIGH(_put_usart_G102)
00047a d007      	RCALL SUBOPT_0x0
00047b 01de      	MOVW R26,R28
00047c 9618      	ADIW R26,8
00047d decf      	RCALL __print_G102
00047e d0e6      	RCALL __LOADLOCR2
00047f 9628      	ADIW R28,8
000480 90ff      	POP  R15
000481 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.DSEG
                 _twi_rx:
000160           	.BYTE 0x52
                 _twi_tx:
0001b2           	.BYTE 0x52
                 _PN532_msg:
000204           	.BYTE 0x52
                 _tag_uid:
000256           	.BYTE 0x52
                 _tag_data:
0002a8           	.BYTE 0x52
                 _rx_buffer:
0002fa           	.BYTE 0x8
                 _MIFARE_Key_A:
000302           	.BYTE 0x6
                 __base_y_G101:
000308           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 20 TIMES, CODE SIZE REDUCTION:17 WORDS
                 SUBOPT_0x0:
000482 93fa      	ST   -Y,R31
000483 93ea      	ST   -Y,R30
000484 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x1:
                +
000485 5f0f     +SUBI R16 , LOW ( - 1 )
000486 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000487 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 19 TIMES, CODE SIZE REDUCTION:16 WORDS
                 SUBOPT_0x2:
000488 e0b0      	LDI  R27,0
000489 c0aa      	RJMP _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 9 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x3:
00048a 93ba      	ST   -Y,R27
00048b 93aa      	ST   -Y,R26
00048c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x4:
00048d 2488      	CLR  R8
00048e 2499      	CLR  R9
00048f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x5:
000490 81a8      	LD   R26,Y
000491 81b9      	LDD  R27,Y+1
000492 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x6:
000493 5ba0      	SUBI R26,LOW(-80)
000494 4fbf      	SBCI R27,HIGH(-80)
000495 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x7:
000496 d0af      	RCALL __GETW1P
000497 168e      	CP   R8,R30
000498 069f      	CPC  R9,R31
000499 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x8:
00049a 01f4      	MOVW R30,R8
00049b dff4      	RCALL SUBOPT_0x5
00049c 0fae      	ADD  R26,R30
00049d 1fbf      	ADC  R27,R31
00049e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x9:
00049f 01f4      	MOVW R30,R8
0004a0 9631      	ADIW R30,1
0004a1 014f      	MOVW R8,R30
0004a2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0xA:
0004a3 81ac      	LDD  R26,Y+4
0004a4 81bd      	LDD  R27,Y+4+1
0004a5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0xB:
0004a6 93ec      	ST   X,R30
0004a7 cfdd      	RJMP SUBOPT_0x1
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0xC:
0004a8 81aa      	LDD  R26,Y+2
0004a9 81bb      	LDD  R27,Y+2+1
0004aa dfe8      	RCALL SUBOPT_0x6
0004ab 91ec      	LD   R30,X
0004ac 5fef      	SUBI R30,-LOW(1)
0004ad 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 11 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0xD:
0004ae 81aa      	LDD  R26,Y+2
0004af 81bb      	LDD  R27,Y+2+1
0004b0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 10 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0xE:
0004b1 0fea      	ADD  R30,R26
0004b2 1ffb      	ADC  R31,R27
0004b3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0xF:
0004b4 01f4      	MOVW R30,R8
0004b5 dff8      	RCALL SUBOPT_0xD
0004b6 0fae      	ADD  R26,R30
0004b7 1fbf      	ADC  R27,R31
0004b8 91ec      	LD   R30,X
0004b9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 13 TIMES, CODE SIZE REDUCTION:22 WORDS
                 SUBOPT_0x10:
0004ba e0a1      	LDI  R26,LOW(1)
0004bb e0b0      	LDI  R27,0
0004bc cc38      	RJMP _TWIRead
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x11:
0004bd 2fe0      	MOV  R30,R16
0004be 5f0f      	SUBI R16,-1
0004bf dfee      	RCALL SUBOPT_0xD
0004c0 e0f0      	LDI  R31,0
0004c1 dfef      	RCALL SUBOPT_0xE
0004c2 8310      	ST   Z,R17
0004c3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x12:
0004c4 dc21      	RCALL _TWIStop
0004c5 e0e0      	LDI  R30,LOW(0)
0004c6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:14 WORDS
                 SUBOPT_0x13:
0004c7 2fe0      	MOV  R30,R16
0004c8 5f0f      	SUBI R16,-1
0004c9 dfe4      	RCALL SUBOPT_0xD
0004ca e0f0      	LDI  R31,0
0004cb cfe5      	RJMP SUBOPT_0xE
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x14:
0004cc 168e      	CP   R8,R30
0004cd 069f      	CPC  R9,R31
0004ce 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x15:
0004cf 91ec      	LD   R30,X
0004d0 01d0      	MOVW R26,R0
0004d1 93ec      	ST   X,R30
0004d2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x16:
0004d3 93e0 0204 	STS  _PN532_msg,R30
0004d5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:46 WORDS
                 SUBOPT_0x17:
                +
0004d6 93e0 0254+STS _PN532_msg + ( 80 ) , R30
0004d8 93f0 0255+STS _PN532_msg + ( 80 ) + 1 , R31
                 	__PUTW1MN _PN532_msg,80
0004da ebe2      	LDI  R30,LOW(_twi_tx)
0004db e0f1      	LDI  R31,HIGH(_twi_tx)
0004dc dfa5      	RCALL SUBOPT_0x0
0004dd e0a4      	LDI  R26,LOW(_PN532_msg)
0004de e0b2      	LDI  R27,HIGH(_PN532_msg)
0004df dc33      	RCALL _PN532_build_msg
0004e0 eba2      	LDI  R26,LOW(_twi_tx)
0004e1 e0b1      	LDI  R27,HIGH(_twi_tx)
0004e2 cc1f      	RJMP _PN532_cmd
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 16 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x18:
0004e3 e1a4      	LDI  R26,LOW(20)
0004e4 cfa3      	RJMP SUBOPT_0x2
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x19:
0004e5 dcf4      	RCALL _PN532_wait_for_ack
0004e6 30e0      	CPI  R30,0
0004e7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:30 WORDS
                 SUBOPT_0x1A:
0004e8 e6a0      	LDI  R26,LOW(_twi_rx)
0004e9 e0b1      	LDI  R27,HIGH(_twi_rx)
0004ea dc69      	RCALL _PN532_read
0004eb e6e0      	LDI  R30,LOW(_twi_rx)
0004ec e0f1      	LDI  R31,HIGH(_twi_rx)
0004ed df94      	RCALL SUBOPT_0x0
0004ee e0e4      	LDI  R30,LOW(_PN532_msg)
0004ef e0f2      	LDI  R31,HIGH(_PN532_msg)
0004f0 cf91      	RJMP SUBOPT_0x0
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1B:
0004f1 e0a1      	LDI  R26,LOW(1)
0004f2 ccbc      	RJMP _PN532_get_msg
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x1C:
0004f3 dfdf      	RCALL SUBOPT_0x16
0004f4 e0e1      	LDI  R30,LOW(1)
                +
0004f5 93e0 0205+STS _PN532_msg + ( 1 ) , R30
                 	__PUTB1MN _PN532_msg,1
0004f7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1D:
                +
0004f8 93e0 0206+STS _PN532_msg + ( 2 ) , R30
                 	__PUTB1MN _PN532_msg,2
0004fa 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x1E:
                +
0004fb 91e0 02a6+LDS R30 , _tag_uid + ( 80 )
0004fd 91f0 02a7+LDS R31 , _tag_uid + ( 80 ) + 1
                 	__GETW1MN _tag_uid,80
0004ff cfcc      	RJMP SUBOPT_0x14
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x1F:
                +
000500 e184     +LDI R24 , LOW ( 20 )
                +__DELAY_USB_LOOP :
000501 958a     +DEC R24
000502 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 20
000503 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x20:
000504 e3a0      	LDI  R26,LOW(48)
000505 ddd4      	RCALL __lcd_write_nibble_G101
                +
000506 e28c     +LDI R24 , LOW ( 300 )
000507 e091     +LDI R25 , HIGH ( 300 )
                +__DELAY_USW_LOOP :
000508 9701     +SBIW R24 , 1
000509 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 300
00050a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:18 WORDS
                 SUBOPT_0x21:
00050b 932a      	ST   -Y,R18
00050c 85ad      	LDD  R26,Y+13
00050d 85be      	LDD  R27,Y+13+1
00050e 85ef      	LDD  R30,Y+15
00050f 89f8      	LDD  R31,Y+15+1
000510 9509      	ICALL
000511 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x22:
000512 89e8      	LDD  R30,Y+16
000513 89f9      	LDD  R31,Y+16+1
000514 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x23:
000515 9734      	SBIW R30,4
000516 8be8      	STD  Y+16,R30
000517 8bf9      	STD  Y+16+1,R31
000518 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x24:
000519 85ad      	LDD  R26,Y+13
00051a 85be      	LDD  R27,Y+13+1
00051b 85ef      	LDD  R30,Y+15
00051c 89f8      	LDD  R31,Y+15+1
00051d 9509      	ICALL
00051e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x25:
00051f dff2      	RCALL SUBOPT_0x22
000520 cff4      	RJMP SUBOPT_0x23
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x26:
000521 89a8      	LDD  R26,Y+16
000522 89b9      	LDD  R27,Y+16+1
000523 9614      	ADIW R26,4
000524 d021      	RCALL __GETW1P
000525 83ee      	STD  Y+6,R30
000526 83ff      	STD  Y+6+1,R31
000527 81ae      	LDD  R26,Y+6
000528 81bf      	LDD  R27,Y+6+1
000529 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x27:
00052a 83ee      	STD  Y+6,R30
00052b 83ff      	STD  Y+6+1,R31
00052c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x28:
00052d 89a8      	LDD  R26,Y+16
00052e 89b9      	LDD  R27,Y+16+1
00052f 9614      	ADIW R26,4
000530 d015      	RCALL __GETW1P
000531 87ea      	STD  Y+10,R30
000532 87fb      	STD  Y+10+1,R31
000533 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000534 9610      	adiw r26,0
000535 f039      	breq __delay_ms1
                 __delay_ms0:
                +
000536 eb88     +LDI R24 , LOW ( 0xBB8 )
000537 e09b     +LDI R25 , HIGH ( 0xBB8 )
                +__DELAY_USW_LOOP :
000538 9701     +SBIW R24 , 1
000539 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xBB8
00053a 95a8      	wdr
00053b 9711      	sbiw r26,1
00053c f7c9      	brne __delay_ms0
                 __delay_ms1:
00053d 9508      	ret
                 
                 __ADDW2R15:
00053e 2400      	CLR  R0
00053f 0daf      	ADD  R26,R15
000540 1db0      	ADC  R27,R0
000541 9508      	RET
                 
                 __ANEGW1:
000542 95f1      	NEG  R31
000543 95e1      	NEG  R30
000544 40f0      	SBCI R31,0
000545 9508      	RET
                 
                 __GETW1P:
000546 91ed      	LD   R30,X+
000547 91fc      	LD   R31,X
000548 9711      	SBIW R26,1
000549 9508      	RET
                 
                 __GETW1PF:
00054a 9005      	LPM  R0,Z+
00054b 91f4      	LPM  R31,Z
00054c 2de0      	MOV  R30,R0
00054d 9508      	RET
                 
                 __PUTPARD1:
00054e 937a      	ST   -Y,R23
00054f 936a      	ST   -Y,R22
000550 93fa      	ST   -Y,R31
000551 93ea      	ST   -Y,R30
000552 9508      	RET
                 
                 __SWAPW12:
000553 2e1b      	MOV  R1,R27
000554 2fbf      	MOV  R27,R31
000555 2df1      	MOV  R31,R1
                 
                 __SWAPB12:
000556 2e1a      	MOV  R1,R26
000557 2fae      	MOV  R26,R30
000558 2de1      	MOV  R30,R1
000559 9508      	RET
                 
                 __SAVELOCR6:
00055a 935a      	ST   -Y,R21
                 __SAVELOCR5:
00055b 934a      	ST   -Y,R20
                 __SAVELOCR4:
00055c 933a      	ST   -Y,R19
                 __SAVELOCR3:
00055d 932a      	ST   -Y,R18
                 __SAVELOCR2:
00055e 931a      	ST   -Y,R17
00055f 930a      	ST   -Y,R16
000560 9508      	RET
                 
                 __LOADLOCR6:
000561 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
000562 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
000563 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000564 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000565 8119      	LDD  R17,Y+1
000566 8108      	LD   R16,Y
000567 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega8A register use summary:
r0 :  17 r1 :   5 r2 :   1 r3 :   0 r4 :   0 r5 :   4 r6 :   3 r7 :   3 
r8 :  16 r9 :   4 r10:   1 r11:   1 r12:   0 r13:   1 r14:   0 r15:   4 
r16:  43 r17:  38 r18:  27 r19:   8 r20:   9 r21:  17 r22:   6 r23:   2 
r24:  19 r25:   5 r26: 131 r27:  64 r28:  15 r29:   1 r30: 340 r31:  91 
x  :  36 y  : 163 z  :  18 
Registers used: 31 out of 35 (88.6%)

ATmega8A instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   8 add   :  10 
adiw  :  29 and   :   0 andi  :  10 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :  29 
brge  :   8 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   6 
brlt  :   0 brmi  :   0 brne  :  38 brpl  :   1 brsh  :   2 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 cbi   :  10 
cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 clr   :  14 
cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :   8 
cpc   :   4 cpi   :  46 cpse  :   0 dec   :   3 des   :   0 eor   :   0 
fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 in    :   8 
inc   :   2 ld    :  40 ldd   :  82 ldi   : 184 lds   :  10 lpm   :  14 
lsl   :   2 lsr   :   0 mov   :  30 movw  :  28 mul   :   1 muls  :   0 
mulsu :   0 neg   :   4 nop   :   0 or    :   0 ori   :   7 out   :  48 
pop   :  11 push  :  11 rcall : 250 ret   :  60 reti  :   1 rjmp  : 124 
rol   :   0 ror   :   0 sbc   :   2 sbci  :  10 sbi   :  13 sbic  :   0 
sbis  :   1 sbiw  :  16 sbr   :   0 sbrc  :   2 sbrs  :  13 sec   :   0 
seh   :   0 sei   :   1 sen   :   0 ser   :   0 ses   :   0 set   :   1 
sev   :   0 sez   :   0 sleep :   0 spm   :   0 st    :  61 std   :  22 
sts   :  10 sub   :   2 subi  :  27 swap  :   2 tst   :   3 wdr   :   1 

Instructions used: 56 out of 114 (49.1%)

ATmega8A memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000ad0   2704     64   2768    8192  33.8%
[.dseg] 0x000060 0x00030c      0    428    428    1024  41.8%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 10 warnings
