
AVRASM ver. 2.1.30  D:\My Files\AA\TEKNIK ELEKTRO\TA\obu\Debug\List\obu.asm Thu Sep 07 22:25:10 2017

D:\My Files\AA\TEKNIK ELEKTRO\TA\obu\Debug\List\obu.asm(1086): warning: Register r5 already defined by the .DEF directive
D:\My Files\AA\TEKNIK ELEKTRO\TA\obu\Debug\List\obu.asm(1087): warning: Register r4 already defined by the .DEF directive
D:\My Files\AA\TEKNIK ELEKTRO\TA\obu\Debug\List\obu.asm(1088): warning: Register r7 already defined by the .DEF directive
D:\My Files\AA\TEKNIK ELEKTRO\TA\obu\Debug\List\obu.asm(1089): warning: Register r6 already defined by the .DEF directive
D:\My Files\AA\TEKNIK ELEKTRO\TA\obu\Debug\List\obu.asm(1090): warning: Register r8 already defined by the .DEF directive
D:\My Files\AA\TEKNIK ELEKTRO\TA\obu\Debug\List\obu.asm(1091): warning: Register r9 already defined by the .DEF directive
D:\My Files\AA\TEKNIK ELEKTRO\TA\obu\Debug\List\obu.asm(1092): warning: Register r11 already defined by the .DEF directive
D:\My Files\AA\TEKNIK ELEKTRO\TA\obu\Debug\List\obu.asm(1093): warning: Register r10 already defined by the .DEF directive
D:\My Files\AA\TEKNIK ELEKTRO\TA\obu\Debug\List\obu.asm(1094): warning: Register r13 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega8
                 ;Program type           : Application
                 ;Clock frequency        : 12.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega8
                 	#pragma AVRPART MEMORY PROG_FLASH 8192
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	RCALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	RCALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _rx_wr_index=R5
                 	.DEF _rx_rd_index=R4
                 	.DEF _rx_counter=R7
                 	.DEF _checksum=R6
                 	.DEF _i=R8
                 	.DEF _i_msb=R9
                 	.DEF __lcd_x=R11
                 	.DEF __lcd_y=R10
                 	.DEF __lcd_maxx=R13
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 c03a      	RJMP __RESET
000001 cffe      	RJMP 0x00
000002 cffd      	RJMP 0x00
000003 cffc      	RJMP 0x00
000004 cffb      	RJMP 0x00
000005 cffa      	RJMP 0x00
000006 cff9      	RJMP 0x00
000007 cff8      	RJMP 0x00
000008 cff7      	RJMP 0x00
000009 cff6      	RJMP 0x00
00000a cff5      	RJMP 0x00
00000b c05b      	RJMP _usart_rx_isr
00000c cff3      	RJMP 0x00
00000d cff2      	RJMP 0x00
00000e cff1      	RJMP 0x00
00000f cff0      	RJMP 0x00
000010 cfef      	RJMP 0x00
000011 cfee      	RJMP 0x00
000012 cfed      	RJMP 0x00
                 
                 _tbl10_G102:
000013 2710
000014 03e8
000015 0064
000016 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
000017 0001      	.DB  0x1,0x0
                 _tbl16_G102:
000018 1000
000019 0100
00001a 0010
00001b 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;REGISTER BIT VARIABLES INITIALIZATION
                 __REG_BIT_VARS:
00001c 0000      	.DW  0x0000
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
00001d 0000
00001e 0000      	.DB  0x0,0x0,0x0,0x0
                 
                 _0xA:
00001f 2e4d
000020 4120
000021 4952
000022 4645      	.DB  0x4D,0x2E,0x20,0x41,0x52,0x49,0x45,0x46
000023 4620
000024 2e2e
000025 2e2e
000026 2e2e      	.DB  0x20,0x46,0x2E,0x2E,0x2E,0x2E,0x2E,0x2E
                 _0x0:
000027 3025
000028 7832
D:\My Files\AA\TEKNIK ELEKTRO\TA\obu\Debug\List\obu.asm(1141): warning: .cseg .db misalignment - padding zero byte
000029 0000      	.DB  0x25,0x30,0x32,0x78,0x0
                 _0x20003:
00002a ffff
00002b ffff
00002c ffff      	.DB  0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
                 _0x2020003:
00002d c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
00002e 0001      	.DW  0x01
00002f 0002      	.DW  0x02
000030 0038      	.DW  __REG_BIT_VARS*2
                 
000031 0004      	.DW  0x04
000032 0004      	.DW  0x04
000033 003a      	.DW  __REG_VARS*2
                 
000034 0006      	.DW  0x06
000035 0302      	.DW  _MIFARE_Key_A
000036 0054      	.DW  _0x20003*2
                 
000037 0002      	.DW  0x02
000038 0308      	.DW  __base_y_G101
000039 005a      	.DW  _0x2020003*2
                 
                 _0xFFFFFFFF:
00003a 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00003b 94f8      	CLI
00003c 27ee      	CLR  R30
00003d bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00003e e0f1      	LDI  R31,1
00003f bffb      	OUT  GICR,R31
000040 bfeb      	OUT  GICR,R30
000041 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000042 e08d      	LDI  R24,(14-2)+1
000043 e0a2      	LDI  R26,2
000044 27bb      	CLR  R27
                 __CLEAR_REG:
000045 93ed      	ST   X+,R30
000046 958a      	DEC  R24
000047 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000048 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000049 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00004a e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00004b 93ed      	ST   X+,R30
00004c 9701      	SBIW R24,1
00004d f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00004e e5ec      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00004f e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000050 9185      	LPM  R24,Z+
000051 9195      	LPM  R25,Z+
000052 9700      	SBIW R24,0
000053 f061      	BREQ __GLOBAL_INI_END
000054 91a5      	LPM  R26,Z+
000055 91b5      	LPM  R27,Z+
000056 9005      	LPM  R0,Z+
000057 9015      	LPM  R1,Z+
000058 01bf      	MOVW R22,R30
000059 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00005a 9005      	LPM  R0,Z+
00005b 920d      	ST   X+,R0
00005c 9701      	SBIW R24,1
00005d f7e1      	BRNE __GLOBAL_INI_LOOP
00005e 01fb      	MOVW R30,R22
00005f cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000060 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000061 bfed      	OUT  SPL,R30
000062 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000063 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000064 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000065 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000066 c022      	RJMP _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;#include <mega8.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;#include <string.h>
                 ;#include "PN532_I2C.h"
                 ;
                 ;// Alphanumeric LCD functions
                 ;#include <alcd.h>
                 ;
                 ;// Declare your global variables here
                 ;
                 ;#define DATA_REGISTER_EMPTY (1<<UDRE)
                 ;#define RX_COMPLETE         (1<<RXC)
                 ;#define FRAMING_ERROR       (1<<FE)
                 ;#define PARITY_ERROR        (1<<UPE)
                 ;#define DATA_OVERRUN        (1<<DOR)
                 ;
                 ;// USART Receiver buffer
                 ;#define RX_BUFFER_SIZE 8
                 ;char rx_buffer[RX_BUFFER_SIZE];
                 ;
                 ;#if RX_BUFFER_SIZE <= 256
                 ;unsigned char rx_wr_index=0,rx_rd_index=0;
                 ;#else
                 ;unsigned int rx_wr_index=0,rx_rd_index=0;
                 ;#endif
                 ;
                 ;#if RX_BUFFER_SIZE < 256
                 ;unsigned char rx_counter=0;
                 ;#else
                 ;unsigned int rx_counter=0;
                 ;#endif
                 ;
                 ;// This flag is set on USART Receiver buffer overflow
                 ;bit rx_buffer_overflow;
                 ;
                 ;// USART Receiver interrupt service routine
                 ;interrupt [USART_RXC] void usart_rx_isr(void)
                 ; 0000 0026 {
                 
                 	.CSEG
                 _usart_rx_isr:
                 ; .FSTART _usart_rx_isr
000067 93ea      	ST   -Y,R30
000068 93fa      	ST   -Y,R31
000069 b7ef      	IN   R30,SREG
00006a 93ea      	ST   -Y,R30
                 ; 0000 0027 char status,data;
                 ; 0000 0028 status=UCSRA;
00006b d4ef      	RCALL __SAVELOCR2
                 ;	status -> R17
                 ;	data -> R16
00006c b11b      	IN   R17,11
                 ; 0000 0029 data=UDR;
00006d b10c      	IN   R16,12
                 ; 0000 002A if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
00006e 2fe1      	MOV  R30,R17
00006f 71ec      	ANDI R30,LOW(0x1C)
000070 f489      	BRNE _0x3
                 ; 0000 002B    {
                 ; 0000 002C    rx_buffer[rx_wr_index++]=data;
000071 2de5      	MOV  R30,R5
000072 9453      	INC  R5
000073 e0f0      	LDI  R31,0
000074 50e6      	SUBI R30,LOW(-_rx_buffer)
000075 4ffd      	SBCI R31,HIGH(-_rx_buffer)
000076 8300      	ST   Z,R16
                 ; 0000 002D #if RX_BUFFER_SIZE == 256
                 ; 0000 002E    // special case for receiver buffer size=256
                 ; 0000 002F    if (++rx_counter == 0) rx_buffer_overflow=1;
                 ; 0000 0030 #else
                 ; 0000 0031    if (rx_wr_index == RX_BUFFER_SIZE) rx_wr_index=0;
000077 e0e8      	LDI  R30,LOW(8)
000078 15e5      	CP   R30,R5
000079 f409      	BRNE _0x4
00007a 2455      	CLR  R5
                 ; 0000 0032    if (++rx_counter == RX_BUFFER_SIZE)
                 _0x4:
00007b 9473      	INC  R7
00007c e0e8      	LDI  R30,LOW(8)
00007d 15e7      	CP   R30,R7
00007e f419      	BRNE _0x5
                 ; 0000 0033       {
                 ; 0000 0034       rx_counter=0;
00007f 2477      	CLR  R7
                 ; 0000 0035       rx_buffer_overflow=1;
000080 9468      	SET
000081 f820      	BLD  R2,0
                 ; 0000 0036       }
                 ; 0000 0037 #endif
                 ; 0000 0038    }
                 _0x5:
                 ; 0000 0039 }
                 _0x3:
000082 9109      	LD   R16,Y+
000083 9119      	LD   R17,Y+
000084 91e9      	LD   R30,Y+
000085 bfef      	OUT  SREG,R30
000086 91f9      	LD   R31,Y+
000087 91e9      	LD   R30,Y+
000088 9518      	RETI
                 ; .FEND
                 ;
                 ;#ifndef _DEBUG_TERMINAL_IO_
                 ;// Get a character from the USART Receiver buffer
                 ;#define _ALTERNATE_GETCHAR_
                 ;#pragma used+
                 ;char getchar(void)
                 ; 0000 0040 {
                 ; 0000 0041 char data;
                 ; 0000 0042 while (rx_counter==0);
                 ;	data -> R17
                 ; 0000 0043 data=rx_buffer[rx_rd_index++];
                 ; 0000 0044 #if RX_BUFFER_SIZE != 256
                 ; 0000 0045 if (rx_rd_index == RX_BUFFER_SIZE) rx_rd_index=0;
                 ; 0000 0046 #endif
                 ; 0000 0047 #asm("cli")
                 ; 0000 0048 --rx_counter;
                 ; 0000 0049 #asm("sei")
                 ; 0000 004A return data;
                 ; 0000 004B }
                 ;#pragma used-
                 ;#endif
                 ;
                 ;// Standard Input/Output functions
                 ;#include <stdio.h>
                 ;
                 ;// Global variables
                 ;
                 ;void main(void)
                 ; 0000 0055 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0056 // Declare your local variables here
                 ; 0000 0057 int i;
                 ; 0000 0058 unsigned char write_data[] = {'M', '.', ' ', 'A', 'R', 'I', 'E', 'F', ' ', 'F', '.', '.', '.', '.', '.', '.'};
                 ; 0000 0059 
                 ; 0000 005A // Input/Output Ports initialization
                 ; 0000 005B // Port B initialization
                 ; 0000 005C // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 005D DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
000089 9760      	SBIW R28,16
00008a e180      	LDI  R24,16
00008b e0a0      	LDI  R26,LOW(0)
00008c e0b0      	LDI  R27,HIGH(0)
00008d e3ee      	LDI  R30,LOW(_0xA*2)
00008e e0f0      	LDI  R31,HIGH(_0xA*2)
00008f d4d5      	RCALL __INITLOCB
                 ;	i -> R16,R17
                 ;	write_data -> Y+0
000090 e0e0      	LDI  R30,LOW(0)
000091 bbe7      	OUT  0x17,R30
                 ; 0000 005E // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 005F PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (1<<PORTB1) | (0<<PORTB0);
000092 e0e2      	LDI  R30,LOW(2)
000093 bbe8      	OUT  0x18,R30
                 ; 0000 0060 
                 ; 0000 0061 // Port C initialization
                 ; 0000 0062 // Function: Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0063 DDRC=(0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
000094 e0e0      	LDI  R30,LOW(0)
000095 bbe4      	OUT  0x14,R30
                 ; 0000 0064 // State: Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0065 PORTC=(0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
000096 bbe5      	OUT  0x15,R30
                 ; 0000 0066 
                 ; 0000 0067 // Port D initialization
                 ; 0000 0068 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=Out Bit2=In Bit1=In Bit0=In
                 ; 0000 0069 DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (1<<DDD3) | (1<<DDD2) | (0<<DDD1) | (0<<DDD0);
000097 e0ec      	LDI  R30,LOW(12)
000098 bbe1      	OUT  0x11,R30
                 ; 0000 006A // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=1 Bit2=T Bit1=T Bit0=T
                 ; 0000 006B PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (1<<PORTD3) | (1<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
000099 bbe2      	OUT  0x12,R30
                 ; 0000 006C 
                 ; 0000 006D // Timer/Counter 0 initialization
                 ; 0000 006E // Clock source: System Clock
                 ; 0000 006F // Clock value: Timer 0 Stopped
                 ; 0000 0070 TCCR0=(0<<CS02) | (0<<CS01) | (0<<CS00);
00009a e0e0      	LDI  R30,LOW(0)
00009b bfe3      	OUT  0x33,R30
                 ; 0000 0071 TCNT0=0x00;
00009c bfe2      	OUT  0x32,R30
                 ; 0000 0072 
                 ; 0000 0073 // Timer/Counter 1 initialization
                 ; 0000 0074 // Clock source: System Clock
                 ; 0000 0075 // Clock value: Timer1 Stopped
                 ; 0000 0076 // Mode: Normal top=0xFFFF
                 ; 0000 0077 // OC1A output: Disconnected
                 ; 0000 0078 // OC1B output: Disconnected
                 ; 0000 0079 // Noise Canceler: Off
                 ; 0000 007A // Input Capture on Falling Edge
                 ; 0000 007B // Timer1 Overflow Interrupt: Off
                 ; 0000 007C // Input Capture Interrupt: Off
                 ; 0000 007D // Compare A Match Interrupt: Off
                 ; 0000 007E // Compare B Match Interrupt: Off
                 ; 0000 007F TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
00009d bdef      	OUT  0x2F,R30
                 ; 0000 0080 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
00009e bdee      	OUT  0x2E,R30
                 ; 0000 0081 TCNT1H=0x00;
00009f bded      	OUT  0x2D,R30
                 ; 0000 0082 TCNT1L=0x00;
0000a0 bdec      	OUT  0x2C,R30
                 ; 0000 0083 ICR1H=0x00;
0000a1 bde7      	OUT  0x27,R30
                 ; 0000 0084 ICR1L=0x00;
0000a2 bde6      	OUT  0x26,R30
                 ; 0000 0085 OCR1AH=0x00;
0000a3 bdeb      	OUT  0x2B,R30
                 ; 0000 0086 OCR1AL=0x00;
0000a4 bdea      	OUT  0x2A,R30
                 ; 0000 0087 OCR1BH=0x00;
0000a5 bde9      	OUT  0x29,R30
                 ; 0000 0088 OCR1BL=0x00;
0000a6 bde8      	OUT  0x28,R30
                 ; 0000 0089 
                 ; 0000 008A // Timer/Counter 2 initialization
                 ; 0000 008B // Clock source: System Clock
                 ; 0000 008C // Clock value: Timer2 Stopped
                 ; 0000 008D // Mode: Normal top=0xFF
                 ; 0000 008E // OC2 output: Disconnected
                 ; 0000 008F ASSR=0<<AS2;
0000a7 bde2      	OUT  0x22,R30
                 ; 0000 0090 TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
0000a8 bde5      	OUT  0x25,R30
                 ; 0000 0091 TCNT2=0x00;
0000a9 bde4      	OUT  0x24,R30
                 ; 0000 0092 OCR2=0x00;
0000aa bde3      	OUT  0x23,R30
                 ; 0000 0093 
                 ; 0000 0094 // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 0095 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<TOIE0);
0000ab bfe9      	OUT  0x39,R30
                 ; 0000 0096 
                 ; 0000 0097 // External Interrupt(s) initialization
                 ; 0000 0098 // INT0: Off
                 ; 0000 0099 // INT1: Off
                 ; 0000 009A MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
0000ac bfe5      	OUT  0x35,R30
                 ; 0000 009B 
                 ; 0000 009C // USART initialization
                 ; 0000 009D // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0000 009E // USART Receiver: On
                 ; 0000 009F // USART Transmitter: On
                 ; 0000 00A0 // USART Mode: Asynchronous
                 ; 0000 00A1 // USART Baud Rate: 9600
                 ; 0000 00A2 UCSRA=(0<<RXC) | (0<<TXC) | (0<<UDRE) | (0<<FE) | (0<<DOR) | (0<<UPE) | (0<<U2X) | (0<<MPCM);
0000ad b9eb      	OUT  0xB,R30
                 ; 0000 00A3 UCSRB=(1<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (1<<RXEN) | (1<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
0000ae e9e8      	LDI  R30,LOW(152)
0000af b9ea      	OUT  0xA,R30
                 ; 0000 00A4 //UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (1<<RXEN) | (1<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
                 ; 0000 00A5 UCSRC=(1<<URSEL) | (0<<UMSEL) | (0<<UPM1) | (0<<UPM0) | (0<<USBS) | (1<<UCSZ1) | (1<<UCSZ0) | (0<<UCPOL);
0000b0 e8e6      	LDI  R30,LOW(134)
0000b1 bde0      	OUT  0x20,R30
                 ; 0000 00A6 UBRRH=0x00;
0000b2 e0e0      	LDI  R30,LOW(0)
0000b3 bde0      	OUT  0x20,R30
                 ; 0000 00A7 UBRRL=0x4D;
0000b4 e4ed      	LDI  R30,LOW(77)
0000b5 b9e9      	OUT  0x9,R30
                 ; 0000 00A8 
                 ; 0000 00A9 // Analog Comparator initialization
                 ; 0000 00AA // Analog Comparator: Off
                 ; 0000 00AB // The Analog Comparator's positive input is
                 ; 0000 00AC // connected to the AIN0 pin
                 ; 0000 00AD // The Analog Comparator's negative input is
                 ; 0000 00AE // connected to the AIN1 pin
                 ; 0000 00AF ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
0000b6 e8e0      	LDI  R30,LOW(128)
0000b7 b9e8      	OUT  0x8,R30
                 ; 0000 00B0 SFIOR=(0<<ACME);
0000b8 e0e0      	LDI  R30,LOW(0)
0000b9 bfe0      	OUT  0x30,R30
                 ; 0000 00B1 
                 ; 0000 00B2 // ADC initialization
                 ; 0000 00B3 // ADC disabled
                 ; 0000 00B4 ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADFR) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
0000ba b9e6      	OUT  0x6,R30
                 ; 0000 00B5 
                 ; 0000 00B6 // SPI initialization
                 ; 0000 00B7 // SPI disabled
                 ; 0000 00B8 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
0000bb b9ed      	OUT  0xD,R30
                 ; 0000 00B9 
                 ; 0000 00BA // TWI initialization
                 ; 0000 00BB // Mode: TWI Master
                 ; 0000 00BC // Bit Rate: 400 kHz
                 ; 0000 00BD //twi_master_init(400);
                 ; 0000 00BE TWIInit();
0000bc d026      	RCALL _TWIInit
                 ; 0000 00BF 
                 ; 0000 00C0 // Alphanumeric LCD initialization
                 ; 0000 00C1 // Connections are specified in the
                 ; 0000 00C2 // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
                 ; 0000 00C3 // RS - PORTD Bit 6
                 ; 0000 00C4 // RD - PORTD Bit 5
                 ; 0000 00C5 // EN - PORTD Bit 4
                 ; 0000 00C6 // D4 - PORTC Bit 3
                 ; 0000 00C7 // D5 - PORTC Bit 2
                 ; 0000 00C8 // D6 - PORTC Bit 1
                 ; 0000 00C9 // D7 - PORTC Bit 0
                 ; 0000 00CA // Characters/line: 16
                 ; 0000 00CB lcd_init(16);
0000bd e1a0      	LDI  R26,LOW(16)
0000be d242      	RCALL _lcd_init
                 ; 0000 00CC 
                 ; 0000 00CD // Global enable interrupts
                 ; 0000 00CE #asm("sei")
0000bf 9478      	sei
                 ; 0000 00CF //printf("starting");
                 ; 0000 00D0 delay_ms(1000);
0000c0 eea8      	LDI  R26,LOW(1000)
0000c1 e0b3      	LDI  R27,HIGH(1000)
0000c2 d46e      	RCALL _delay_ms
                 ; 0000 00D1 //PN532_begin();
                 ; 0000 00D2 //putchar(255);
                 ; 0000 00D3 PN532_SAM_config();
0000c3 d148      	RCALL _PN532_SAM_config
                 ; 0000 00D4 PN532_get_firmware();
0000c4 d13a      	RCALL _PN532_get_firmware
                 ; 0000 00D5 //tag_data.length = 16;
                 ; 0000 00D6 //memcpy(tag_data.buffer, write_data, 16);
                 ; 0000 00D7 //PN532_write_passive_tag(5, &tag_data);
                 ; 0000 00D8 
                 ; 0000 00D9 while (1)
                 _0xB:
                 ; 0000 00DA       {
                 ; 0000 00DB       // Place your code here
                 ; 0000 00DC //        PN532_read_passive_tag(4);
                 ; 0000 00DD //        for(i = 0; i<tag_data.length; ++i)
                 ; 0000 00DE //        {
                 ; 0000 00DF //          putchar(tag_data.buffer[i]);
                 ; 0000 00E0 //        }
                 ; 0000 00E1         //PN532_read_uid();
                 ; 0000 00E2         PN532_read_passive_tag(4);
0000c5 e0a4      	LDI  R26,LOW(4)
0000c6 d1c1      	RCALL _PN532_read_passive_tag
                 ; 0000 00E3         for(i = 0; i<tag_uid.length; ++i)
                +
0000c7 e000     +LDI R16 , LOW ( 0 )
0000c8 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0xF:
0000c9 d3a6      	RCALL SUBOPT_0x0
0000ca 170e      	CP   R16,R30
0000cb 071f      	CPC  R17,R31
0000cc f48c      	BRGE _0x10
                 ; 0000 00E4         {
                 ; 0000 00E5           printf("%02x", tag_uid.buffer[i]);
                +
0000cd e4ee     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
0000ce e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
0000cf d3a5      	RCALL SUBOPT_0x1
0000d0 e5a6      	LDI  R26,LOW(_tag_uid)
0000d1 e0b2      	LDI  R27,HIGH(_tag_uid)
0000d2 0fa0      	ADD  R26,R16
0000d3 1fb1      	ADC  R27,R17
0000d4 91ec      	LD   R30,X
0000d5 27ff      	CLR  R31
0000d6 2766      	CLR  R22
0000d7 2777      	CLR  R23
0000d8 d472      	RCALL __PUTPARD1
0000d9 e084      	LDI  R24,4
0000da d377      	RCALL _printf
0000db 9626      	ADIW R28,6
                 ; 0000 00E6         }
0000dc d39b      	RCALL SUBOPT_0x2
0000dd cfeb      	RJMP _0xF
                 _0x10:
                 ; 0000 00E7         delay_ms(500);
0000de efa4      	LDI  R26,LOW(500)
0000df e0b1      	LDI  R27,HIGH(500)
0000e0 d450      	RCALL _delay_ms
                 ; 0000 00E8       }
0000e1 cfe3      	RJMP _0xB
                 ; 0000 00E9 }
                 _0x11:
0000e2 cfff      	RJMP _0x11
                 ; .FEND
                 ;#include "PN532_I2C.h"
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;
                 ;TWI_BUFFER_STRUCT twi_rx;
                 ;TWI_BUFFER_STRUCT twi_tx;
                 ;TWI_BUFFER_STRUCT PN532_msg;
                 ;TWI_BUFFER_STRUCT tag_uid;
                 ;TWI_BUFFER_STRUCT tag_data;
                 ;
                 ;unsigned char MIFARE_Key_A[] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
                 
                 	.DSEG
                 ;unsigned char checksum;
                 ;int i;
                 ;
                 ;void TWIInit(void)
                 ; 0001 000E {
                 
                 	.CSEG
                 _TWIInit:
                 ; .FSTART _TWIInit
                 ; 0001 000F     //set SCL to 100kHz
                 ; 0001 0010     TWSR = 0x00;
0000e3 e0e0      	LDI  R30,LOW(0)
0000e4 b9e1      	OUT  0x1,R30
                 ; 0001 0011     TWBR = 7;   //347,826
0000e5 e0e7      	LDI  R30,LOW(7)
0000e6 b9e0      	OUT  0x0,R30
                 ; 0001 0012     //enable TWI
                 ; 0001 0013     TWCR = (1<<TWEN);
0000e7 e0e4      	LDI  R30,LOW(4)
0000e8 c007      	RJMP _0x2080005
                 ; 0001 0014 }
                 ; .FEND
                 ;
                 ;void TWIStart(void)
                 ; 0001 0017 {
                 _TWIStart:
                 ; .FSTART _TWIStart
                 ; 0001 0018     TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
0000e9 eae4      	LDI  R30,LOW(164)
0000ea bfe6      	OUT  0x36,R30
                 ; 0001 0019     while ((TWCR & (1<<TWINT)) == 0);
                 _0x20004:
0000eb b7e6      	IN   R30,0x36
0000ec ffe7      	SBRS R30,7
0000ed cffd      	RJMP _0x20004
                 ; 0001 001A }
0000ee 9508      	RET
                 ; .FEND
                 ;
                 ;void TWIStop(void)
                 ; 0001 001D {
                 _TWIStop:
                 ; .FSTART _TWIStop
                 ; 0001 001E     TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
0000ef e9e4      	LDI  R30,LOW(148)
                 _0x2080005:
0000f0 bfe6      	OUT  0x36,R30
                 ; 0001 001F }
0000f1 9508      	RET
                 ; .FEND
                 ;
                 ;void TWIWrite(unsigned char u8data)
                 ; 0001 0022 {
                 _TWIWrite:
                 ; .FSTART _TWIWrite
                 ; 0001 0023     TWDR = u8data;
0000f2 93aa      	ST   -Y,R26
                 ;	u8data -> Y+0
0000f3 81e8      	LD   R30,Y
0000f4 b9e3      	OUT  0x3,R30
                 ; 0001 0024     TWCR = (1<<TWINT)|(1<<TWEN);
0000f5 e8e4      	LDI  R30,LOW(132)
0000f6 bfe6      	OUT  0x36,R30
                 ; 0001 0025     while ((TWCR & (1<<TWINT)) == 0);
                 _0x20007:
0000f7 b7e6      	IN   R30,0x36
0000f8 ffe7      	SBRS R30,7
0000f9 cffd      	RJMP _0x20007
                 ; 0001 0026 }
0000fa c233      	RJMP _0x2080001
                 ; .FEND
                 ;
                 ;//read byte with ACK (Set TWEA, clear TWEA to send NACK, indicating master receiver has read the last byte)
                 ;unsigned char TWIRead(int ack)
                 ; 0001 002A {
                 _TWIRead:
                 ; .FSTART _TWIRead
                 ; 0001 002B     TWCR = (1<<TWINT)|(1<<TWEN)|(ack<<TWEA);
0000fb d37f      	RCALL SUBOPT_0x3
                 ;	ack -> Y+0
0000fc 81e8      	LD   R30,Y
0000fd 95e2      	SWAP R30
0000fe 7fe0      	ANDI R30,0xF0
0000ff 0fee      	LSL  R30
000100 0fee      	LSL  R30
000101 68e4      	ORI  R30,LOW(0x84)
000102 bfe6      	OUT  0x36,R30
                 ; 0001 002C     while ((TWCR & (1<<TWINT)) == 0);
                 _0x2000A:
000103 b7e6      	IN   R30,0x36
000104 ffe7      	SBRS R30,7
000105 cffd      	RJMP _0x2000A
                 ; 0001 002D     return TWDR;
000106 b1e3      	IN   R30,0x3
000107 c00f      	RJMP _0x2080004
                 ; 0001 002E }
                 ; .FEND
                 ;
                 ;void PN532_cmd(TWI_BUFFER_STRUCT* msg)
                 ; 0001 0031 {
                 _PN532_cmd:
                 ; .FSTART _PN532_cmd
                 ; 0001 0032   TWIStart();
000108 d372      	RCALL SUBOPT_0x3
                 ;	*msg -> Y+0
000109 dfdf      	RCALL _TWIStart
                 ; 0001 0033   TWIWrite(PN532_ADD);
00010a e4a8      	LDI  R26,LOW(72)
00010b dfe6      	RCALL _TWIWrite
                 ; 0001 0034   for(i = 0; i < msg->length; ++i){
00010c d371      	RCALL SUBOPT_0x4
                 _0x2000E:
00010d d373      	RCALL SUBOPT_0x5
00010e d375      	RCALL SUBOPT_0x6
00010f d377      	RCALL SUBOPT_0x7
000110 f42c      	BRGE _0x2000F
                 ; 0001 0035     TWIWrite(msg->buffer[i]);
000111 d379      	RCALL SUBOPT_0x8
000112 91ac      	LD   R26,X
000113 dfde      	RCALL _TWIWrite
                 ; 0001 0036   }
000114 d37b      	RCALL SUBOPT_0x9
000115 cff7      	RJMP _0x2000E
                 _0x2000F:
                 ; 0001 0037   TWIStop();
000116 dfd8      	RCALL _TWIStop
                 ; 0001 0038 }
                 _0x2080004:
000117 9622      	ADIW R28,2
000118 9508      	RET
                 ; .FEND
                 ;
                 ;void PN532_build_msg(TWI_BUFFER_STRUCT* buffer, TWI_BUFFER_STRUCT* msg)
                 ; 0001 003B {
                 _PN532_build_msg:
                 ; .FSTART _PN532_build_msg
                 ; 0001 003C   int msg_length = 0;
                 ; 0001 003D   checksum = 0xD4;
000119 d361      	RCALL SUBOPT_0x3
00011a d440      	RCALL __SAVELOCR2
                 ;	*buffer -> Y+4
                 ;	*msg -> Y+2
                 ;	msg_length -> R16,R17
                +
00011b e000     +LDI R16 , LOW ( 0 )
00011c e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
00011d ede4      	LDI  R30,LOW(212)
00011e 2e6e      	MOV  R6,R30
                 ; 0001 003E 
                 ; 0001 003F   buffer->buffer[PN532_START]=0x00;                     ++msg_length;
00011f d374      	RCALL SUBOPT_0xA
000120 e0e0      	LDI  R30,LOW(0)
000121 d375      	RCALL SUBOPT_0xB
                 ; 0001 0040   buffer->buffer[PN532_START+1]=0xFF;                   ++msg_length;
000122 d371      	RCALL SUBOPT_0xA
000123 9611      	ADIW R26,1
000124 efef      	LDI  R30,LOW(255)
000125 d371      	RCALL SUBOPT_0xB
                 ; 0001 0041   buffer->buffer[PN532_LEN]=msg->length+1;               ++msg_length;
000126 d372      	RCALL SUBOPT_0xC
                +
000127 81ac     +LDD R26 , Y + 4
000128 81bd     +LDD R27 , Y + 4 + 1
000129 9612     +ADIW R26 , 2
00012a 93ec     +ST X , R30
                 	__PUTB1SNS 4,2
00012b d34c      	RCALL SUBOPT_0x2
                 ; 0001 0042   buffer->buffer[PN532_LCS]=(~(msg->length+1))+1;        ++msg_length;
00012c d36c      	RCALL SUBOPT_0xC
00012d 95e1      	NEG  R30
                +
00012e 81ac     +LDD R26 , Y + 4
00012f 81bd     +LDD R27 , Y + 4 + 1
000130 9613     +ADIW R26 , 3
000131 93ec     +ST X , R30
                 	__PUTB1SNS 4,3
000132 d345      	RCALL SUBOPT_0x2
                 ; 0001 0043   buffer->buffer[PN532_TFI]=0xD4;                       ++msg_length;
000133 d360      	RCALL SUBOPT_0xA
000134 9614      	ADIW R26,4
000135 ede4      	LDI  R30,LOW(212)
000136 d360      	RCALL SUBOPT_0xB
                 ; 0001 0044   for(i = 0; i<msg->length; ++i){
000137 d346      	RCALL SUBOPT_0x4
                 _0x20011:
000138 d366      	RCALL SUBOPT_0xD
000139 d34a      	RCALL SUBOPT_0x6
00013a d34c      	RCALL SUBOPT_0x7
00013b f464      	BRGE _0x20012
                 ; 0001 0045     buffer->buffer[PN532_DATA+i]=msg->buffer[i];              ++msg_length;
00013c 01f4      	MOVW R30,R8
00013d 9635      	ADIW R30,5
00013e d355      	RCALL SUBOPT_0xA
00013f d362      	RCALL SUBOPT_0xE
000140 010f      	MOVW R0,R30
000141 d363      	RCALL SUBOPT_0xF
000142 01d0      	MOVW R26,R0
000143 d353      	RCALL SUBOPT_0xB
                 ; 0001 0046     checksum += msg->buffer[i];
000144 d360      	RCALL SUBOPT_0xF
000145 0e6e      	ADD  R6,R30
                 ; 0001 0047   }
000146 d349      	RCALL SUBOPT_0x9
000147 cff0      	RJMP _0x20011
                 _0x20012:
                 ; 0001 0048   buffer->buffer[PN532_DATA+i]= (~(checksum&0xFF))+1;   ++msg_length;
000148 01f4      	MOVW R30,R8
000149 9635      	ADIW R30,5
00014a d349      	RCALL SUBOPT_0xA
00014b 0fae      	ADD  R26,R30
00014c 1fbf      	ADC  R27,R31
00014d 2de6      	MOV  R30,R6
00014e 95e1      	NEG  R30
00014f d347      	RCALL SUBOPT_0xB
                 ; 0001 0049   buffer->length = msg_length;
000150 01f8      	MOVW R30,R16
                +
000151 81ac     +LDD R26 , Y + 4
000152 81bd     +LDD R27 , Y + 4 + 1
000153 5ba0     +SUBI R26 , LOW ( - 80 )
000154 4fbf     +SBCI R27 , HIGH ( - 80 )
000155 93ed     +ST X + , R30
000156 93fc     +ST X , R31
                 	__PUTW1SN 4,80
                 ; 0001 004A }
000157 d40a      	RCALL __LOADLOCR2
000158 9626      	ADIW R28,6
000159 9508      	RET
                 ; .FEND
                 ;
                 ;bool PN532_read(TWI_BUFFER_STRUCT* dest)
                 ; 0001 004D {
                 _PN532_read:
                 ; .FSTART _PN532_read
                 ; 0001 004E   unsigned char data = 0x00;
                 ; 0001 004F   unsigned char len = 0x00;
                 ; 0001 0050   // check ready bit
                 ; 0001 0051   while(1){
00015a d320      	RCALL SUBOPT_0x3
00015b d3ff      	RCALL __SAVELOCR2
                 ;	*dest -> Y+2
                 ;	data -> R17
                 ;	len -> R16
00015c e010      	LDI  R17,0
00015d e000      	LDI  R16,0
                 _0x20013:
                 ; 0001 0052     TWIStart();
00015e d34c      	RCALL SUBOPT_0x10
                 ; 0001 0053     TWIWrite(PN532_ADD | 1);
                 ; 0001 0054     data = TWIRead(1);
                 ; 0001 0055     if(data==0x00) TWIStop();
00015f f411      	BRNE _0x20016
000160 df8e      	RCALL _TWIStop
                 ; 0001 0056     else if(data==0x01) break;
000161 c002      	RJMP _0x20017
                 _0x20016:
000162 3011      	CPI  R17,1
000163 f009      	BREQ _0x20015
                 ; 0001 0057   }
                 _0x20017:
000164 cff9      	RJMP _0x20013
                 _0x20015:
                 ; 0001 0058   // get rid of preamble
                 ; 0001 0059   TWIRead(1);
000165 d34e      	RCALL SUBOPT_0x11
                 ; 0001 005A   //check start of packet
                 ; 0001 005B   if((data=TWIRead(1))!=0x00) {TWIStop(); return false;}
000166 d34d      	RCALL SUBOPT_0x11
000167 2f1e      	MOV  R17,R30
000168 30e0      	CPI  R30,0
000169 f021      	BREQ _0x20019
00016a df84      	RCALL _TWIStop
00016b e0e0      	LDI  R30,LOW(0)
00016c d3f5      	RCALL __LOADLOCR2
00016d c118      	RJMP _0x2080002
                 ; 0001 005C   dest->buffer[len++]=data;
                 _0x20019:
00016e d348      	RCALL SUBOPT_0x12
                 ; 0001 005D   if((data=TWIRead(1))!=0xFF) {TWIStop(); return false;}
00016f d344      	RCALL SUBOPT_0x11
000170 2f1e      	MOV  R17,R30
000171 3fef      	CPI  R30,LOW(0xFF)
000172 f019      	BREQ _0x2001A
000173 d34a      	RCALL SUBOPT_0x13
000174 d3ed      	RCALL __LOADLOCR2
000175 c110      	RJMP _0x2080002
                 ; 0001 005E   dest->buffer[len++]=data;
                 _0x2001A:
000176 d340      	RCALL SUBOPT_0x12
                 ; 0001 005F 
                 ; 0001 0060   //get length
                 ; 0001 0061   dest->buffer[len++]=TWIRead(1);
000177 d349      	RCALL SUBOPT_0x14
000178 93ff      	PUSH R31
000179 93ef      	PUSH R30
00017a d339      	RCALL SUBOPT_0x11
00017b 91af      	POP  R26
00017c 91bf      	POP  R27
00017d 93ec      	ST   X,R30
                 ; 0001 0062   //get length checksum
                 ; 0001 0063   dest->buffer[len++]=TWIRead(1);
00017e d342      	RCALL SUBOPT_0x14
00017f 93ff      	PUSH R31
000180 93ef      	PUSH R30
000181 d332      	RCALL SUBOPT_0x11
000182 91af      	POP  R26
000183 91bf      	POP  R27
000184 93ec      	ST   X,R30
                 ; 0001 0064   //get TFI (should be D5)
                 ; 0001 0065   dest->buffer[len++]=TWIRead(1);
000185 d33b      	RCALL SUBOPT_0x14
000186 93ff      	PUSH R31
000187 93ef      	PUSH R30
000188 d32b      	RCALL SUBOPT_0x11
000189 91af      	POP  R26
00018a 91bf      	POP  R27
00018b 93ec      	ST   X,R30
                 ; 0001 0066 
                 ; 0001 0067   for(i =0; i < dest->buffer[PN532_LEN]-1; ++i)
00018c d2f1      	RCALL SUBOPT_0x4
                 _0x2001C:
00018d 81ea      	LDD  R30,Y+2
00018e 81fb      	LDD  R31,Y+2+1
00018f 81e2      	LDD  R30,Z+2
000190 e0f0      	LDI  R31,0
000191 9731      	SBIW R30,1
000192 d333      	RCALL SUBOPT_0x15
000193 f44c      	BRGE _0x2001D
                 ; 0001 0068   {
                 ; 0001 0069     dest->buffer[len++] = TWIRead(1);
000194 d32c      	RCALL SUBOPT_0x14
000195 93ff      	PUSH R31
000196 93ef      	PUSH R30
000197 d31c      	RCALL SUBOPT_0x11
000198 91af      	POP  R26
000199 91bf      	POP  R27
00019a 93ec      	ST   X,R30
                 ; 0001 006A   }
00019b d2f4      	RCALL SUBOPT_0x9
00019c cff0      	RJMP _0x2001C
                 _0x2001D:
                 ; 0001 006B 
                 ; 0001 006C   //skip data checksum
                 ; 0001 006D   dest->buffer[len++]=TWIRead(0);
00019d d323      	RCALL SUBOPT_0x14
00019e 93ff      	PUSH R31
00019f 93ef      	PUSH R30
0001a0 e0a0      	LDI  R26,LOW(0)
0001a1 e0b0      	LDI  R27,0
0001a2 df58      	RCALL _TWIRead
0001a3 91af      	POP  R26
0001a4 91bf      	POP  R27
0001a5 93ec      	ST   X,R30
                 ; 0001 006E 
                 ; 0001 006F   //set buffer length
                 ; 0001 0070   dest->length = len;
0001a6 d2f8      	RCALL SUBOPT_0xD
0001a7 d2dc      	RCALL SUBOPT_0x6
0001a8 2fe0      	MOV  R30,R16
0001a9 e0f0      	LDI  R31,0
0001aa 93ed      	ST   X+,R30
0001ab 93fc      	ST   X,R31
                 ; 0001 0071 
                 ; 0001 0072   //close comm
                 ; 0001 0073   TWIStop();
0001ac df42      	RCALL _TWIStop
                 ; 0001 0074 
                 ; 0001 0075   //return true on success
                 ; 0001 0076   return true;
0001ad e0e1      	LDI  R30,LOW(1)
0001ae d3b3      	RCALL __LOADLOCR2
0001af c0d6      	RJMP _0x2080002
                 ; 0001 0077 }
                 ; .FEND
                 ;
                 ;void PN532_get_msg(TWI_BUFFER_STRUCT* src, TWI_BUFFER_STRUCT* dest, unsigned char offset)
                 ; 0001 007A {
                 _PN532_get_msg:
                 ; .FSTART _PN532_get_msg
                 ; 0001 007B   // exclude TFI from src, thus -1
                 ; 0001 007C   dest->length = src->buffer[PN532_LEN]-1-offset;
0001b0 93aa      	ST   -Y,R26
                 ;	*src -> Y+3
                 ;	*dest -> Y+1
                 ;	offset -> Y+0
0001b1 81eb      	LDD  R30,Y+3
0001b2 81fc      	LDD  R31,Y+3+1
0001b3 81e2      	LDD  R30,Z+2
0001b4 e0f0      	LDI  R31,0
0001b5 9731      	SBIW R30,1
0001b6 01df      	MOVW R26,R30
0001b7 81e8      	LD   R30,Y
0001b8 e0f0      	LDI  R31,0
0001b9 d396      	RCALL __SWAPW12
0001ba 1bea      	SUB  R30,R26
0001bb 0bfb      	SBC  R31,R27
                +
0001bc 81a9     +LDD R26 , Y + 1
0001bd 81ba     +LDD R27 , Y + 1 + 1
0001be 5ba0     +SUBI R26 , LOW ( - 80 )
0001bf 4fbf     +SBCI R27 , HIGH ( - 80 )
0001c0 93ed     +ST X + , R30
0001c1 93fc     +ST X , R31
                 	__PUTW1SN 1,80
                 ; 0001 007D   for(i=0; i < dest->length; ++i)
0001c2 d2bb      	RCALL SUBOPT_0x4
                 _0x2001F:
0001c3 81a9      	LDD  R26,Y+1
0001c4 81ba      	LDD  R27,Y+1+1
0001c5 d2be      	RCALL SUBOPT_0x6
0001c6 d2c0      	RCALL SUBOPT_0x7
0001c7 f48c      	BRGE _0x20020
                 ; 0001 007E   {
                 ; 0001 007F     dest->buffer[i] = src->buffer[PN532_DATA+i+offset];
0001c8 01f4      	MOVW R30,R8
0001c9 81a9      	LDD  R26,Y+1
0001ca 81ba      	LDD  R27,Y+1+1
0001cb d2d6      	RCALL SUBOPT_0xE
0001cc 010f      	MOVW R0,R30
0001cd 01d4      	MOVW R26,R8
0001ce 9615      	ADIW R26,5
0001cf 81e8      	LD   R30,Y
0001d0 e0f0      	LDI  R31,0
0001d1 d2d0      	RCALL SUBOPT_0xE
0001d2 81ab      	LDD  R26,Y+3
0001d3 81bc      	LDD  R27,Y+3+1
0001d4 0fae      	ADD  R26,R30
0001d5 1fbf      	ADC  R27,R31
0001d6 d2f2      	RCALL SUBOPT_0x16
                 ; 0001 0080   }
0001d7 d2b8      	RCALL SUBOPT_0x9
0001d8 cfea      	RJMP _0x2001F
                 _0x20020:
                 ; 0001 0081 }
0001d9 9625      	ADIW R28,5
0001da 9508      	RET
                 ; .FEND
                 ;
                 ;bool PN532_wait_for_ack(){
                 ; 0001 0083 _Bool PN532_wait_for_ack(){
                 _PN532_wait_for_ack:
                 ; .FSTART _PN532_wait_for_ack
                 ; 0001 0084   unsigned char data = 0x00;
                 ; 0001 0085   // check ready bit
                 ; 0001 0086   while(1){
0001db 931a      	ST   -Y,R17
                 ;	data -> R17
0001dc e010      	LDI  R17,0
                 _0x20021:
                 ; 0001 0087     TWIStart();
0001dd d2cd      	RCALL SUBOPT_0x10
                 ; 0001 0088     TWIWrite(PN532_ADD | 1);
                 ; 0001 0089     //TWIStart();
                 ; 0001 008A     data = TWIRead(1);
                 ; 0001 008B     if(data==0x00) TWIStop();
0001de f411      	BRNE _0x20024
0001df df0f      	RCALL _TWIStop
                 ; 0001 008C     else if(data==0x01) break;
0001e0 c002      	RJMP _0x20025
                 _0x20024:
0001e1 3011      	CPI  R17,1
0001e2 f009      	BREQ _0x20023
                 ; 0001 008D   }
                 _0x20025:
0001e3 cff9      	RJMP _0x20021
                 _0x20023:
                 ; 0001 008E   // get rid of preamble
                 ; 0001 008F   TWIRead(1);
0001e4 d2cf      	RCALL SUBOPT_0x11
                 ; 0001 0090   //check start of packet
                 ; 0001 0091   if(TWIRead(1)!=0x00) {TWIStop(); return false;}
0001e5 d2ce      	RCALL SUBOPT_0x11
0001e6 30e0      	CPI  R30,0
0001e7 f011      	BREQ _0x20027
0001e8 d2d5      	RCALL SUBOPT_0x13
0001e9 c013      	RJMP _0x2080003
                 ; 0001 0092   if(TWIRead(1)!=0xFF) {TWIStop(); return false;}
                 _0x20027:
0001ea d2c9      	RCALL SUBOPT_0x11
0001eb 3fef      	CPI  R30,LOW(0xFF)
0001ec f011      	BREQ _0x20028
0001ed d2d0      	RCALL SUBOPT_0x13
0001ee c00e      	RJMP _0x2080003
                 ; 0001 0093 
                 ; 0001 0094   //check ack
                 ; 0001 0095   if(TWIRead(1)!=0x00) {TWIStop(); return false;}
                 _0x20028:
0001ef d2c4      	RCALL SUBOPT_0x11
0001f0 30e0      	CPI  R30,0
0001f1 f011      	BREQ _0x20029
0001f2 d2cb      	RCALL SUBOPT_0x13
0001f3 c009      	RJMP _0x2080003
                 ; 0001 0096   if(TWIRead(0)!=0xFF) {TWIStop(); return false;}
                 _0x20029:
0001f4 e0a0      	LDI  R26,LOW(0)
0001f5 e0b0      	LDI  R27,0
0001f6 df04      	RCALL _TWIRead
0001f7 3fef      	CPI  R30,LOW(0xFF)
0001f8 f011      	BREQ _0x2002A
0001f9 d2c4      	RCALL SUBOPT_0x13
0001fa c002      	RJMP _0x2080003
                 ; 0001 0097   TWIStop();
                 _0x2002A:
0001fb def3      	RCALL _TWIStop
                 ; 0001 0098   return true;
0001fc e0e1      	LDI  R30,LOW(1)
                 _0x2080003:
0001fd 9119      	LD   R17,Y+
0001fe 9508      	RET
                 ; 0001 0099 }
                 ; .FEND
                 ;
                 ;void PN532_get_firmware()
                 ; 0001 009C {
                 _PN532_get_firmware:
                 ; .FSTART _PN532_get_firmware
                 ; 0001 009D   PN532_msg.buffer[0]=PN532_CMD_GETFIRMWARE;
0001ff e0e2      	LDI  R30,LOW(2)
000200 d2cc      	RCALL SUBOPT_0x17
                 ; 0001 009E   PN532_msg.length=1;
000201 e0e1      	LDI  R30,LOW(1)
000202 e0f0      	LDI  R31,HIGH(1)
000203 d2cc      	RCALL SUBOPT_0x18
                 ; 0001 009F   PN532_build_msg(&twi_tx, &PN532_msg);
                 ; 0001 00A0   PN532_cmd(&twi_tx);
                 ; 0001 00A1   delay_ms(20);
                 ; 0001 00A2   while(!PN532_wait_for_ack()) delay_ms(20);
                 _0x2002B:
000204 d2db      	RCALL SUBOPT_0x19
000205 f411      	BRNE _0x2002D
000206 d2dc      	RCALL SUBOPT_0x1A
000207 cffc      	RJMP _0x2002B
                 _0x2002D:
                 ; 0001 00A3 delay_ms(20);
000208 d2da      	RCALL SUBOPT_0x1A
                 ; 0001 00A4   PN532_read(&twi_rx);
000209 d2dc      	RCALL SUBOPT_0x1B
                 ; 0001 00A5   PN532_get_msg(&twi_rx, &PN532_msg, 1);
00020a d2e4      	RCALL SUBOPT_0x1C
                 ; 0001 00A6 }
00020b 9508      	RET
                 ; .FEND
                 ;
                 ;bool PN532_SAM_config()
                 ; 0001 00A9 {
                 _PN532_SAM_config:
                 ; .FSTART _PN532_SAM_config
                 ; 0001 00AA   PN532_msg.buffer[0] = PN532_CMD_SAMCONFIGURATION;
00020c e1e4      	LDI  R30,LOW(20)
00020d d2e3      	RCALL SUBOPT_0x1D
                 ; 0001 00AB   PN532_msg.buffer[1] = 0x01; // normal mode;
                 ; 0001 00AC   PN532_msg.buffer[2] = 0x14; // timeout 50ms * 20 = 1 second
00020e e1e4      	LDI  R30,LOW(20)
00020f d2e6      	RCALL SUBOPT_0x1E
                 ; 0001 00AD   PN532_msg.buffer[3] = 0x00; // not using IRQ pin!
000210 e0e0      	LDI  R30,LOW(0)
                +
000211 93e0 0207+STS _PN532_msg + ( 3 ) , R30
                 	__PUTB1MN _PN532_msg,3
                 ; 0001 00AE   PN532_msg.length=4;
000213 e0e4      	LDI  R30,LOW(4)
000214 e0f0      	LDI  R31,HIGH(4)
000215 d2ba      	RCALL SUBOPT_0x18
                 ; 0001 00AF   PN532_build_msg(&twi_tx, &PN532_msg);
                 ; 0001 00B0   PN532_cmd(&twi_tx);
                 ; 0001 00B1   delay_ms(20);
                 ; 0001 00B2   while(!PN532_wait_for_ack()) delay_ms(20);
                 _0x2002E:
000216 d2c9      	RCALL SUBOPT_0x19
000217 f411      	BRNE _0x20030
000218 d2ca      	RCALL SUBOPT_0x1A
000219 cffc      	RJMP _0x2002E
                 _0x20030:
                 ; 0001 00B3 delay_ms(20);
00021a d2c8      	RCALL SUBOPT_0x1A
                 ; 0001 00B4   PN532_read(&twi_rx);
00021b d2ca      	RCALL SUBOPT_0x1B
                 ; 0001 00B5   PN532_get_msg(&twi_rx, &PN532_msg, 0);
00021c e0a0      	LDI  R26,LOW(0)
00021d df92      	RCALL _PN532_get_msg
                 ; 0001 00B6   if(PN532_msg.buffer[0]==0x15) return true;
00021e 91a0 0204 	LDS  R26,_PN532_msg
000220 31a5      	CPI  R26,LOW(0x15)
000221 f411      	BRNE _0x20031
000222 e0e1      	LDI  R30,LOW(1)
000223 9508      	RET
                 ; 0001 00B7   else return false;
                 _0x20031:
000224 e0e0      	LDI  R30,LOW(0)
000225 9508      	RET
                 ; 0001 00B8 }
000226 9508      	RET
                 ; .FEND
                 ;
                 ;void PN532_read_uid()
                 ; 0001 00BB {
                 _PN532_read_uid:
                 ; .FSTART _PN532_read_uid
                 ; 0001 00BC   PN532_msg.buffer[0] = PN532_CMD_INLISTPASSIVETARGET;
000227 e4ea      	LDI  R30,LOW(74)
000228 d2c8      	RCALL SUBOPT_0x1D
                 ; 0001 00BD   PN532_msg.buffer[1] = 1;  // max 1 cards at once
                 ; 0001 00BE   PN532_msg.buffer[2] = PN532_MIFARE_ISO14443A; //baudrate
000229 e0e0      	LDI  R30,LOW(0)
00022a d2cb      	RCALL SUBOPT_0x1E
                 ; 0001 00BF   PN532_msg.length=3;
00022b e0e3      	LDI  R30,LOW(3)
00022c e0f0      	LDI  R31,HIGH(3)
00022d d2a2      	RCALL SUBOPT_0x18
                 ; 0001 00C0   PN532_build_msg(&twi_tx, &PN532_msg);
                 ; 0001 00C1   PN532_cmd(&twi_tx);
                 ; 0001 00C2   delay_ms(20);
                 ; 0001 00C3   while(!PN532_wait_for_ack()) delay_ms(20);
                 _0x20033:
00022e d2b1      	RCALL SUBOPT_0x19
00022f f411      	BRNE _0x20035
000230 d2b2      	RCALL SUBOPT_0x1A
000231 cffc      	RJMP _0x20033
                 _0x20035:
                 ; 0001 00C4 delay_ms(20);
000232 d2b0      	RCALL SUBOPT_0x1A
                 ; 0001 00C5   PN532_read(&twi_rx);
000233 d2b2      	RCALL SUBOPT_0x1B
                 ; 0001 00C6   PN532_get_msg(&twi_rx, &PN532_msg, 1);
000234 d2ba      	RCALL SUBOPT_0x1C
                 ; 0001 00C7   tag_uid.length = PN532_msg.buffer[5];
                +
000235 eaa6     +LDI R26 , LOW ( _tag_uid + ( 80 ) )
000236 e0b2     +LDI R27 , HIGH ( _tag_uid + ( 80 ) )
                 	__POINTW2MN _tag_uid,80
                +
000237 91e0 0209+LDS R30 , _PN532_msg + ( 5 )
                 	__GETB1MN _PN532_msg,5
000239 e0f0      	LDI  R31,0
00023a 93ed      	ST   X+,R30
00023b 93fc      	ST   X,R31
                 ; 0001 00C8   for(i = 0; i<tag_uid.length; ++i)
00023c d241      	RCALL SUBOPT_0x4
                 _0x20037:
00023d d232      	RCALL SUBOPT_0x0
00023e d287      	RCALL SUBOPT_0x15
00023f f454      	BRGE _0x20038
                 ; 0001 00C9   {
                 ; 0001 00CA     tag_uid.buffer[i] = PN532_msg.buffer[6+i];
000240 01d4      	MOVW R26,R8
000241 5aaa      	SUBI R26,LOW(-_tag_uid)
000242 4fbd      	SBCI R27,HIGH(-_tag_uid)
000243 01f4      	MOVW R30,R8
                +
000244 5fe6     +SUBI R30 , LOW ( - _PN532_msg - ( 6 ) )
000245 4ffd     +SBCI R31 , HIGH ( - _PN532_msg - ( 6 ) )
                 	__ADDW1MN _PN532_msg,6
000246 81e0      	LD   R30,Z
000247 93ec      	ST   X,R30
                 ; 0001 00CB   }
000248 d247      	RCALL SUBOPT_0x9
000249 cff3      	RJMP _0x20037
                 _0x20038:
                 ; 0001 00CC }
00024a 9508      	RET
                 ; .FEND
                 ;
                 ;bool PN532_auth_tag(unsigned char block_number, unsigned char key_select, unsigned char* key_buffer)
                 ; 0001 00CF {
                 _PN532_auth_tag:
                 ; .FSTART _PN532_auth_tag
                 ; 0001 00D0   PN532_read_uid();
00024b d22f      	RCALL SUBOPT_0x3
                 ;	block_number -> Y+3
                 ;	key_select -> Y+2
                 ;	*key_buffer -> Y+0
00024c dfda      	RCALL _PN532_read_uid
                 ; 0001 00D1   PN532_msg.buffer[0] = PN532_CMD_INDATAEXCHANGE;
00024d e4e0      	LDI  R30,LOW(64)
00024e d2a2      	RCALL SUBOPT_0x1D
                 ; 0001 00D2   PN532_msg.buffer[1] = 1;                              /* Max card numbers */
                 ; 0001 00D3   PN532_msg.buffer[2] = (key_select) ? MIFARE_CMD_AUTH_B : MIFARE_CMD_AUTH_A;
00024f 81ea      	LDD  R30,Y+2
000250 30e0      	CPI  R30,0
000251 f011      	BREQ _0x20039
000252 e6e1      	LDI  R30,LOW(97)
000253 c001      	RJMP _0x2003A
                 _0x20039:
000254 e6e0      	LDI  R30,LOW(96)
                 _0x2003A:
000255 d2a0      	RCALL SUBOPT_0x1E
                 ; 0001 00D4   PN532_msg.buffer[3] = block_number;                    /* Block Number (1K = 0..63, 4K = 0..255 */
000256 81eb      	LDD  R30,Y+3
                +
000257 93e0 0207+STS _PN532_msg + ( 3 ) , R30
                 	__PUTB1MN _PN532_msg,3
                 ; 0001 00D5   for (i = 0; i < 6; ++i)
000259 d224      	RCALL SUBOPT_0x4
                 _0x2003D:
00025a e0e6      	LDI  R30,LOW(6)
00025b e0f0      	LDI  R31,HIGH(6)
00025c d269      	RCALL SUBOPT_0x15
00025d f444      	BRGE _0x2003E
                 ; 0001 00D6   {
                 ; 0001 00D7     PN532_msg.buffer[4+i] = key_buffer[i];                /* 6 byte auth key */
00025e 01f4      	MOVW R30,R8
                +
00025f 5fe8     +SUBI R30 , LOW ( - _PN532_msg - ( 4 ) )
000260 4ffd     +SBCI R31 , HIGH ( - _PN532_msg - ( 4 ) )
                 	__ADDW1MN _PN532_msg,4
000261 010f      	MOVW R0,R30
000262 d228      	RCALL SUBOPT_0x8
000263 d265      	RCALL SUBOPT_0x16
                 ; 0001 00D8   }
000264 d22b      	RCALL SUBOPT_0x9
000265 cff4      	RJMP _0x2003D
                 _0x2003E:
                 ; 0001 00D9   for (i = 0; i < tag_uid.length; ++i)
000266 d217      	RCALL SUBOPT_0x4
                 _0x20040:
000267 d208      	RCALL SUBOPT_0x0
000268 d25d      	RCALL SUBOPT_0x15
000269 f45c      	BRGE _0x20041
                 ; 0001 00DA   {
                 ; 0001 00DB     PN532_msg.buffer[10+i] = tag_uid.buffer[i];                /* 4 byte card ID */
00026a 01f4      	MOVW R30,R8
                +
00026b 5fe2     +SUBI R30 , LOW ( - _PN532_msg - ( 10 ) )
00026c 4ffd     +SBCI R31 , HIGH ( - _PN532_msg - ( 10 ) )
                 	__ADDW1MN _PN532_msg,10
00026d 010f      	MOVW R0,R30
00026e e5a6      	LDI  R26,LOW(_tag_uid)
00026f e0b2      	LDI  R27,HIGH(_tag_uid)
000270 0da8      	ADD  R26,R8
000271 1db9      	ADC  R27,R9
000272 d256      	RCALL SUBOPT_0x16
                 ; 0001 00DC   }
000273 d21c      	RCALL SUBOPT_0x9
000274 cff2      	RJMP _0x20040
                 _0x20041:
                 ; 0001 00DD   PN532_msg.length = 10+tag_uid.length;
000275 d1fa      	RCALL SUBOPT_0x0
000276 963a      	ADIW R30,10
000277 d258      	RCALL SUBOPT_0x18
                 ; 0001 00DE 
                 ; 0001 00DF   PN532_build_msg(&twi_tx, &PN532_msg);
                 ; 0001 00E0   PN532_cmd(&twi_tx);
                 ; 0001 00E1   delay_ms(20);
                 ; 0001 00E2   while(!PN532_wait_for_ack()) delay_ms(20);
                 _0x20042:
000278 d267      	RCALL SUBOPT_0x19
000279 f411      	BRNE _0x20044
00027a d268      	RCALL SUBOPT_0x1A
00027b cffc      	RJMP _0x20042
                 _0x20044:
                 ; 0001 00E3 delay_ms(20);
00027c d266      	RCALL SUBOPT_0x1A
                 ; 0001 00E4   PN532_read(&twi_rx);
00027d d268      	RCALL SUBOPT_0x1B
                 ; 0001 00E5   PN532_get_msg(&twi_rx, &PN532_msg, 1);
00027e d270      	RCALL SUBOPT_0x1C
                 ; 0001 00E6   if(PN532_msg.buffer[0] != 0x00) return false;
00027f 91e0 0204 	LDS  R30,_PN532_msg
000281 30e0      	CPI  R30,0
000282 f011      	BREQ _0x20045
000283 e0e0      	LDI  R30,LOW(0)
000284 c001      	RJMP _0x2080002
                 ; 0001 00E7   return true;
                 _0x20045:
000285 e0e1      	LDI  R30,LOW(1)
                 _0x2080002:
000286 9624      	ADIW R28,4
000287 9508      	RET
                 ; 0001 00E8 }
                 ; .FEND
                 ;
                 ;bool PN532_read_passive_tag(unsigned char block_number)
                 ; 0001 00EB {
                 _PN532_read_passive_tag:
                 ; .FSTART _PN532_read_passive_tag
                 ; 0001 00EC   if(!PN532_auth_tag(block_number, 0, MIFARE_Key_A)) return false;
000288 93aa      	ST   -Y,R26
                 ;	block_number -> Y+0
000289 81e8      	LD   R30,Y
00028a 93ea      	ST   -Y,R30
00028b e0e0      	LDI  R30,LOW(0)
00028c 93ea      	ST   -Y,R30
00028d e0a2      	LDI  R26,LOW(_MIFARE_Key_A)
00028e e0b3      	LDI  R27,HIGH(_MIFARE_Key_A)
00028f dfbb      	RCALL _PN532_auth_tag
000290 30e0      	CPI  R30,0
000291 f411      	BRNE _0x20046
000292 e0e0      	LDI  R30,LOW(0)
000293 c09a      	RJMP _0x2080001
                 ; 0001 00ED   PN532_msg.buffer[0] = PN532_CMD_INDATAEXCHANGE;
                 _0x20046:
000294 e4e0      	LDI  R30,LOW(64)
000295 d25b      	RCALL SUBOPT_0x1D
                 ; 0001 00EE   PN532_msg.buffer[1] = 1;                              /* Max card numbers */
                 ; 0001 00EF   PN532_msg.buffer[2] = MIFARE_CMD_READ;
000296 e3e0      	LDI  R30,LOW(48)
000297 d25e      	RCALL SUBOPT_0x1E
                 ; 0001 00F0   PN532_msg.buffer[3] = block_number;                    /* Block Number (1K = 0..63, 4K = 0..255 */
000298 81e8      	LD   R30,Y
                +
000299 93e0 0207+STS _PN532_msg + ( 3 ) , R30
                 	__PUTB1MN _PN532_msg,3
                 ; 0001 00F1   PN532_msg.length = 4;
00029b e0e4      	LDI  R30,LOW(4)
00029c e0f0      	LDI  R31,HIGH(4)
00029d d232      	RCALL SUBOPT_0x18
                 ; 0001 00F2 
                 ; 0001 00F3   PN532_build_msg(&twi_tx, &PN532_msg);
                 ; 0001 00F4   PN532_cmd(&twi_tx);
                 ; 0001 00F5   delay_ms(20);
                 ; 0001 00F6   while(!PN532_wait_for_ack()) delay_ms(20);
                 _0x20047:
00029e d241      	RCALL SUBOPT_0x19
00029f f411      	BRNE _0x20049
0002a0 d242      	RCALL SUBOPT_0x1A
0002a1 cffc      	RJMP _0x20047
                 _0x20049:
                 ; 0001 00F7 delay_ms(20);
0002a2 d240      	RCALL SUBOPT_0x1A
                 ; 0001 00F8   PN532_read(&twi_rx);
0002a3 d242      	RCALL SUBOPT_0x1B
                 ; 0001 00F9   PN532_get_msg(&twi_rx, &PN532_msg, 1);
0002a4 d24a      	RCALL SUBOPT_0x1C
                 ; 0001 00FA   if(PN532_msg.buffer[0] != 0x00) return false;
0002a5 91e0 0204 	LDS  R30,_PN532_msg
0002a7 30e0      	CPI  R30,0
0002a8 f011      	BREQ _0x2004A
0002a9 e0e0      	LDI  R30,LOW(0)
0002aa c083      	RJMP _0x2080001
                 ; 0001 00FB   PN532_get_msg(&twi_rx, &tag_data, 2);
                 _0x2004A:
0002ab e6e0      	LDI  R30,LOW(_twi_rx)
0002ac e0f1      	LDI  R31,HIGH(_twi_rx)
0002ad d1c7      	RCALL SUBOPT_0x1
0002ae eae8      	LDI  R30,LOW(_tag_data)
0002af e0f2      	LDI  R31,HIGH(_tag_data)
0002b0 d1c4      	RCALL SUBOPT_0x1
0002b1 e0a2      	LDI  R26,LOW(2)
0002b2 defd      	RCALL _PN532_get_msg
                 ; 0001 00FC   return true;
0002b3 e0e1      	LDI  R30,LOW(1)
0002b4 c079      	RJMP _0x2080001
                 ; 0001 00FD }
                 ; .FEND
                 ;
                 ;bool PN532_write_passive_tag(unsigned char block_number, TWI_BUFFER_STRUCT* data)
                 ; 0001 0100 {
                 ; 0001 0101   if(!PN532_auth_tag(block_number, 0, MIFARE_Key_A)) return false;
                 ;	block_number -> Y+2
                 ;	*data -> Y+0
                 ; 0001 0102   PN532_msg.buffer[0] = PN532_CMD_INDATAEXCHANGE;
                 ; 0001 0103   PN532_msg.buffer[1] = 1;                              /* Max card numbers */
                 ; 0001 0104   PN532_msg.buffer[2] = MIFARE_CMD_WRITE;
                 ; 0001 0105   PN532_msg.buffer[3] = block_number;                    /* Block Number (1K = 0..63, 4K = 0..255 */
                 ; 0001 0106   for (i = 0; i < data->length && i < 16; ++i)
                 ; 0001 0107   {
                 ; 0001 0108     PN532_msg.buffer[4+i] = data->buffer[i];                /* 16 byte data */
                 ; 0001 0109   }
                 ; 0001 010A   PN532_msg.length = 4+i;
                 ; 0001 010B 
                 ; 0001 010C   PN532_build_msg(&twi_tx, &PN532_msg);
                 ; 0001 010D   PN532_cmd(&twi_tx);
                 ; 0001 010E   delay_ms(20);
                 ; 0001 010F   while(!PN532_wait_for_ack()) delay_ms(20);
                 ; 0001 0110 delay_ms(20);
                 ; 0001 0111   PN532_read(&twi_rx);
                 ; 0001 0112   PN532_get_msg(&twi_rx, &PN532_msg, 1);
                 ; 0001 0113   if(PN532_msg.buffer[0] != 0x00) return false;
                 ; 0001 0114   PN532_get_msg(&twi_rx, &tag_data, 2);
                 ; 0001 0115   return true;
                 ; 0001 0116 }
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
0002b5 d1c5      	RCALL SUBOPT_0x3
0002b6 91a9          ld   r26,y+
0002b7 91b9          ld   r27,y+
0002b8 27ee          clr  r30
0002b9 27ff          clr  r31
                 strlen0:
0002ba 916d          ld   r22,x+
0002bb 2366          tst  r22
0002bc f011          breq strlen1
0002bd 9631          adiw r30,1
0002be cffb          rjmp strlen0
                 strlen1:
0002bf 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
0002c0 d1ba      	RCALL SUBOPT_0x3
0002c1 27aa          clr  r26
0002c2 27bb          clr  r27
0002c3 91e9          ld   r30,y+
0002c4 91f9          ld   r31,y+
                 strlenf0:
0002c5 9005      	lpm  r0,z+
0002c6 2000          tst  r0
0002c7 f011          breq strlenf1
0002c8 9611          adiw r26,1
0002c9 cffb          rjmp strlenf0
                 strlenf1:
0002ca 01fd          movw r30,r26
0002cb 9508          ret
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G101:
                 ; .FSTART __lcd_write_nibble_G101
0002cc 93aa      	ST   -Y,R26
0002cd 81e8      	LD   R30,Y
0002ce 71e0      	ANDI R30,LOW(0x10)
0002cf f011      	BREQ _0x2020004
0002d0 9aab      	SBI  0x15,3
0002d1 c001      	RJMP _0x2020005
                 _0x2020004:
0002d2 98ab      	CBI  0x15,3
                 _0x2020005:
0002d3 81e8      	LD   R30,Y
0002d4 72e0      	ANDI R30,LOW(0x20)
0002d5 f011      	BREQ _0x2020006
0002d6 9aaa      	SBI  0x15,2
0002d7 c001      	RJMP _0x2020007
                 _0x2020006:
0002d8 98aa      	CBI  0x15,2
                 _0x2020007:
0002d9 81e8      	LD   R30,Y
0002da 74e0      	ANDI R30,LOW(0x40)
0002db f011      	BREQ _0x2020008
0002dc 9aa9      	SBI  0x15,1
0002dd c001      	RJMP _0x2020009
                 _0x2020008:
0002de 98a9      	CBI  0x15,1
                 _0x2020009:
0002df 81e8      	LD   R30,Y
0002e0 78e0      	ANDI R30,LOW(0x80)
0002e1 f011      	BREQ _0x202000A
0002e2 9aa8      	SBI  0x15,0
0002e3 c001      	RJMP _0x202000B
                 _0x202000A:
0002e4 98a8      	CBI  0x15,0
                 _0x202000B:
0002e5 d213      	RCALL SUBOPT_0x1F
0002e6 9a94      	SBI  0x12,4
0002e7 d211      	RCALL SUBOPT_0x1F
0002e8 9894      	CBI  0x12,4
0002e9 d20f      	RCALL SUBOPT_0x1F
0002ea c043      	RJMP _0x2080001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
0002eb 93aa      	ST   -Y,R26
0002ec 81a8      	LD   R26,Y
0002ed dfde      	RCALL __lcd_write_nibble_G101
0002ee 81e8          ld    r30,y
0002ef 95e2          swap  r30
0002f0 83e8          st    y,r30
0002f1 81a8      	LD   R26,Y
0002f2 dfd9      	RCALL __lcd_write_nibble_G101
                +
0002f3 ec88     +LDI R24 , LOW ( 200 )
                +__DELAY_USB_LOOP :
0002f4 958a     +DEC R24
0002f5 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 200
0002f6 c037      	RJMP _0x2080001
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
0002f7 e0a2      	LDI  R26,LOW(2)
0002f8 d204      	RCALL SUBOPT_0x20
0002f9 e0ac      	LDI  R26,LOW(12)
0002fa dff0      	RCALL __lcd_write_data
0002fb e0a1      	LDI  R26,LOW(1)
0002fc d200      	RCALL SUBOPT_0x20
0002fd e0e0      	LDI  R30,LOW(0)
0002fe 2eae      	MOV  R10,R30
0002ff 2ebe      	MOV  R11,R30
000300 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
000301 93aa      	ST   -Y,R26
000302 9aa3      	SBI  0x14,3
000303 9aa2      	SBI  0x14,2
000304 9aa1      	SBI  0x14,1
000305 9aa0      	SBI  0x14,0
000306 9a8c      	SBI  0x11,4
000307 9a8e      	SBI  0x11,6
000308 9a8d      	SBI  0x11,5
000309 9894      	CBI  0x12,4
00030a 9896      	CBI  0x12,6
00030b 9895      	CBI  0x12,5
00030c 80d8      	LDD  R13,Y+0
00030d 81e8      	LD   R30,Y
00030e 58e0      	SUBI R30,-LOW(128)
                +
00030f 93e0 030a+STS __base_y_G101 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G101,2
000311 81e8      	LD   R30,Y
000312 54e0      	SUBI R30,-LOW(192)
                +
000313 93e0 030b+STS __base_y_G101 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G101,3
000315 d1cd      	RCALL SUBOPT_0x1A
000316 d1ea      	RCALL SUBOPT_0x21
000317 d1e9      	RCALL SUBOPT_0x21
000318 d1e8      	RCALL SUBOPT_0x21
000319 e2a0      	LDI  R26,LOW(32)
00031a dfb1      	RCALL __lcd_write_nibble_G101
                +
00031b e28c     +LDI R24 , LOW ( 300 )
00031c e091     +LDI R25 , HIGH ( 300 )
                +__DELAY_USW_LOOP :
00031d 9701     +SBIW R24 , 1
00031e f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 300
00031f e2a8      	LDI  R26,LOW(40)
000320 dfca      	RCALL __lcd_write_data
000321 e0a4      	LDI  R26,LOW(4)
000322 dfc8      	RCALL __lcd_write_data
000323 e8a5      	LDI  R26,LOW(133)
000324 dfc6      	RCALL __lcd_write_data
000325 e0a6      	LDI  R26,LOW(6)
000326 dfc4      	RCALL __lcd_write_data
000327 dfcf      	RCALL _lcd_clear
000328 c005      	RJMP _0x2080001
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _putchar:
                 ; .FSTART _putchar
000329 93aa      	ST   -Y,R26
                 putchar0:
00032a 9b5d           sbis usr,udre
00032b cffe           rjmp putchar0
00032c 81e8           ld   r30,y
00032d b9ec           out  udr,r30
                 _0x2080001:
00032e 9621      	ADIW R28,1
00032f 9508      	RET
                 ; .FEND
                 _put_usart_G102:
                 ; .FSTART _put_usart_G102
000330 d14a      	RCALL SUBOPT_0x3
000331 81aa      	LDD  R26,Y+2
000332 dff6      	RCALL _putchar
000333 d14d      	RCALL SUBOPT_0x5
000334 91ed      	LD   R30,X+
000335 91fd      	LD   R31,X+
000336 9631      	ADIW R30,1
000337 93fe      	ST   -X,R31
000338 93ee      	ST   -X,R30
000339 9623      	ADIW R28,3
00033a 9508      	RET
                 ; .FEND
                 __print_G102:
                 ; .FSTART __print_G102
00033b d13f      	RCALL SUBOPT_0x3
00033c 9726      	SBIW R28,6
00033d d219      	RCALL __SAVELOCR6
00033e e010      	LDI  R17,0
00033f 85ac      	LDD  R26,Y+12
000340 85bd      	LDD  R27,Y+12+1
000341 e0e0      	LDI  R30,LOW(0)
000342 e0f0      	LDI  R31,HIGH(0)
000343 93ed      	ST   X+,R30
000344 93fc      	ST   X,R31
                 _0x2040016:
000345 89ea      	LDD  R30,Y+18
000346 89fb      	LDD  R31,Y+18+1
000347 9631      	ADIW R30,1
000348 8bea      	STD  Y+18,R30
000349 8bfb      	STD  Y+18+1,R31
00034a 9731      	SBIW R30,1
00034b 91e4      	LPM  R30,Z
00034c 2f2e      	MOV  R18,R30
00034d 30e0      	CPI  R30,0
00034e f409      	BRNE PC+2
00034f c0fc      	RJMP _0x2040018
000350 2fe1      	MOV  R30,R17
000351 30e0      	CPI  R30,0
000352 f431      	BRNE _0x204001C
000353 3225      	CPI  R18,37
000354 f411      	BRNE _0x204001D
000355 e011      	LDI  R17,LOW(1)
000356 c001      	RJMP _0x204001E
                 _0x204001D:
000357 d1b0      	RCALL SUBOPT_0x22
                 _0x204001E:
000358 c0f2      	RJMP _0x204001B
                 _0x204001C:
000359 30e1      	CPI  R30,LOW(0x1)
00035a f4a1      	BRNE _0x204001F
00035b 3225      	CPI  R18,37
00035c f411      	BRNE _0x2040020
00035d d1aa      	RCALL SUBOPT_0x22
00035e c0eb      	RJMP _0x20400CC
                 _0x2040020:
00035f e012      	LDI  R17,LOW(2)
000360 e040      	LDI  R20,LOW(0)
000361 e000      	LDI  R16,LOW(0)
000362 322d      	CPI  R18,45
000363 f411      	BRNE _0x2040021
000364 e001      	LDI  R16,LOW(1)
000365 c0e5      	RJMP _0x204001B
                 _0x2040021:
000366 322b      	CPI  R18,43
000367 f411      	BRNE _0x2040022
000368 e24b      	LDI  R20,LOW(43)
000369 c0e1      	RJMP _0x204001B
                 _0x2040022:
00036a 3220      	CPI  R18,32
00036b f411      	BRNE _0x2040023
00036c e240      	LDI  R20,LOW(32)
00036d c0dd      	RJMP _0x204001B
                 _0x2040023:
00036e c002      	RJMP _0x2040024
                 _0x204001F:
00036f 30e2      	CPI  R30,LOW(0x2)
000370 f439      	BRNE _0x2040025
                 _0x2040024:
000371 e050      	LDI  R21,LOW(0)
000372 e013      	LDI  R17,LOW(3)
000373 3320      	CPI  R18,48
000374 f411      	BRNE _0x2040026
000375 6800      	ORI  R16,LOW(128)
000376 c0d4      	RJMP _0x204001B
                 _0x2040026:
000377 c003      	RJMP _0x2040027
                 _0x2040025:
000378 30e3      	CPI  R30,LOW(0x3)
000379 f009      	BREQ PC+2
00037a c0d0      	RJMP _0x204001B
                 _0x2040027:
00037b 3320      	CPI  R18,48
00037c f010      	BRLO _0x204002A
00037d 332a      	CPI  R18,58
00037e f008      	BRLO _0x204002B
                 _0x204002A:
00037f c007      	RJMP _0x2040029
                 _0x204002B:
000380 e0aa      	LDI  R26,LOW(10)
000381 9f5a      	MUL  R21,R26
000382 2d50      	MOV  R21,R0
000383 2fe2      	MOV  R30,R18
000384 53e0      	SUBI R30,LOW(48)
000385 0f5e      	ADD  R21,R30
000386 c0c4      	RJMP _0x204001B
                 _0x2040029:
000387 2fe2      	MOV  R30,R18
000388 36e3      	CPI  R30,LOW(0x63)
000389 f439      	BRNE _0x204002F
00038a d184      	RCALL SUBOPT_0x23
00038b d186      	RCALL SUBOPT_0x24
00038c d182      	RCALL SUBOPT_0x23
00038d 81a4      	LDD  R26,Z+4
00038e 93aa      	ST   -Y,R26
00038f d186      	RCALL SUBOPT_0x25
000390 c0b9      	RJMP _0x2040030
                 _0x204002F:
000391 37e3      	CPI  R30,LOW(0x73)
000392 f429      	BRNE _0x2040032
000393 d188      	RCALL SUBOPT_0x26
000394 d189      	RCALL SUBOPT_0x27
000395 df1f      	RCALL _strlen
000396 2f1e      	MOV  R17,R30
000397 c007      	RJMP _0x2040033
                 _0x2040032:
000398 37e0      	CPI  R30,LOW(0x70)
000399 f449      	BRNE _0x2040035
00039a d181      	RCALL SUBOPT_0x26
00039b d182      	RCALL SUBOPT_0x27
00039c df23      	RCALL _strlenf
00039d 2f1e      	MOV  R17,R30
00039e 6008      	ORI  R16,LOW(8)
                 _0x2040033:
00039f 6002      	ORI  R16,LOW(2)
0003a0 770f      	ANDI R16,LOW(127)
0003a1 e030      	LDI  R19,LOW(0)
0003a2 c02d      	RJMP _0x2040036
                 _0x2040035:
0003a3 36e4      	CPI  R30,LOW(0x64)
0003a4 f011      	BREQ _0x2040039
0003a5 36e9      	CPI  R30,LOW(0x69)
0003a6 f411      	BRNE _0x204003A
                 _0x2040039:
0003a7 6004      	ORI  R16,LOW(4)
0003a8 c002      	RJMP _0x204003B
                 _0x204003A:
0003a9 37e5      	CPI  R30,LOW(0x75)
0003aa f429      	BRNE _0x204003C
                 _0x204003B:
0003ab e2e6      	LDI  R30,LOW(_tbl10_G102*2)
0003ac e0f0      	LDI  R31,HIGH(_tbl10_G102*2)
0003ad d179      	RCALL SUBOPT_0x28
0003ae e015      	LDI  R17,LOW(5)
0003af c00b      	RJMP _0x204003D
                 _0x204003C:
0003b0 35e8      	CPI  R30,LOW(0x58)
0003b1 f411      	BRNE _0x204003F
0003b2 6008      	ORI  R16,LOW(8)
0003b3 c003      	RJMP _0x2040040
                 _0x204003F:
0003b4 37e8      	CPI  R30,LOW(0x78)
0003b5 f009      	BREQ PC+2
0003b6 c093      	RJMP _0x2040071
                 _0x2040040:
0003b7 e3e0      	LDI  R30,LOW(_tbl16_G102*2)
0003b8 e0f0      	LDI  R31,HIGH(_tbl16_G102*2)
0003b9 d16d      	RCALL SUBOPT_0x28
0003ba e014      	LDI  R17,LOW(4)
                 _0x204003D:
0003bb ff02      	SBRS R16,2
0003bc c011      	RJMP _0x2040042
0003bd d15e      	RCALL SUBOPT_0x26
0003be d16b      	RCALL SUBOPT_0x29
0003bf 85ab      	LDD  R26,Y+11
0003c0 23aa      	TST  R26
0003c1 f432      	BRPL _0x2040043
0003c2 85ea      	LDD  R30,Y+10
0003c3 85fb      	LDD  R31,Y+10+1
0003c4 d17a      	RCALL __ANEGW1
0003c5 87ea      	STD  Y+10,R30
0003c6 87fb      	STD  Y+10+1,R31
0003c7 e24d      	LDI  R20,LOW(45)
                 _0x2040043:
0003c8 3040      	CPI  R20,0
0003c9 f011      	BREQ _0x2040044
0003ca 5f1f      	SUBI R17,-LOW(1)
0003cb c001      	RJMP _0x2040045
                 _0x2040044:
0003cc 7f0b      	ANDI R16,LOW(251)
                 _0x2040045:
0003cd c002      	RJMP _0x2040046
                 _0x2040042:
0003ce d14d      	RCALL SUBOPT_0x26
0003cf d15a      	RCALL SUBOPT_0x29
                 _0x2040046:
                 _0x2040036:
0003d0 fd00      	SBRC R16,0
0003d1 c010      	RJMP _0x2040047
                 _0x2040048:
0003d2 1715      	CP   R17,R21
0003d3 f470      	BRSH _0x204004A
0003d4 ff07      	SBRS R16,7
0003d5 c008      	RJMP _0x204004B
0003d6 ff02      	SBRS R16,2
0003d7 c004      	RJMP _0x204004C
0003d8 7f0b      	ANDI R16,LOW(251)
0003d9 2f24      	MOV  R18,R20
0003da 5011      	SUBI R17,LOW(1)
0003db c001      	RJMP _0x204004D
                 _0x204004C:
0003dc e320      	LDI  R18,LOW(48)
                 _0x204004D:
0003dd c001      	RJMP _0x204004E
                 _0x204004B:
0003de e220      	LDI  R18,LOW(32)
                 _0x204004E:
0003df d128      	RCALL SUBOPT_0x22
0003e0 5051      	SUBI R21,LOW(1)
0003e1 cff0      	RJMP _0x2040048
                 _0x204004A:
                 _0x2040047:
0003e2 2f31      	MOV  R19,R17
0003e3 ff01      	SBRS R16,1
0003e4 c015      	RJMP _0x204004F
                 _0x2040050:
0003e5 3030      	CPI  R19,0
0003e6 f091      	BREQ _0x2040052
0003e7 ff03      	SBRS R16,3
0003e8 c005      	RJMP _0x2040053
0003e9 81ee      	LDD  R30,Y+6
0003ea 81ff      	LDD  R31,Y+6+1
0003eb 9125      	LPM  R18,Z+
0003ec d13a      	RCALL SUBOPT_0x28
0003ed c005      	RJMP _0x2040054
                 _0x2040053:
0003ee 81ae      	LDD  R26,Y+6
0003ef 81bf      	LDD  R27,Y+6+1
0003f0 912d      	LD   R18,X+
0003f1 83ae      	STD  Y+6,R26
0003f2 83bf      	STD  Y+6+1,R27
                 _0x2040054:
0003f3 d114      	RCALL SUBOPT_0x22
0003f4 3050      	CPI  R21,0
0003f5 f009      	BREQ _0x2040055
0003f6 5051      	SUBI R21,LOW(1)
                 _0x2040055:
0003f7 5031      	SUBI R19,LOW(1)
0003f8 cfec      	RJMP _0x2040050
                 _0x2040052:
0003f9 c047      	RJMP _0x2040056
                 _0x204004F:
                 _0x2040058:
0003fa e320      	LDI  R18,LOW(48)
0003fb 81ee      	LDD  R30,Y+6
0003fc 81ff      	LDD  R31,Y+6+1
0003fd d149      	RCALL __GETW1PF
0003fe 87e8      	STD  Y+8,R30
0003ff 87f9      	STD  Y+8+1,R31
000400 81ee      	LDD  R30,Y+6
000401 81ff      	LDD  R31,Y+6+1
000402 9632      	ADIW R30,2
000403 d123      	RCALL SUBOPT_0x28
                 _0x204005A:
000404 85e8      	LDD  R30,Y+8
000405 85f9      	LDD  R31,Y+8+1
000406 85aa      	LDD  R26,Y+10
000407 85bb      	LDD  R27,Y+10+1
000408 17ae      	CP   R26,R30
000409 07bf      	CPC  R27,R31
00040a f050      	BRLO _0x204005C
00040b 5f2f      	SUBI R18,-LOW(1)
00040c 85a8      	LDD  R26,Y+8
00040d 85b9      	LDD  R27,Y+8+1
00040e 85ea      	LDD  R30,Y+10
00040f 85fb      	LDD  R31,Y+10+1
000410 1bea      	SUB  R30,R26
000411 0bfb      	SBC  R31,R27
000412 87ea      	STD  Y+10,R30
000413 87fb      	STD  Y+10+1,R31
000414 cfef      	RJMP _0x204005A
                 _0x204005C:
000415 332a      	CPI  R18,58
000416 f028      	BRLO _0x204005D
000417 ff03      	SBRS R16,3
000418 c002      	RJMP _0x204005E
000419 5f29      	SUBI R18,-LOW(7)
00041a c001      	RJMP _0x204005F
                 _0x204005E:
00041b 5d29      	SUBI R18,-LOW(39)
                 _0x204005F:
                 _0x204005D:
00041c fd04      	SBRC R16,4
00041d c019      	RJMP _0x2040061
00041e 3321      	CPI  R18,49
00041f f420      	BRSH _0x2040063
000420 85a8      	LDD  R26,Y+8
000421 85b9      	LDD  R27,Y+8+1
000422 9711      	SBIW R26,1
000423 f409      	BRNE _0x2040062
                 _0x2040063:
000424 c009      	RJMP _0x20400CD
                 _0x2040062:
000425 1753      	CP   R21,R19
000426 f010      	BRLO _0x2040067
000427 ff00      	SBRS R16,0
000428 c001      	RJMP _0x2040068
                 _0x2040067:
000429 c011      	RJMP _0x2040066
                 _0x2040068:
00042a e220      	LDI  R18,LOW(32)
00042b ff07      	SBRS R16,7
00042c c00a      	RJMP _0x2040069
00042d e320      	LDI  R18,LOW(48)
                 _0x20400CD:
00042e 6100      	ORI  R16,LOW(16)
00042f ff02      	SBRS R16,2
000430 c006      	RJMP _0x204006A
000431 7f0b      	ANDI R16,LOW(251)
000432 934a      	ST   -Y,R20
000433 d0e2      	RCALL SUBOPT_0x25
000434 3050      	CPI  R21,0
000435 f009      	BREQ _0x204006B
000436 5051      	SUBI R21,LOW(1)
                 _0x204006B:
                 _0x204006A:
                 _0x2040069:
                 _0x2040061:
000437 d0d0      	RCALL SUBOPT_0x22
000438 3050      	CPI  R21,0
000439 f009      	BREQ _0x204006C
00043a 5051      	SUBI R21,LOW(1)
                 _0x204006C:
                 _0x2040066:
00043b 5031      	SUBI R19,LOW(1)
00043c 85a8      	LDD  R26,Y+8
00043d 85b9      	LDD  R27,Y+8+1
00043e 9712      	SBIW R26,2
00043f f008      	BRLO _0x2040059
000440 cfb9      	RJMP _0x2040058
                 _0x2040059:
                 _0x2040056:
000441 ff00      	SBRS R16,0
000442 c007      	RJMP _0x204006D
                 _0x204006E:
000443 3050      	CPI  R21,0
000444 f029      	BREQ _0x2040070
000445 5051      	SUBI R21,LOW(1)
000446 e2e0      	LDI  R30,LOW(32)
000447 93ea      	ST   -Y,R30
000448 d0cd      	RCALL SUBOPT_0x25
000449 cff9      	RJMP _0x204006E
                 _0x2040070:
                 _0x204006D:
                 _0x2040071:
                 _0x2040030:
                 _0x20400CC:
00044a e010      	LDI  R17,LOW(0)
                 _0x204001B:
00044b cef9      	RJMP _0x2040016
                 _0x2040018:
00044c 85ac      	LDD  R26,Y+12
00044d 85bd      	LDD  R27,Y+12+1
00044e d0f4      	RCALL __GETW1P
00044f d10e      	RCALL __LOADLOCR6
000450 9664      	ADIW R28,20
000451 9508      	RET
                 ; .FEND
                 _printf:
                 ; .FSTART _printf
000452 92ff      	PUSH R15
000453 2ef8      	MOV  R15,R24
000454 9726      	SBIW R28,6
000455 d105      	RCALL __SAVELOCR2
000456 01de      	MOVW R26,R28
000457 9614      	ADIW R26,4
000458 d0e2      	RCALL __ADDW2R15
000459 018d      	MOVW R16,R26
00045a e0e0      	LDI  R30,LOW(0)
00045b 83ec      	STD  Y+4,R30
00045c 83ed      	STD  Y+4+1,R30
00045d 83ee      	STD  Y+6,R30
00045e 83ef      	STD  Y+6+1,R30
00045f 01de      	MOVW R26,R28
000460 9618      	ADIW R26,8
000461 d0d9      	RCALL __ADDW2R15
000462 d0e0      	RCALL __GETW1P
000463 d011      	RCALL SUBOPT_0x1
000464 931a      	ST   -Y,R17
000465 930a      	ST   -Y,R16
000466 e3e0      	LDI  R30,LOW(_put_usart_G102)
000467 e0f3      	LDI  R31,HIGH(_put_usart_G102)
000468 d00c      	RCALL SUBOPT_0x1
000469 01de      	MOVW R26,R28
00046a 9618      	ADIW R26,8
00046b decf      	RCALL __print_G102
00046c d0f5      	RCALL __LOADLOCR2
00046d 9628      	ADIW R28,8
00046e 90ff      	POP  R15
00046f 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.DSEG
                 _twi_rx:
000160           	.BYTE 0x52
                 _twi_tx:
0001b2           	.BYTE 0x52
                 _PN532_msg:
000204           	.BYTE 0x52
                 _tag_uid:
000256           	.BYTE 0x52
                 _tag_data:
0002a8           	.BYTE 0x52
                 _rx_buffer:
0002fa           	.BYTE 0x8
                 _MIFARE_Key_A:
000302           	.BYTE 0x6
                 __base_y_G101:
000308           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x0:
                +
000470 91e0 02a6+LDS R30 , _tag_uid + ( 80 )
000472 91f0 02a7+LDS R31 , _tag_uid + ( 80 ) + 1
                 	__GETW1MN _tag_uid,80
000474 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 20 TIMES, CODE SIZE REDUCTION:17 WORDS
                 SUBOPT_0x1:
000475 93fa      	ST   -Y,R31
000476 93ea      	ST   -Y,R30
000477 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x2:
                +
000478 5f0f     +SUBI R16 , LOW ( - 1 )
000479 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
00047a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 9 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x3:
00047b 93ba      	ST   -Y,R27
00047c 93aa      	ST   -Y,R26
00047d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x4:
00047e 2488      	CLR  R8
00047f 2499      	CLR  R9
000480 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x5:
000481 81a8      	LD   R26,Y
000482 81b9      	LDD  R27,Y+1
000483 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x6:
000484 5ba0      	SUBI R26,LOW(-80)
000485 4fbf      	SBCI R27,HIGH(-80)
000486 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x7:
000487 d0bb      	RCALL __GETW1P
000488 168e      	CP   R8,R30
000489 069f      	CPC  R9,R31
00048a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x8:
00048b 01f4      	MOVW R30,R8
00048c dff4      	RCALL SUBOPT_0x5
00048d 0fae      	ADD  R26,R30
00048e 1fbf      	ADC  R27,R31
00048f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x9:
000490 01f4      	MOVW R30,R8
000491 9631      	ADIW R30,1
000492 014f      	MOVW R8,R30
000493 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0xA:
000494 81ac      	LDD  R26,Y+4
000495 81bd      	LDD  R27,Y+4+1
000496 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0xB:
000497 93ec      	ST   X,R30
000498 cfdf      	RJMP SUBOPT_0x2
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0xC:
000499 81aa      	LDD  R26,Y+2
00049a 81bb      	LDD  R27,Y+2+1
00049b dfe8      	RCALL SUBOPT_0x6
00049c 91ec      	LD   R30,X
00049d 5fef      	SUBI R30,-LOW(1)
00049e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 11 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0xD:
00049f 81aa      	LDD  R26,Y+2
0004a0 81bb      	LDD  R27,Y+2+1
0004a1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 10 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0xE:
0004a2 0fea      	ADD  R30,R26
0004a3 1ffb      	ADC  R31,R27
0004a4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0xF:
0004a5 01f4      	MOVW R30,R8
0004a6 dff8      	RCALL SUBOPT_0xD
0004a7 0fae      	ADD  R26,R30
0004a8 1fbf      	ADC  R27,R31
0004a9 91ec      	LD   R30,X
0004aa 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x10:
0004ab dc3d      	RCALL _TWIStart
0004ac e4a9      	LDI  R26,LOW(73)
0004ad dc44      	RCALL _TWIWrite
0004ae e0a1      	LDI  R26,LOW(1)
0004af e0b0      	LDI  R27,0
0004b0 dc4a      	RCALL _TWIRead
0004b1 2f1e      	MOV  R17,R30
0004b2 3010      	CPI  R17,0
0004b3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 11 TIMES, CODE SIZE REDUCTION:18 WORDS
                 SUBOPT_0x11:
0004b4 e0a1      	LDI  R26,LOW(1)
0004b5 e0b0      	LDI  R27,0
0004b6 cc44      	RJMP _TWIRead
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x12:
0004b7 2fe0      	MOV  R30,R16
0004b8 5f0f      	SUBI R16,-1
0004b9 dfe5      	RCALL SUBOPT_0xD
0004ba e0f0      	LDI  R31,0
0004bb dfe6      	RCALL SUBOPT_0xE
0004bc 8310      	ST   Z,R17
0004bd 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x13:
0004be dc30      	RCALL _TWIStop
0004bf e0e0      	LDI  R30,LOW(0)
0004c0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:14 WORDS
                 SUBOPT_0x14:
0004c1 2fe0      	MOV  R30,R16
0004c2 5f0f      	SUBI R16,-1
0004c3 dfdb      	RCALL SUBOPT_0xD
0004c4 e0f0      	LDI  R31,0
0004c5 cfdc      	RJMP SUBOPT_0xE
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x15:
0004c6 168e      	CP   R8,R30
0004c7 069f      	CPC  R9,R31
0004c8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x16:
0004c9 91ec      	LD   R30,X
0004ca 01d0      	MOVW R26,R0
0004cb 93ec      	ST   X,R30
0004cc 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x17:
0004cd 93e0 0204 	STS  _PN532_msg,R30
0004cf 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:58 WORDS
                 SUBOPT_0x18:
                +
0004d0 93e0 0254+STS _PN532_msg + ( 80 ) , R30
0004d2 93f0 0255+STS _PN532_msg + ( 80 ) + 1 , R31
                 	__PUTW1MN _PN532_msg,80
0004d4 ebe2      	LDI  R30,LOW(_twi_tx)
0004d5 e0f1      	LDI  R31,HIGH(_twi_tx)
0004d6 df9e      	RCALL SUBOPT_0x1
0004d7 e0a4      	LDI  R26,LOW(_PN532_msg)
0004d8 e0b2      	LDI  R27,HIGH(_PN532_msg)
0004d9 dc3f      	RCALL _PN532_build_msg
0004da eba2      	LDI  R26,LOW(_twi_tx)
0004db e0b1      	LDI  R27,HIGH(_twi_tx)
0004dc dc2b      	RCALL _PN532_cmd
0004dd e1a4      	LDI  R26,LOW(20)
0004de e0b0      	LDI  R27,0
0004df c051      	RJMP _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x19:
0004e0 dcfa      	RCALL _PN532_wait_for_ack
0004e1 30e0      	CPI  R30,0
0004e2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 11 TIMES, CODE SIZE REDUCTION:18 WORDS
                 SUBOPT_0x1A:
0004e3 e1a4      	LDI  R26,LOW(20)
0004e4 e0b0      	LDI  R27,0
0004e5 c04b      	RJMP _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:30 WORDS
                 SUBOPT_0x1B:
0004e6 e6a0      	LDI  R26,LOW(_twi_rx)
0004e7 e0b1      	LDI  R27,HIGH(_twi_rx)
0004e8 dc71      	RCALL _PN532_read
0004e9 e6e0      	LDI  R30,LOW(_twi_rx)
0004ea e0f1      	LDI  R31,HIGH(_twi_rx)
0004eb df89      	RCALL SUBOPT_0x1
0004ec e0e4      	LDI  R30,LOW(_PN532_msg)
0004ed e0f2      	LDI  R31,HIGH(_PN532_msg)
0004ee cf86      	RJMP SUBOPT_0x1
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1C:
0004ef e0a1      	LDI  R26,LOW(1)
0004f0 ccbf      	RJMP _PN532_get_msg
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x1D:
0004f1 dfdb      	RCALL SUBOPT_0x17
0004f2 e0e1      	LDI  R30,LOW(1)
                +
0004f3 93e0 0205+STS _PN532_msg + ( 1 ) , R30
                 	__PUTB1MN _PN532_msg,1
0004f5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1E:
                +
0004f6 93e0 0206+STS _PN532_msg + ( 2 ) , R30
                 	__PUTB1MN _PN532_msg,2
0004f8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x1F:
                +
0004f9 e184     +LDI R24 , LOW ( 20 )
                +__DELAY_USB_LOOP :
0004fa 958a     +DEC R24
0004fb f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 20
0004fc 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x20:
0004fd dded      	RCALL __lcd_write_data
0004fe e0a3      	LDI  R26,LOW(3)
0004ff e0b0      	LDI  R27,0
000500 c030      	RJMP _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x21:
000501 e3a0      	LDI  R26,LOW(48)
000502 ddc9      	RCALL __lcd_write_nibble_G101
                +
000503 e28c     +LDI R24 , LOW ( 300 )
000504 e091     +LDI R25 , HIGH ( 300 )
                +__DELAY_USW_LOOP :
000505 9701     +SBIW R24 , 1
000506 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 300
000507 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:18 WORDS
                 SUBOPT_0x22:
000508 932a      	ST   -Y,R18
000509 85ad      	LDD  R26,Y+13
00050a 85be      	LDD  R27,Y+13+1
00050b 85ef      	LDD  R30,Y+15
00050c 89f8      	LDD  R31,Y+15+1
00050d 9509      	ICALL
00050e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x23:
00050f 89e8      	LDD  R30,Y+16
000510 89f9      	LDD  R31,Y+16+1
000511 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x24:
000512 9734      	SBIW R30,4
000513 8be8      	STD  Y+16,R30
000514 8bf9      	STD  Y+16+1,R31
000515 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x25:
000516 85ad      	LDD  R26,Y+13
000517 85be      	LDD  R27,Y+13+1
000518 85ef      	LDD  R30,Y+15
000519 89f8      	LDD  R31,Y+15+1
00051a 9509      	ICALL
00051b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x26:
00051c dff2      	RCALL SUBOPT_0x23
00051d cff4      	RJMP SUBOPT_0x24
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x27:
00051e 89a8      	LDD  R26,Y+16
00051f 89b9      	LDD  R27,Y+16+1
000520 9614      	ADIW R26,4
000521 d021      	RCALL __GETW1P
000522 83ee      	STD  Y+6,R30
000523 83ff      	STD  Y+6+1,R31
000524 81ae      	LDD  R26,Y+6
000525 81bf      	LDD  R27,Y+6+1
000526 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x28:
000527 83ee      	STD  Y+6,R30
000528 83ff      	STD  Y+6+1,R31
000529 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x29:
00052a 89a8      	LDD  R26,Y+16
00052b 89b9      	LDD  R27,Y+16+1
00052c 9614      	ADIW R26,4
00052d d015      	RCALL __GETW1P
00052e 87ea      	STD  Y+10,R30
00052f 87fb      	STD  Y+10+1,R31
000530 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000531 9610      	adiw r26,0
000532 f039      	breq __delay_ms1
                 __delay_ms0:
                +
000533 eb88     +LDI R24 , LOW ( 0xBB8 )
000534 e09b     +LDI R25 , HIGH ( 0xBB8 )
                +__DELAY_USW_LOOP :
000535 9701     +SBIW R24 , 1
000536 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xBB8
000537 95a8      	wdr
000538 9711      	sbiw r26,1
000539 f7c9      	brne __delay_ms0
                 __delay_ms1:
00053a 9508      	ret
                 
                 __ADDW2R15:
00053b 2400      	CLR  R0
00053c 0daf      	ADD  R26,R15
00053d 1db0      	ADC  R27,R0
00053e 9508      	RET
                 
                 __ANEGW1:
00053f 95f1      	NEG  R31
000540 95e1      	NEG  R30
000541 40f0      	SBCI R31,0
000542 9508      	RET
                 
                 __GETW1P:
000543 91ed      	LD   R30,X+
000544 91fc      	LD   R31,X
000545 9711      	SBIW R26,1
000546 9508      	RET
                 
                 __GETW1PF:
000547 9005      	LPM  R0,Z+
000548 91f4      	LPM  R31,Z
000549 2de0      	MOV  R30,R0
00054a 9508      	RET
                 
                 __PUTPARD1:
00054b 937a      	ST   -Y,R23
00054c 936a      	ST   -Y,R22
00054d 93fa      	ST   -Y,R31
00054e 93ea      	ST   -Y,R30
00054f 9508      	RET
                 
                 __SWAPW12:
000550 2e1b      	MOV  R1,R27
000551 2fbf      	MOV  R27,R31
000552 2df1      	MOV  R31,R1
                 
                 __SWAPB12:
000553 2e1a      	MOV  R1,R26
000554 2fae      	MOV  R26,R30
000555 2de1      	MOV  R30,R1
000556 9508      	RET
                 
                 __SAVELOCR6:
000557 935a      	ST   -Y,R21
                 __SAVELOCR5:
000558 934a      	ST   -Y,R20
                 __SAVELOCR4:
000559 933a      	ST   -Y,R19
                 __SAVELOCR3:
00055a 932a      	ST   -Y,R18
                 __SAVELOCR2:
00055b 931a      	ST   -Y,R17
00055c 930a      	ST   -Y,R16
00055d 9508      	RET
                 
                 __LOADLOCR6:
00055e 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
00055f 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
000560 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000561 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000562 8119      	LDD  R17,Y+1
000563 8108      	LD   R16,Y
000564 9508      	RET
                 
                 __INITLOCB:
                 __INITLOCW:
000565 0fac      	ADD  R26,R28
000566 1fbd      	ADC  R27,R29
                 __INITLOC0:
000567 9005      	LPM  R0,Z+
000568 920d      	ST   X+,R0
000569 958a      	DEC  R24
00056a f7e1      	BRNE __INITLOC0
00056b 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega8 register use summary:
r0 :  19 r1 :   5 r2 :   1 r3 :   0 r4 :   0 r5 :   4 r6 :   3 r7 :   3 
r8 :  16 r9 :   4 r10:   1 r11:   1 r12:   0 r13:   1 r14:   0 r15:   4 
r16:  43 r17:  36 r18:  27 r19:   8 r20:   9 r21:  17 r22:   6 r23:   2 
r24:  21 r25:   5 r26: 131 r27:  69 r28:  17 r29:   2 r30: 337 r31:  90 
x  :  37 y  : 163 z  :  19 
Registers used: 31 out of 35 (88.6%)

ATmega8 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   9 add   :  11 
adiw  :  29 and   :   0 andi  :  10 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :  28 
brge  :   8 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   6 
brlt  :   0 brmi  :   0 brne  :  39 brpl  :   1 brsh  :   2 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 cbi   :   8 
cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 clr   :  14 
cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :   8 
cpc   :   4 cpi   :  44 cpse  :   0 dec   :   4 des   :   0 eor   :   0 
fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 in    :   7 
inc   :   2 ld    :  40 ldd   :  82 ldi   : 191 lds   :   6 lpm   :  15 
lsl   :   2 lsr   :   0 mov   :  29 movw  :  28 mul   :   1 muls  :   0 
mulsu :   0 neg   :   4 nop   :   0 or    :   0 ori   :   7 out   :  48 
pop   :  11 push  :  11 rcall : 246 ret   :  62 reti  :   1 rjmp  : 124 
rol   :   0 ror   :   0 sbc   :   2 sbci  :  10 sbi   :  12 sbic  :   0 
sbis  :   1 sbiw  :  17 sbr   :   0 sbrc  :   2 sbrs  :  13 sec   :   0 
seh   :   0 sei   :   1 sen   :   0 ser   :   0 ses   :   0 set   :   1 
sev   :   0 sez   :   0 sleep :   0 spm   :   0 st    :  62 std   :  22 
sts   :  10 sub   :   2 subi  :  27 swap  :   2 tst   :   3 wdr   :   1 

Instructions used: 56 out of 114 (49.1%)

ATmega8 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000ad8   2696     80   2776    8192  33.9%
[.dseg] 0x000060 0x00030c      0    428    428    1024  41.8%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 10 warnings
