
AVRASM ver. 2.1.30  D:\My Files\AA\TEKNIK ELEKTRO\TA\obu\Debug\List\obu.asm Thu Sep 07 12:06:54 2017

D:\My Files\AA\TEKNIK ELEKTRO\TA\obu\Debug\List\obu.asm(1086): warning: Register r5 already defined by the .DEF directive
D:\My Files\AA\TEKNIK ELEKTRO\TA\obu\Debug\List\obu.asm(1087): warning: Register r4 already defined by the .DEF directive
D:\My Files\AA\TEKNIK ELEKTRO\TA\obu\Debug\List\obu.asm(1088): warning: Register r7 already defined by the .DEF directive
D:\My Files\AA\TEKNIK ELEKTRO\TA\obu\Debug\List\obu.asm(1089): warning: Register r6 already defined by the .DEF directive
D:\My Files\AA\TEKNIK ELEKTRO\TA\obu\Debug\List\obu.asm(1090): warning: Register r8 already defined by the .DEF directive
D:\My Files\AA\TEKNIK ELEKTRO\TA\obu\Debug\List\obu.asm(1091): warning: Register r9 already defined by the .DEF directive
D:\My Files\AA\TEKNIK ELEKTRO\TA\obu\Debug\List\obu.asm(1092): warning: Register r11 already defined by the .DEF directive
D:\My Files\AA\TEKNIK ELEKTRO\TA\obu\Debug\List\obu.asm(1093): warning: Register r10 already defined by the .DEF directive
D:\My Files\AA\TEKNIK ELEKTRO\TA\obu\Debug\List\obu.asm(1094): warning: Register r13 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega8
                 ;Program type           : Application
                 ;Clock frequency        : 12.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega8
                 	#pragma AVRPART MEMORY PROG_FLASH 8192
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	RCALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	RCALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _rx_wr_index=R5
                 	.DEF _rx_rd_index=R4
                 	.DEF _rx_counter=R7
                 	.DEF _checksum=R6
                 	.DEF _i=R8
                 	.DEF _i_msb=R9
                 	.DEF __lcd_x=R11
                 	.DEF __lcd_y=R10
                 	.DEF __lcd_maxx=R13
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 c029      	RJMP __RESET
000001 cffe      	RJMP 0x00
000002 cffd      	RJMP 0x00
000003 cffc      	RJMP 0x00
000004 cffb      	RJMP 0x00
000005 cffa      	RJMP 0x00
000006 cff9      	RJMP 0x00
000007 cff8      	RJMP 0x00
000008 cff7      	RJMP 0x00
000009 cff6      	RJMP 0x00
00000a cff5      	RJMP 0x00
00000b c04a      	RJMP _usart_rx_isr
00000c cff3      	RJMP 0x00
00000d cff2      	RJMP 0x00
00000e cff1      	RJMP 0x00
00000f cff0      	RJMP 0x00
000010 cfef      	RJMP 0x00
000011 cfee      	RJMP 0x00
000012 cfed      	RJMP 0x00
                 
                 _tbl10_G102:
000013 2710
000014 03e8
000015 0064
000016 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
000017 0001      	.DB  0x1,0x0
                 _tbl16_G102:
000018 1000
000019 0100
00001a 0010
00001b 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;REGISTER BIT VARIABLES INITIALIZATION
                 __REG_BIT_VARS:
00001c 0000      	.DW  0x0000
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
00001d 0000
00001e 0000      	.DB  0x0,0x0,0x0,0x0
                 
                 _0x2020003:
00001f c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
000020 0001      	.DW  0x01
000021 0002      	.DW  0x02
000022 0038      	.DW  __REG_BIT_VARS*2
                 
000023 0004      	.DW  0x04
000024 0004      	.DW  0x04
000025 003a      	.DW  __REG_VARS*2
                 
000026 0002      	.DW  0x02
000027 025e      	.DW  __base_y_G101
000028 003e      	.DW  _0x2020003*2
                 
                 _0xFFFFFFFF:
000029 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00002a 94f8      	CLI
00002b 27ee      	CLR  R30
00002c bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00002d e0f1      	LDI  R31,1
00002e bffb      	OUT  GICR,R31
00002f bfeb      	OUT  GICR,R30
000030 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000031 e08d      	LDI  R24,(14-2)+1
000032 e0a2      	LDI  R26,2
000033 27bb      	CLR  R27
                 __CLEAR_REG:
000034 93ed      	ST   X+,R30
000035 958a      	DEC  R24
000036 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000037 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000038 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000039 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00003a 93ed      	ST   X+,R30
00003b 9701      	SBIW R24,1
00003c f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00003d e4e0      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00003e e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00003f 9185      	LPM  R24,Z+
000040 9195      	LPM  R25,Z+
000041 9700      	SBIW R24,0
000042 f061      	BREQ __GLOBAL_INI_END
000043 91a5      	LPM  R26,Z+
000044 91b5      	LPM  R27,Z+
000045 9005      	LPM  R0,Z+
000046 9015      	LPM  R1,Z+
000047 01bf      	MOVW R22,R30
000048 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000049 9005      	LPM  R0,Z+
00004a 920d      	ST   X+,R0
00004b 9701      	SBIW R24,1
00004c f7e1      	BRNE __GLOBAL_INI_LOOP
00004d 01fb      	MOVW R30,R22
00004e cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00004f e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000050 bfed      	OUT  SPL,R30
000051 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000052 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000053 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000054 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000055 c022      	RJMP _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;#include <mega8.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;#include <string.h>
                 ;#include "PN532_I2C.h"
                 ;
                 ;// Alphanumeric LCD functions
                 ;#include <alcd.h>
                 ;
                 ;// Declare your global variables here
                 ;
                 ;#define DATA_REGISTER_EMPTY (1<<UDRE)
                 ;#define RX_COMPLETE (1<<RXC)
                 ;#define FRAMING_ERROR (1<<FE)
                 ;#define PARITY_ERROR (1<<UPE)
                 ;#define DATA_OVERRUN (1<<DOR)
                 ;
                 ;// USART Receiver buffer
                 ;#define RX_BUFFER_SIZE 8
                 ;char rx_buffer[RX_BUFFER_SIZE];
                 ;
                 ;#if RX_BUFFER_SIZE <= 256
                 ;unsigned char rx_wr_index=0,rx_rd_index=0;
                 ;#else
                 ;unsigned int rx_wr_index=0,rx_rd_index=0;
                 ;#endif
                 ;
                 ;#if RX_BUFFER_SIZE < 256
                 ;unsigned char rx_counter=0;
                 ;#else
                 ;unsigned int rx_counter=0;
                 ;#endif
                 ;
                 ;// This flag is set on USART Receiver buffer overflow
                 ;bit rx_buffer_overflow;
                 ;
                 ;// USART Receiver interrupt service routine
                 ;interrupt [USART_RXC] void usart_rx_isr(void)
                 ; 0000 0026 {
                 
                 	.CSEG
                 _usart_rx_isr:
                 ; .FSTART _usart_rx_isr
000056 93ea      	ST   -Y,R30
000057 93fa      	ST   -Y,R31
000058 b7ef      	IN   R30,SREG
000059 93ea      	ST   -Y,R30
                 ; 0000 0027 char status,data;
                 ; 0000 0028 status=UCSRA;
00005a d2ba      	RCALL __SAVELOCR2
                 ;	status -> R17
                 ;	data -> R16
00005b b11b      	IN   R17,11
                 ; 0000 0029 data=UDR;
00005c b10c      	IN   R16,12
                 ; 0000 002A if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
00005d 2fe1      	MOV  R30,R17
00005e 71ec      	ANDI R30,LOW(0x1C)
00005f f489      	BRNE _0x3
                 ; 0000 002B    {
                 ; 0000 002C    rx_buffer[rx_wr_index++]=data;
000060 2de5      	MOV  R30,R5
000061 9453      	INC  R5
000062 e0f0      	LDI  R31,0
000063 5aea      	SUBI R30,LOW(-_rx_buffer)
000064 4ffd      	SBCI R31,HIGH(-_rx_buffer)
000065 8300      	ST   Z,R16
                 ; 0000 002D #if RX_BUFFER_SIZE == 256
                 ; 0000 002E    // special case for receiver buffer size=256
                 ; 0000 002F    if (++rx_counter == 0) rx_buffer_overflow=1;
                 ; 0000 0030 #else
                 ; 0000 0031    if (rx_wr_index == RX_BUFFER_SIZE) rx_wr_index=0;
000066 e0e8      	LDI  R30,LOW(8)
000067 15e5      	CP   R30,R5
000068 f409      	BRNE _0x4
000069 2455      	CLR  R5
                 ; 0000 0032    if (++rx_counter == RX_BUFFER_SIZE)
                 _0x4:
00006a 9473      	INC  R7
00006b e0e8      	LDI  R30,LOW(8)
00006c 15e7      	CP   R30,R7
00006d f419      	BRNE _0x5
                 ; 0000 0033       {
                 ; 0000 0034       rx_counter=0;
00006e 2477      	CLR  R7
                 ; 0000 0035       rx_buffer_overflow=1;
00006f 9468      	SET
000070 f820      	BLD  R2,0
                 ; 0000 0036       }
                 ; 0000 0037 #endif
                 ; 0000 0038    }
                 _0x5:
                 ; 0000 0039 }
                 _0x3:
000071 9109      	LD   R16,Y+
000072 9119      	LD   R17,Y+
000073 91e9      	LD   R30,Y+
000074 bfef      	OUT  SREG,R30
000075 91f9      	LD   R31,Y+
000076 91e9      	LD   R30,Y+
000077 9518      	RETI
                 ; .FEND
                 ;
                 ;#ifndef _DEBUG_TERMINAL_IO_
                 ;// Get a character from the USART Receiver buffer
                 ;#define _ALTERNATE_GETCHAR_
                 ;#pragma used+
                 ;char getchar(void)
                 ; 0000 0040 {
                 ; 0000 0041 char data;
                 ; 0000 0042 while (rx_counter==0);
                 ;	data -> R17
                 ; 0000 0043 data=rx_buffer[rx_rd_index++];
                 ; 0000 0044 #if RX_BUFFER_SIZE != 256
                 ; 0000 0045 if (rx_rd_index == RX_BUFFER_SIZE) rx_rd_index=0;
                 ; 0000 0046 #endif
                 ; 0000 0047 #asm("cli")
                 ; 0000 0048 --rx_counter;
                 ; 0000 0049 #asm("sei")
                 ; 0000 004A return data;
                 ; 0000 004B }
                 ;#pragma used-
                 ;#endif
                 ;
                 ;// Standard Input/Output functions
                 ;#include <stdio.h>
                 ;
                 ;void main(void)
                 ; 0000 0053 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0054 // Declare your local variables here
                 ; 0000 0055 int i;
                 ; 0000 0056 // Input/Output Ports initialization
                 ; 0000 0057 // Port B initialization
                 ; 0000 0058 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0059 DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
                 ;	i -> R16,R17
000078 e0e0      	LDI  R30,LOW(0)
000079 bbe7      	OUT  0x17,R30
                 ; 0000 005A // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 005B PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (1<<PORTB1) | (0<<PORTB0);
00007a e0e2      	LDI  R30,LOW(2)
00007b bbe8      	OUT  0x18,R30
                 ; 0000 005C 
                 ; 0000 005D // Port C initialization
                 ; 0000 005E // Function: Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 005F DDRC=(0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
00007c e0e0      	LDI  R30,LOW(0)
00007d bbe4      	OUT  0x14,R30
                 ; 0000 0060 // State: Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0061 PORTC=(0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
00007e bbe5      	OUT  0x15,R30
                 ; 0000 0062 
                 ; 0000 0063 // Port D initialization
                 ; 0000 0064 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=Out Bit2=In Bit1=In Bit0=In
                 ; 0000 0065 DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (1<<DDD3) | (1<<DDD2) | (0<<DDD1) | (0<<DDD0);
00007f e0ec      	LDI  R30,LOW(12)
000080 bbe1      	OUT  0x11,R30
                 ; 0000 0066 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=1 Bit2=T Bit1=T Bit0=T
                 ; 0000 0067 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (1<<PORTD3) | (1<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
000081 bbe2      	OUT  0x12,R30
                 ; 0000 0068 
                 ; 0000 0069 // Timer/Counter 0 initialization
                 ; 0000 006A // Clock source: System Clock
                 ; 0000 006B // Clock value: Timer 0 Stopped
                 ; 0000 006C TCCR0=(0<<CS02) | (0<<CS01) | (0<<CS00);
000082 e0e0      	LDI  R30,LOW(0)
000083 bfe3      	OUT  0x33,R30
                 ; 0000 006D TCNT0=0x00;
000084 bfe2      	OUT  0x32,R30
                 ; 0000 006E 
                 ; 0000 006F // Timer/Counter 1 initialization
                 ; 0000 0070 // Clock source: System Clock
                 ; 0000 0071 // Clock value: Timer1 Stopped
                 ; 0000 0072 // Mode: Normal top=0xFFFF
                 ; 0000 0073 // OC1A output: Disconnected
                 ; 0000 0074 // OC1B output: Disconnected
                 ; 0000 0075 // Noise Canceler: Off
                 ; 0000 0076 // Input Capture on Falling Edge
                 ; 0000 0077 // Timer1 Overflow Interrupt: Off
                 ; 0000 0078 // Input Capture Interrupt: Off
                 ; 0000 0079 // Compare A Match Interrupt: Off
                 ; 0000 007A // Compare B Match Interrupt: Off
                 ; 0000 007B TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
000085 bdef      	OUT  0x2F,R30
                 ; 0000 007C TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
000086 bdee      	OUT  0x2E,R30
                 ; 0000 007D TCNT1H=0x00;
000087 bded      	OUT  0x2D,R30
                 ; 0000 007E TCNT1L=0x00;
000088 bdec      	OUT  0x2C,R30
                 ; 0000 007F ICR1H=0x00;
000089 bde7      	OUT  0x27,R30
                 ; 0000 0080 ICR1L=0x00;
00008a bde6      	OUT  0x26,R30
                 ; 0000 0081 OCR1AH=0x00;
00008b bdeb      	OUT  0x2B,R30
                 ; 0000 0082 OCR1AL=0x00;
00008c bdea      	OUT  0x2A,R30
                 ; 0000 0083 OCR1BH=0x00;
00008d bde9      	OUT  0x29,R30
                 ; 0000 0084 OCR1BL=0x00;
00008e bde8      	OUT  0x28,R30
                 ; 0000 0085 
                 ; 0000 0086 // Timer/Counter 2 initialization
                 ; 0000 0087 // Clock source: System Clock
                 ; 0000 0088 // Clock value: Timer2 Stopped
                 ; 0000 0089 // Mode: Normal top=0xFF
                 ; 0000 008A // OC2 output: Disconnected
                 ; 0000 008B ASSR=0<<AS2;
00008f bde2      	OUT  0x22,R30
                 ; 0000 008C TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
000090 bde5      	OUT  0x25,R30
                 ; 0000 008D TCNT2=0x00;
000091 bde4      	OUT  0x24,R30
                 ; 0000 008E OCR2=0x00;
000092 bde3      	OUT  0x23,R30
                 ; 0000 008F 
                 ; 0000 0090 // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 0091 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<TOIE0);
000093 bfe9      	OUT  0x39,R30
                 ; 0000 0092 
                 ; 0000 0093 // External Interrupt(s) initialization
                 ; 0000 0094 // INT0: Off
                 ; 0000 0095 // INT1: Off
                 ; 0000 0096 MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
000094 bfe5      	OUT  0x35,R30
                 ; 0000 0097 
                 ; 0000 0098 // USART initialization
                 ; 0000 0099 // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0000 009A // USART Receiver: On
                 ; 0000 009B // USART Transmitter: On
                 ; 0000 009C // USART Mode: Asynchronous
                 ; 0000 009D // USART Baud Rate: 9600
                 ; 0000 009E UCSRA=(0<<RXC) | (0<<TXC) | (0<<UDRE) | (0<<FE) | (0<<DOR) | (0<<UPE) | (0<<U2X) | (0<<MPCM);
000095 b9eb      	OUT  0xB,R30
                 ; 0000 009F UCSRB=(1<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (1<<RXEN) | (1<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
000096 e9e8      	LDI  R30,LOW(152)
000097 b9ea      	OUT  0xA,R30
                 ; 0000 00A0 //UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (1<<RXEN) | (1<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
                 ; 0000 00A1 UCSRC=(1<<URSEL) | (0<<UMSEL) | (0<<UPM1) | (0<<UPM0) | (0<<USBS) | (1<<UCSZ1) | (1<<UCSZ0) | (0<<UCPOL);
000098 e8e6      	LDI  R30,LOW(134)
000099 bde0      	OUT  0x20,R30
                 ; 0000 00A2 UBRRH=0x00;
00009a e0e0      	LDI  R30,LOW(0)
00009b bde0      	OUT  0x20,R30
                 ; 0000 00A3 UBRRL=0x4D;
00009c e4ed      	LDI  R30,LOW(77)
00009d b9e9      	OUT  0x9,R30
                 ; 0000 00A4 
                 ; 0000 00A5 // Analog Comparator initialization
                 ; 0000 00A6 // Analog Comparator: Off
                 ; 0000 00A7 // The Analog Comparator's positive input is
                 ; 0000 00A8 // connected to the AIN0 pin
                 ; 0000 00A9 // The Analog Comparator's negative input is
                 ; 0000 00AA // connected to the AIN1 pin
                 ; 0000 00AB ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
00009e e8e0      	LDI  R30,LOW(128)
00009f b9e8      	OUT  0x8,R30
                 ; 0000 00AC SFIOR=(0<<ACME);
0000a0 e0e0      	LDI  R30,LOW(0)
0000a1 bfe0      	OUT  0x30,R30
                 ; 0000 00AD 
                 ; 0000 00AE // ADC initialization
                 ; 0000 00AF // ADC disabled
                 ; 0000 00B0 ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADFR) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
0000a2 b9e6      	OUT  0x6,R30
                 ; 0000 00B1 
                 ; 0000 00B2 // SPI initialization
                 ; 0000 00B3 // SPI disabled
                 ; 0000 00B4 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
0000a3 b9ed      	OUT  0xD,R30
                 ; 0000 00B5 
                 ; 0000 00B6 // TWI initialization
                 ; 0000 00B7 // Mode: TWI Master
                 ; 0000 00B8 // Bit Rate: 400 kHz
                 ; 0000 00B9 //twi_master_init(400);
                 ; 0000 00BA TWIInit();
0000a4 d01e      	RCALL _TWIInit
                 ; 0000 00BB 
                 ; 0000 00BC // Alphanumeric LCD initialization
                 ; 0000 00BD // Connections are specified in the
                 ; 0000 00BE // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
                 ; 0000 00BF // RS - PORTD Bit 6
                 ; 0000 00C0 // RD - PORTD Bit 5
                 ; 0000 00C1 // EN - PORTD Bit 4
                 ; 0000 00C2 // D4 - PORTC Bit 3
                 ; 0000 00C3 // D5 - PORTC Bit 2
                 ; 0000 00C4 // D6 - PORTC Bit 1
                 ; 0000 00C5 // D7 - PORTC Bit 0
                 ; 0000 00C6 // Characters/line: 16
                 ; 0000 00C7 lcd_init(16);
0000a5 e1a0      	LDI  R26,LOW(16)
0000a6 d1ad      	RCALL _lcd_init
                 ; 0000 00C8 
                 ; 0000 00C9 // Global enable interrupts
                 ; 0000 00CA #asm("sei")
0000a7 9478      	sei
                 ; 0000 00CB //printf("starting");
                 ; 0000 00CC delay_ms(1000);
0000a8 eea8      	LDI  R26,LOW(1000)
0000a9 e0b3      	LDI  R27,HIGH(1000)
0000aa d255      	RCALL _delay_ms
                 ; 0000 00CD //PN532_begin();
                 ; 0000 00CE //putchar(255);
                 ; 0000 00CF PN532_SAM_config();
0000ab d142      	RCALL _PN532_SAM_config
                 ; 0000 00D0 PN532_get_firmware();
0000ac d135      	RCALL _PN532_get_firmware
                 ; 0000 00D1 
                 ; 0000 00D2 while (1)
                 _0xA:
                 ; 0000 00D3       {
                 ; 0000 00D4       // Place your code here
                 ; 0000 00D5         PN532_read_passive_tag();
0000ad d15d      	RCALL _PN532_read_passive_tag
                 ; 0000 00D6         for(i = 0; i<PN532_msg.buffer[5]; ++i)
                +
0000ae e000     +LDI R16 , LOW ( 0 )
0000af e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0xE:
                +
0000b0 91e0 0209+LDS R30 , _PN532_msg + ( 5 )
                 	__GETB1MN _PN532_msg,5
0000b2 01d8      	MOVW R26,R16
0000b3 e0f0      	LDI  R31,0
0000b4 17ae      	CP   R26,R30
0000b5 07bf      	CPC  R27,R31
0000b6 f43c      	BRGE _0xF
                 ; 0000 00D7         {
                 ; 0000 00D8           putchar(PN532_msg.buffer[6+i]);
0000b7 01f8      	MOVW R30,R16
                +
0000b8 5fe6     +SUBI R30 , LOW ( - _PN532_msg - ( 6 ) )
0000b9 4ffd     +SBCI R31 , HIGH ( - _PN532_msg - ( 6 ) )
                 	__ADDW1MN _PN532_msg,6
0000ba 81a0      	LD   R26,Z
0000bb d1c0      	RCALL _putchar
                 ; 0000 00D9         }
0000bc d1c6      	RCALL SUBOPT_0x0
0000bd cff2      	RJMP _0xE
                 _0xF:
                 ; 0000 00DA         delay_ms(500);
0000be efa4      	LDI  R26,LOW(500)
0000bf e0b1      	LDI  R27,HIGH(500)
0000c0 d23f      	RCALL _delay_ms
                 ; 0000 00DB       }
0000c1 cfeb      	RJMP _0xA
                 ; 0000 00DC }
                 _0x10:
0000c2 cfff      	RJMP _0x10
                 ; .FEND
                 ;#include "PN532_I2C.h"
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;
                 ;TWI_BUFFER_STRUCT twi_rx;
                 ;TWI_BUFFER_STRUCT twi_tx;
                 ;TWI_BUFFER_STRUCT PN532_msg;
                 ;unsigned char checksum;
                 ;int i;
                 ;
                 ;void TWIInit(void)
                 ; 0001 000A {
                 
                 	.CSEG
                 _TWIInit:
                 ; .FSTART _TWIInit
                 ; 0001 000B     //set SCL to 100kHz
                 ; 0001 000C     TWSR = 0x00;
0000c3 e0e0      	LDI  R30,LOW(0)
0000c4 b9e1      	OUT  0x1,R30
                 ; 0001 000D     TWBR = 7;   //347,826
0000c5 e0e7      	LDI  R30,LOW(7)
0000c6 b9e0      	OUT  0x0,R30
                 ; 0001 000E     //enable TWI
                 ; 0001 000F     TWCR = (1<<TWEN);
0000c7 e0e4      	LDI  R30,LOW(4)
0000c8 c007      	RJMP _0x2080006
                 ; 0001 0010 }
                 ; .FEND
                 ;
                 ;void TWIStart(void)
                 ; 0001 0013 {
                 _TWIStart:
                 ; .FSTART _TWIStart
                 ; 0001 0014     TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
0000c9 eae4      	LDI  R30,LOW(164)
0000ca bfe6      	OUT  0x36,R30
                 ; 0001 0015     while ((TWCR & (1<<TWINT)) == 0);
                 _0x20003:
0000cb b7e6      	IN   R30,0x36
0000cc ffe7      	SBRS R30,7
0000cd cffd      	RJMP _0x20003
                 ; 0001 0016 }
0000ce 9508      	RET
                 ; .FEND
                 ;//send stop signal
                 ;void TWIStop(void)
                 ; 0001 0019 {
                 _TWIStop:
                 ; .FSTART _TWIStop
                 ; 0001 001A     TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
0000cf e9e4      	LDI  R30,LOW(148)
                 _0x2080006:
0000d0 bfe6      	OUT  0x36,R30
                 ; 0001 001B }
0000d1 9508      	RET
                 ; .FEND
                 ;
                 ;void TWIWrite(unsigned char u8data)
                 ; 0001 001E {
                 _TWIWrite:
                 ; .FSTART _TWIWrite
                 ; 0001 001F     TWDR = u8data;
0000d2 93aa      	ST   -Y,R26
                 ;	u8data -> Y+0
0000d3 81e8      	LD   R30,Y
0000d4 b9e3      	OUT  0x3,R30
                 ; 0001 0020     TWCR = (1<<TWINT)|(1<<TWEN);
0000d5 e8e4      	LDI  R30,LOW(132)
0000d6 bfe6      	OUT  0x36,R30
                 ; 0001 0021     while ((TWCR & (1<<TWINT)) == 0);
                 _0x20006:
0000d7 b7e6      	IN   R30,0x36
0000d8 ffe7      	SBRS R30,7
0000d9 cffd      	RJMP _0x20006
                 ; 0001 0022 }
0000da c1a6      	RJMP _0x2080001
                 ; .FEND
                 ;
                 ;//read byte with ACK (Set TWEA, clear TWEA to send NACK, indicating master receiver has read the last byte)
                 ;unsigned char TWIRead(int ack)
                 ; 0001 0026 {
                 _TWIRead:
                 ; .FSTART _TWIRead
                 ; 0001 0027     TWCR = (1<<TWINT)|(1<<TWEN)|(ack<<TWEA);
0000db d1aa      	RCALL SUBOPT_0x1
                 ;	ack -> Y+0
0000dc 81e8      	LD   R30,Y
0000dd 95e2      	SWAP R30
0000de 7fe0      	ANDI R30,0xF0
0000df 0fee      	LSL  R30
0000e0 0fee      	LSL  R30
0000e1 68e4      	ORI  R30,LOW(0x84)
0000e2 bfe6      	OUT  0x36,R30
                 ; 0001 0028     while ((TWCR & (1<<TWINT)) == 0);
                 _0x20009:
0000e3 b7e6      	IN   R30,0x36
0000e4 ffe7      	SBRS R30,7
0000e5 cffd      	RJMP _0x20009
                 ; 0001 0029     return TWDR;
0000e6 b1e3      	IN   R30,0x3
0000e7 c013      	RJMP _0x2080005
                 ; 0001 002A }
                 ; .FEND
                 ;
                 ;void PN532_cmd(TWI_BUFFER_STRUCT* msg)
                 ; 0001 002D {
                 _PN532_cmd:
                 ; .FSTART _PN532_cmd
                 ; 0001 002E   TWIStart();
0000e8 d19d      	RCALL SUBOPT_0x1
                 ;	*msg -> Y+0
0000e9 dfdf      	RCALL _TWIStart
                 ; 0001 002F   TWIWrite(PN532_ADD);
0000ea e4a8      	LDI  R26,LOW(72)
0000eb dfe6      	RCALL _TWIWrite
                 ; 0001 0030   for(i = 0; i < msg->length; ++i){
0000ec d19c      	RCALL SUBOPT_0x2
                 _0x2000D:
0000ed 81a8      	LD   R26,Y
0000ee 81b9      	LDD  R27,Y+1
0000ef d19c      	RCALL SUBOPT_0x3
0000f0 d19e      	RCALL SUBOPT_0x4
0000f1 f444      	BRGE _0x2000E
                 ; 0001 0031     TWIWrite(msg->buffer[i]);
0000f2 01f4      	MOVW R30,R8
0000f3 81a8      	LD   R26,Y
0000f4 81b9      	LDD  R27,Y+1
0000f5 d19d      	RCALL SUBOPT_0x5
0000f6 91ac      	LD   R26,X
0000f7 dfda      	RCALL _TWIWrite
                 ; 0001 0032   }
0000f8 d19d      	RCALL SUBOPT_0x6
0000f9 cff3      	RJMP _0x2000D
                 _0x2000E:
                 ; 0001 0033   TWIStop();
0000fa dfd4      	RCALL _TWIStop
                 ; 0001 0034 }
                 _0x2080005:
0000fb 9622      	ADIW R28,2
0000fc 9508      	RET
                 ; .FEND
                 ;
                 ;void PN532_build_msg(TWI_BUFFER_STRUCT* buffer, TWI_BUFFER_STRUCT* msg)
                 ; 0001 0037 {
                 _PN532_build_msg:
                 ; .FSTART _PN532_build_msg
                 ; 0001 0038   int msg_length = 0;
                 ; 0001 0039   checksum = 0xD4;
0000fd d188      	RCALL SUBOPT_0x1
0000fe d216      	RCALL __SAVELOCR2
                 ;	*buffer -> Y+4
                 ;	*msg -> Y+2
                 ;	msg_length -> R16,R17
                +
0000ff e000     +LDI R16 , LOW ( 0 )
000100 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
000101 ede4      	LDI  R30,LOW(212)
000102 2e6e      	MOV  R6,R30
                 ; 0001 003A 
                 ; 0001 003B   buffer->buffer[PN532_START]=0x00;                     ++msg_length;
000103 d196      	RCALL SUBOPT_0x7
000104 e0e0      	LDI  R30,LOW(0)
000105 d197      	RCALL SUBOPT_0x8
                 ; 0001 003C   buffer->buffer[PN532_START+1]=0xFF;                   ++msg_length;
000106 d193      	RCALL SUBOPT_0x7
000107 9611      	ADIW R26,1
000108 efef      	LDI  R30,LOW(255)
000109 d193      	RCALL SUBOPT_0x8
                 ; 0001 003D   buffer->buffer[PN532_LEN]=msg->length+1;               ++msg_length;
00010a d194      	RCALL SUBOPT_0x9
                +
00010b 81ac     +LDD R26 , Y + 4
00010c 81bd     +LDD R27 , Y + 4 + 1
00010d 9612     +ADIW R26 , 2
00010e 93ec     +ST X , R30
                 	__PUTB1SNS 4,2
00010f d173      	RCALL SUBOPT_0x0
                 ; 0001 003E   buffer->buffer[PN532_LCS]=(~(msg->length+1))+1;        ++msg_length;
000110 d18e      	RCALL SUBOPT_0x9
000111 95e1      	NEG  R30
                +
000112 81ac     +LDD R26 , Y + 4
000113 81bd     +LDD R27 , Y + 4 + 1
000114 9613     +ADIW R26 , 3
000115 93ec     +ST X , R30
                 	__PUTB1SNS 4,3
000116 d16c      	RCALL SUBOPT_0x0
                 ; 0001 003F   buffer->buffer[PN532_TFI]=0xD4;                       ++msg_length;
000117 d182      	RCALL SUBOPT_0x7
000118 9614      	ADIW R26,4
000119 ede4      	LDI  R30,LOW(212)
00011a d182      	RCALL SUBOPT_0x8
                 ; 0001 0040   for(i = 0; i<msg->length; ++i){
00011b d16d      	RCALL SUBOPT_0x2
                 _0x20010:
00011c d188      	RCALL SUBOPT_0xA
00011d d16e      	RCALL SUBOPT_0x3
00011e d170      	RCALL SUBOPT_0x4
00011f f464      	BRGE _0x20011
                 ; 0001 0041     buffer->buffer[PN532_DATA+i]=msg->buffer[i];              ++msg_length;
000120 01f4      	MOVW R30,R8
000121 9635      	ADIW R30,5
000122 d177      	RCALL SUBOPT_0x7
000123 d184      	RCALL SUBOPT_0xB
000124 010f      	MOVW R0,R30
000125 d185      	RCALL SUBOPT_0xC
000126 01d0      	MOVW R26,R0
000127 d175      	RCALL SUBOPT_0x8
                 ; 0001 0042     checksum += msg->buffer[i];
000128 d182      	RCALL SUBOPT_0xC
000129 0e6e      	ADD  R6,R30
                 ; 0001 0043   }
00012a d16b      	RCALL SUBOPT_0x6
00012b cff0      	RJMP _0x20010
                 _0x20011:
                 ; 0001 0044   buffer->buffer[PN532_DATA+i]= (~(checksum&0xFF))+1;   ++msg_length;
00012c 01f4      	MOVW R30,R8
00012d 9635      	ADIW R30,5
00012e d16b      	RCALL SUBOPT_0x7
00012f d163      	RCALL SUBOPT_0x5
000130 2de6      	MOV  R30,R6
000131 95e1      	NEG  R30
000132 d16a      	RCALL SUBOPT_0x8
                 ; 0001 0045   buffer->length = msg_length;
000133 01f8      	MOVW R30,R16
                +
000134 81ac     +LDD R26 , Y + 4
000135 81bd     +LDD R27 , Y + 4 + 1
000136 5ba0     +SUBI R26 , LOW ( - 80 )
000137 4fbf     +SBCI R27 , HIGH ( - 80 )
000138 93ed     +ST X + , R30
000139 93fc     +ST X , R31
                 	__PUTW1SN 4,80
                 ; 0001 0046 }
00013a d1dd      	RCALL __LOADLOCR2
00013b 9626      	ADIW R28,6
00013c 9508      	RET
                 ; .FEND
                 ;
                 ;bool PN532_read(TWI_BUFFER_STRUCT* dest)
                 ; 0001 0049 {
                 _PN532_read:
                 ; .FSTART _PN532_read
                 ; 0001 004A   unsigned char data = 0x00;
                 ; 0001 004B   unsigned char len = 0x00;
                 ; 0001 004C   // check ready bit
                 ; 0001 004D   while(1){
00013d d148      	RCALL SUBOPT_0x1
00013e d1d6      	RCALL __SAVELOCR2
                 ;	*dest -> Y+2
                 ;	data -> R17
                 ;	len -> R16
00013f e010      	LDI  R17,0
000140 e000      	LDI  R16,0
                 _0x20012:
                 ; 0001 004E     TWIStart();
000141 d16e      	RCALL SUBOPT_0xD
                 ; 0001 004F     TWIWrite(PN532_ADD | 1);
                 ; 0001 0050     data = TWIRead(1);
                 ; 0001 0051     if(data==0x00) TWIStop();
000142 f411      	BRNE _0x20015
000143 df8b      	RCALL _TWIStop
                 ; 0001 0052     else if(data==0x01) break;
000144 c002      	RJMP _0x20016
                 _0x20015:
000145 3011      	CPI  R17,1
000146 f009      	BREQ _0x20014
                 ; 0001 0053   }
                 _0x20016:
000147 cff9      	RJMP _0x20012
                 _0x20014:
                 ; 0001 0054   // get rid of preamble
                 ; 0001 0055   TWIRead(1);
000148 d170      	RCALL SUBOPT_0xE
                 ; 0001 0056   //check start of packet
                 ; 0001 0057   if((data=TWIRead(1))!=0x00) {TWIStop(); return false;}
000149 d16f      	RCALL SUBOPT_0xE
00014a 2f1e      	MOV  R17,R30
00014b 30e0      	CPI  R30,0
00014c f011      	BREQ _0x20018
00014d d16e      	RCALL SUBOPT_0xF
00014e c040      	RJMP _0x2080004
                 ; 0001 0058   dest->buffer[len++]=data;
                 _0x20018:
00014f d16f      	RCALL SUBOPT_0x10
                 ; 0001 0059   if((data=TWIRead(1))!=0xFF) {TWIStop(); return false;}
000150 d168      	RCALL SUBOPT_0xE
000151 2f1e      	MOV  R17,R30
000152 3fef      	CPI  R30,LOW(0xFF)
000153 f011      	BREQ _0x20019
000154 d167      	RCALL SUBOPT_0xF
000155 c039      	RJMP _0x2080004
                 ; 0001 005A   dest->buffer[len++]=data;
                 _0x20019:
000156 d168      	RCALL SUBOPT_0x10
                 ; 0001 005B 
                 ; 0001 005C   //get length
                 ; 0001 005D   dest->buffer[len++]=TWIRead(1);
000157 d16e      	RCALL SUBOPT_0x11
000158 93ff      	PUSH R31
000159 93ef      	PUSH R30
00015a d15e      	RCALL SUBOPT_0xE
00015b 91af      	POP  R26
00015c 91bf      	POP  R27
00015d 93ec      	ST   X,R30
                 ; 0001 005E   //get length checksum
                 ; 0001 005F   dest->buffer[len++]=TWIRead(1);
00015e d167      	RCALL SUBOPT_0x11
00015f 93ff      	PUSH R31
000160 93ef      	PUSH R30
000161 d157      	RCALL SUBOPT_0xE
000162 91af      	POP  R26
000163 91bf      	POP  R27
000164 93ec      	ST   X,R30
                 ; 0001 0060   //get TFI (should be D5)
                 ; 0001 0061   dest->buffer[len++]=TWIRead(1);
000165 d160      	RCALL SUBOPT_0x11
000166 93ff      	PUSH R31
000167 93ef      	PUSH R30
000168 d150      	RCALL SUBOPT_0xE
000169 91af      	POP  R26
00016a 91bf      	POP  R27
00016b 93ec      	ST   X,R30
                 ; 0001 0062 
                 ; 0001 0063   for(i =0; i < dest->buffer[PN532_LEN]-1; ++i)
00016c d11c      	RCALL SUBOPT_0x2
                 _0x2001B:
00016d 81ea      	LDD  R30,Y+2
00016e 81fb      	LDD  R31,Y+2+1
00016f 81e2      	LDD  R30,Z+2
000170 e0f0      	LDI  R31,0
000171 9731      	SBIW R30,1
000172 168e      	CP   R8,R30
000173 069f      	CPC  R9,R31
000174 f44c      	BRGE _0x2001C
                 ; 0001 0064   {
                 ; 0001 0065     dest->buffer[len++] = TWIRead(1);
000175 d150      	RCALL SUBOPT_0x11
000176 93ff      	PUSH R31
000177 93ef      	PUSH R30
000178 d140      	RCALL SUBOPT_0xE
000179 91af      	POP  R26
00017a 91bf      	POP  R27
00017b 93ec      	ST   X,R30
                 ; 0001 0066   }
00017c d119      	RCALL SUBOPT_0x6
00017d cfef      	RJMP _0x2001B
                 _0x2001C:
                 ; 0001 0067 
                 ; 0001 0068   //skip data checksum
                 ; 0001 0069   dest->buffer[len++]=TWIRead(0);
00017e d147      	RCALL SUBOPT_0x11
00017f 93ff      	PUSH R31
000180 93ef      	PUSH R30
000181 e0a0      	LDI  R26,LOW(0)
000182 e0b0      	LDI  R27,0
000183 df57      	RCALL _TWIRead
000184 91af      	POP  R26
000185 91bf      	POP  R27
000186 93ec      	ST   X,R30
                 ; 0001 006A 
                 ; 0001 006B   //set buffer length
                 ; 0001 006C   dest->length = len;
000187 d11d      	RCALL SUBOPT_0xA
000188 d103      	RCALL SUBOPT_0x3
000189 2fe0      	MOV  R30,R16
00018a e0f0      	LDI  R31,0
00018b 93ed      	ST   X+,R30
00018c 93fc      	ST   X,R31
                 ; 0001 006D 
                 ; 0001 006E   //close comm
                 ; 0001 006F   TWIStop();
00018d df41      	RCALL _TWIStop
                 ; 0001 0070 
                 ; 0001 0071   //return true on success
                 ; 0001 0072   return true;
00018e e0e1      	LDI  R30,LOW(1)
                 _0x2080004:
00018f d188      	RCALL __LOADLOCR2
000190 9624      	ADIW R28,4
000191 9508      	RET
                 ; 0001 0073 }
                 ; .FEND
                 ;
                 ;void PN532_get_msg(TWI_BUFFER_STRUCT* src, TWI_BUFFER_STRUCT* dest, unsigned char offset)
                 ; 0001 0076 {
                 _PN532_get_msg:
                 ; .FSTART _PN532_get_msg
                 ; 0001 0077   // exclude TFI from src, thus -1
                 ; 0001 0078   dest->length = src->buffer[PN532_LEN]-1-offset;
000192 93aa      	ST   -Y,R26
                 ;	*src -> Y+3
                 ;	*dest -> Y+1
                 ;	offset -> Y+0
000193 81eb      	LDD  R30,Y+3
000194 81fc      	LDD  R31,Y+3+1
000195 81e2      	LDD  R30,Z+2
000196 e0f0      	LDI  R31,0
000197 9731      	SBIW R30,1
000198 01df      	MOVW R26,R30
000199 81e8      	LD   R30,Y
00019a e0f0      	LDI  R31,0
00019b d172      	RCALL __SWAPW12
00019c 1bea      	SUB  R30,R26
00019d 0bfb      	SBC  R31,R27
                +
00019e 81a9     +LDD R26 , Y + 1
00019f 81ba     +LDD R27 , Y + 1 + 1
0001a0 5ba0     +SUBI R26 , LOW ( - 80 )
0001a1 4fbf     +SBCI R27 , HIGH ( - 80 )
0001a2 93ed     +ST X + , R30
0001a3 93fc     +ST X , R31
                 	__PUTW1SN 1,80
                 ; 0001 0079   for(i=0; i < dest->length; ++i)
0001a4 d0e4      	RCALL SUBOPT_0x2
                 _0x2001E:
0001a5 81a9      	LDD  R26,Y+1
0001a6 81ba      	LDD  R27,Y+1+1
0001a7 d0e4      	RCALL SUBOPT_0x3
0001a8 d0e6      	RCALL SUBOPT_0x4
0001a9 f494      	BRGE _0x2001F
                 ; 0001 007A   {
                 ; 0001 007B     dest->buffer[i] = src->buffer[PN532_DATA+i+offset];
0001aa 01f4      	MOVW R30,R8
0001ab 81a9      	LDD  R26,Y+1
0001ac 81ba      	LDD  R27,Y+1+1
0001ad d0fa      	RCALL SUBOPT_0xB
0001ae 010f      	MOVW R0,R30
0001af 01d4      	MOVW R26,R8
0001b0 9615      	ADIW R26,5
0001b1 81e8      	LD   R30,Y
0001b2 e0f0      	LDI  R31,0
0001b3 d0f4      	RCALL SUBOPT_0xB
0001b4 81ab      	LDD  R26,Y+3
0001b5 81bc      	LDD  R27,Y+3+1
0001b6 d0dc      	RCALL SUBOPT_0x5
0001b7 91ec      	LD   R30,X
0001b8 01d0      	MOVW R26,R0
0001b9 93ec      	ST   X,R30
                 ; 0001 007C   }
0001ba d0db      	RCALL SUBOPT_0x6
0001bb cfe9      	RJMP _0x2001E
                 _0x2001F:
                 ; 0001 007D }
0001bc 9625      	ADIW R28,5
0001bd 9508      	RET
                 ; .FEND
                 ;
                 ;bool PN532_wait_for_ack(){
                 ; 0001 007F _Bool PN532_wait_for_ack(){
                 _PN532_wait_for_ack:
                 ; .FSTART _PN532_wait_for_ack
                 ; 0001 0080   unsigned char data = 0x00;
                 ; 0001 0081   // check ready bit
                 ; 0001 0082   while(1){
0001be 931a      	ST   -Y,R17
                 ;	data -> R17
0001bf e010      	LDI  R17,0
                 _0x20020:
                 ; 0001 0083     TWIStart();
0001c0 d0ef      	RCALL SUBOPT_0xD
                 ; 0001 0084     TWIWrite(PN532_ADD | 1);
                 ; 0001 0085     //TWIStart();
                 ; 0001 0086     data = TWIRead(1);
                 ; 0001 0087     if(data==0x00) TWIStop();
0001c1 f411      	BRNE _0x20023
0001c2 df0c      	RCALL _TWIStop
                 ; 0001 0088     else if(data==0x01) break;
0001c3 c002      	RJMP _0x20024
                 _0x20023:
0001c4 3011      	CPI  R17,1
0001c5 f009      	BREQ _0x20022
                 ; 0001 0089   }
                 _0x20024:
0001c6 cff9      	RJMP _0x20020
                 _0x20022:
                 ; 0001 008A   // get rid of preamble
                 ; 0001 008B   TWIRead(1);
0001c7 d0f1      	RCALL SUBOPT_0xE
                 ; 0001 008C   //check start of packet
                 ; 0001 008D   if(TWIRead(1)!=0x00) {TWIStop(); return false;}
0001c8 d0f0      	RCALL SUBOPT_0xE
0001c9 30e0      	CPI  R30,0
0001ca f011      	BREQ _0x20026
0001cb d0f0      	RCALL SUBOPT_0xF
0001cc c013      	RJMP _0x2080003
                 ; 0001 008E   if(TWIRead(1)!=0xFF) {TWIStop(); return false;}
                 _0x20026:
0001cd d0eb      	RCALL SUBOPT_0xE
0001ce 3fef      	CPI  R30,LOW(0xFF)
0001cf f011      	BREQ _0x20027
0001d0 d0eb      	RCALL SUBOPT_0xF
0001d1 c00e      	RJMP _0x2080003
                 ; 0001 008F 
                 ; 0001 0090   //check ack
                 ; 0001 0091   if(TWIRead(1)!=0x00) {TWIStop(); return false;}
                 _0x20027:
0001d2 d0e6      	RCALL SUBOPT_0xE
0001d3 30e0      	CPI  R30,0
0001d4 f011      	BREQ _0x20028
0001d5 d0e6      	RCALL SUBOPT_0xF
0001d6 c009      	RJMP _0x2080003
                 ; 0001 0092   if(TWIRead(0)!=0xFF) {TWIStop(); return false;}
                 _0x20028:
0001d7 e0a0      	LDI  R26,LOW(0)
0001d8 e0b0      	LDI  R27,0
0001d9 df01      	RCALL _TWIRead
0001da 3fef      	CPI  R30,LOW(0xFF)
0001db f011      	BREQ _0x20029
0001dc d0df      	RCALL SUBOPT_0xF
0001dd c002      	RJMP _0x2080003
                 ; 0001 0093   TWIStop();
                 _0x20029:
0001de def0      	RCALL _TWIStop
                 ; 0001 0094   return true;
0001df e0e1      	LDI  R30,LOW(1)
                 _0x2080003:
0001e0 9119      	LD   R17,Y+
0001e1 9508      	RET
                 ; 0001 0095 }
                 ; .FEND
                 ;
                 ;void PN532_get_firmware()
                 ; 0001 0098 {
                 _PN532_get_firmware:
                 ; .FSTART _PN532_get_firmware
                 ; 0001 0099   PN532_msg.buffer[0]=PN532_CMD_GETFIRMWARE;
0001e2 e0e2      	LDI  R30,LOW(2)
0001e3 93e0 0204 	STS  _PN532_msg,R30
                 ; 0001 009A   PN532_msg.length=1;
0001e5 e0e1      	LDI  R30,LOW(1)
0001e6 e0f0      	LDI  R31,HIGH(1)
0001e7 d0e3      	RCALL SUBOPT_0x12
                 ; 0001 009B   PN532_build_msg(&twi_tx, &PN532_msg);
                 ; 0001 009C   PN532_cmd(&twi_tx);
                 ; 0001 009D   delay_ms(20);
                 ; 0001 009E   while(!PN532_wait_for_ack()) delay_ms(20);
                 _0x2002A:
0001e8 dfd5      	RCALL _PN532_wait_for_ack
0001e9 30e0      	CPI  R30,0
0001ea f411      	BRNE _0x2002C
0001eb d0f0      	RCALL SUBOPT_0x13
0001ec cffb      	RJMP _0x2002A
                 _0x2002C:
                 ; 0001 009F delay_ms(20);
0001ed c02a      	RJMP _0x2080002
                 ; 0001 00A0   PN532_read(&twi_rx);
                 ; 0001 00A1   PN532_get_msg(&twi_rx, &PN532_msg, 1);
                 ; 0001 00A2 }
                 ; .FEND
                 ;
                 ;bool PN532_SAM_config()
                 ; 0001 00A5 {
                 _PN532_SAM_config:
                 ; .FSTART _PN532_SAM_config
                 ; 0001 00A6   PN532_msg.buffer[0] = PN532_CMD_SAMCONFIGURATION;
0001ee e1e4      	LDI  R30,LOW(20)
0001ef d0ef      	RCALL SUBOPT_0x14
                 ; 0001 00A7   PN532_msg.buffer[1] = 0x01; // normal mode;
                 ; 0001 00A8   PN532_msg.buffer[2] = 0x14; // timeout 50ms * 20 = 1 second
0001f0 e1e4      	LDI  R30,LOW(20)
                +
0001f1 93e0 0206+STS _PN532_msg + ( 2 ) , R30
                 	__PUTB1MN _PN532_msg,2
                 ; 0001 00A9   PN532_msg.buffer[3] = 0x00; // not using IRQ pin!
0001f3 e0e0      	LDI  R30,LOW(0)
                +
0001f4 93e0 0207+STS _PN532_msg + ( 3 ) , R30
                 	__PUTB1MN _PN532_msg,3
                 ; 0001 00AA   PN532_msg.length=4;
0001f6 e0e4      	LDI  R30,LOW(4)
0001f7 e0f0      	LDI  R31,HIGH(4)
0001f8 d0d2      	RCALL SUBOPT_0x12
                 ; 0001 00AB   PN532_build_msg(&twi_tx, &PN532_msg);
                 ; 0001 00AC   PN532_cmd(&twi_tx);
                 ; 0001 00AD   delay_ms(20);
                 ; 0001 00AE   while(!PN532_wait_for_ack()) delay_ms(20);
                 _0x2002D:
0001f9 dfc4      	RCALL _PN532_wait_for_ack
0001fa 30e0      	CPI  R30,0
0001fb f411      	BRNE _0x2002F
0001fc d0df      	RCALL SUBOPT_0x13
0001fd cffb      	RJMP _0x2002D
                 _0x2002F:
                 ; 0001 00AF delay_ms(20);
0001fe d0dd      	RCALL SUBOPT_0x13
                 ; 0001 00B0   PN532_read(&twi_rx);
0001ff d0e5      	RCALL SUBOPT_0x15
                 ; 0001 00B1   PN532_get_msg(&twi_rx, &PN532_msg, 0);
000200 e0a0      	LDI  R26,LOW(0)
000201 df90      	RCALL _PN532_get_msg
                 ; 0001 00B2   if(PN532_msg.buffer[0]==0x15) return true;
000202 91a0 0204 	LDS  R26,_PN532_msg
000204 31a5      	CPI  R26,LOW(0x15)
000205 f411      	BRNE _0x20030
000206 e0e1      	LDI  R30,LOW(1)
000207 9508      	RET
                 ; 0001 00B3   else return false;
                 _0x20030:
000208 e0e0      	LDI  R30,LOW(0)
000209 9508      	RET
                 ; 0001 00B4 }
00020a 9508      	RET
                 ; .FEND
                 ;
                 ;void PN532_read_passive_tag()
                 ; 0001 00B7 {
                 _PN532_read_passive_tag:
                 ; .FSTART _PN532_read_passive_tag
                 ; 0001 00B8   PN532_msg.buffer[0] = PN532_CMD_INLISTPASSIVETARGET;
00020b e4ea      	LDI  R30,LOW(74)
00020c d0d2      	RCALL SUBOPT_0x14
                 ; 0001 00B9   PN532_msg.buffer[1] = 1;  // max 1 cards at once
                 ; 0001 00BA   PN532_msg.buffer[2] = PN532_MIFARE_ISO14443A; //baudrate
00020d e0e0      	LDI  R30,LOW(0)
                +
00020e 93e0 0206+STS _PN532_msg + ( 2 ) , R30
                 	__PUTB1MN _PN532_msg,2
                 ; 0001 00BB   PN532_msg.length=3;
000210 e0e3      	LDI  R30,LOW(3)
000211 e0f0      	LDI  R31,HIGH(3)
000212 d0b8      	RCALL SUBOPT_0x12
                 ; 0001 00BC   PN532_build_msg(&twi_tx, &PN532_msg);
                 ; 0001 00BD   PN532_cmd(&twi_tx);
                 ; 0001 00BE   delay_ms(20);
                 ; 0001 00BF   while(!PN532_wait_for_ack()) delay_ms(20);
                 _0x20032:
000213 dfaa      	RCALL _PN532_wait_for_ack
000214 30e0      	CPI  R30,0
000215 f411      	BRNE _0x20034
000216 d0c5      	RCALL SUBOPT_0x13
000217 cffb      	RJMP _0x20032
                 _0x20034:
                 ; 0001 00C0 delay_ms(20);
                 _0x2080002:
000218 e1a4      	LDI  R26,LOW(20)
000219 e0b0      	LDI  R27,0
00021a d0e5      	RCALL _delay_ms
                 ; 0001 00C1   PN532_read(&twi_rx);
00021b d0c9      	RCALL SUBOPT_0x15
                 ; 0001 00C2   PN532_get_msg(&twi_rx, &PN532_msg, 1);
00021c e0a1      	LDI  R26,LOW(1)
00021d df74      	RCALL _PN532_get_msg
                 ; 0001 00C3   /* ISO14443A card response should be in the following format:
                 ; 0001 00C4 
                 ; 0001 00C5     byte            Description
                 ; 0001 00C6     -------------   ------------------------------------------
                 ; 0001 00C7     b0..6           Frame header and preamble
                 ; 0001 00C8     b7              Tags Found
                 ; 0001 00C9     b8              Tag Number (only one used in this example)
                 ; 0001 00CA     b9..10          SENS_RES
                 ; 0001 00CB     b11             SEL_RES
                 ; 0001 00CC     b12             NFCID Length
                 ; 0001 00CD     b13..NFCIDLen   NFCID                                      */
                 ; 0001 00CE }
00021e 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G101:
                 ; .FSTART __lcd_write_nibble_G101
00021f 93aa      	ST   -Y,R26
000220 81e8      	LD   R30,Y
000221 71e0      	ANDI R30,LOW(0x10)
000222 f011      	BREQ _0x2020004
000223 9aab      	SBI  0x15,3
000224 c001      	RJMP _0x2020005
                 _0x2020004:
000225 98ab      	CBI  0x15,3
                 _0x2020005:
000226 81e8      	LD   R30,Y
000227 72e0      	ANDI R30,LOW(0x20)
000228 f011      	BREQ _0x2020006
000229 9aaa      	SBI  0x15,2
00022a c001      	RJMP _0x2020007
                 _0x2020006:
00022b 98aa      	CBI  0x15,2
                 _0x2020007:
00022c 81e8      	LD   R30,Y
00022d 74e0      	ANDI R30,LOW(0x40)
00022e f011      	BREQ _0x2020008
00022f 9aa9      	SBI  0x15,1
000230 c001      	RJMP _0x2020009
                 _0x2020008:
000231 98a9      	CBI  0x15,1
                 _0x2020009:
000232 81e8      	LD   R30,Y
000233 78e0      	ANDI R30,LOW(0x80)
000234 f011      	BREQ _0x202000A
000235 9aa8      	SBI  0x15,0
000236 c001      	RJMP _0x202000B
                 _0x202000A:
000237 98a8      	CBI  0x15,0
                 _0x202000B:
000238 d0b8      	RCALL SUBOPT_0x16
000239 9a94      	SBI  0x12,4
00023a d0b6      	RCALL SUBOPT_0x16
00023b 9894      	CBI  0x12,4
00023c d0b4      	RCALL SUBOPT_0x16
00023d c043      	RJMP _0x2080001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
00023e 93aa      	ST   -Y,R26
00023f 81a8      	LD   R26,Y
000240 dfde      	RCALL __lcd_write_nibble_G101
000241 81e8          ld    r30,y
000242 95e2          swap  r30
000243 83e8          st    y,r30
000244 81a8      	LD   R26,Y
000245 dfd9      	RCALL __lcd_write_nibble_G101
                +
000246 ec88     +LDI R24 , LOW ( 200 )
                +__DELAY_USB_LOOP :
000247 958a     +DEC R24
000248 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 200
000249 c037      	RJMP _0x2080001
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
00024a e0a2      	LDI  R26,LOW(2)
00024b d0a9      	RCALL SUBOPT_0x17
00024c e0ac      	LDI  R26,LOW(12)
00024d dff0      	RCALL __lcd_write_data
00024e e0a1      	LDI  R26,LOW(1)
00024f d0a5      	RCALL SUBOPT_0x17
000250 e0e0      	LDI  R30,LOW(0)
000251 2eae      	MOV  R10,R30
000252 2ebe      	MOV  R11,R30
000253 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
000254 93aa      	ST   -Y,R26
000255 9aa3      	SBI  0x14,3
000256 9aa2      	SBI  0x14,2
000257 9aa1      	SBI  0x14,1
000258 9aa0      	SBI  0x14,0
000259 9a8c      	SBI  0x11,4
00025a 9a8e      	SBI  0x11,6
00025b 9a8d      	SBI  0x11,5
00025c 9894      	CBI  0x12,4
00025d 9896      	CBI  0x12,6
00025e 9895      	CBI  0x12,5
00025f 80d8      	LDD  R13,Y+0
000260 81e8      	LD   R30,Y
000261 58e0      	SUBI R30,-LOW(128)
                +
000262 93e0 0260+STS __base_y_G101 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G101,2
000264 81e8      	LD   R30,Y
000265 54e0      	SUBI R30,-LOW(192)
                +
000266 93e0 0261+STS __base_y_G101 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G101,3
000268 d073      	RCALL SUBOPT_0x13
000269 d08f      	RCALL SUBOPT_0x18
00026a d08e      	RCALL SUBOPT_0x18
00026b d08d      	RCALL SUBOPT_0x18
00026c e2a0      	LDI  R26,LOW(32)
00026d dfb1      	RCALL __lcd_write_nibble_G101
                +
00026e e28c     +LDI R24 , LOW ( 300 )
00026f e091     +LDI R25 , HIGH ( 300 )
                +__DELAY_USW_LOOP :
000270 9701     +SBIW R24 , 1
000271 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 300
000272 e2a8      	LDI  R26,LOW(40)
000273 dfca      	RCALL __lcd_write_data
000274 e0a4      	LDI  R26,LOW(4)
000275 dfc8      	RCALL __lcd_write_data
000276 e8a5      	LDI  R26,LOW(133)
000277 dfc6      	RCALL __lcd_write_data
000278 e0a6      	LDI  R26,LOW(6)
000279 dfc4      	RCALL __lcd_write_data
00027a dfcf      	RCALL _lcd_clear
00027b c005      	RJMP _0x2080001
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _putchar:
                 ; .FSTART _putchar
00027c 93aa      	ST   -Y,R26
                 putchar0:
00027d 9b5d           sbis usr,udre
00027e cffe           rjmp putchar0
00027f 81e8           ld   r30,y
000280 b9ec           out  udr,r30
                 _0x2080001:
000281 9621      	ADIW R28,1
000282 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.DSEG
                 _twi_rx:
000160           	.BYTE 0x52
                 _twi_tx:
0001b2           	.BYTE 0x52
                 _PN532_msg:
000204           	.BYTE 0x52
                 _rx_buffer:
000256           	.BYTE 0x8
                 __base_y_G101:
00025e           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x0:
                +
000283 5f0f     +SUBI R16 , LOW ( - 1 )
000284 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000285 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
000286 93ba      	ST   -Y,R27
000287 93aa      	ST   -Y,R26
000288 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2:
000289 2488      	CLR  R8
00028a 2499      	CLR  R9
00028b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x3:
00028c 5ba0      	SUBI R26,LOW(-80)
00028d 4fbf      	SBCI R27,HIGH(-80)
00028e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x4:
00028f d07a      	RCALL __GETW1P
000290 168e      	CP   R8,R30
000291 069f      	CPC  R9,R31
000292 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x5:
000293 0fae      	ADD  R26,R30
000294 1fbf      	ADC  R27,R31
000295 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x6:
000296 01f4      	MOVW R30,R8
000297 9631      	ADIW R30,1
000298 014f      	MOVW R8,R30
000299 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x7:
00029a 81ac      	LDD  R26,Y+4
00029b 81bd      	LDD  R27,Y+4+1
00029c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x8:
00029d 93ec      	ST   X,R30
00029e cfe4      	RJMP SUBOPT_0x0
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x9:
00029f 81aa      	LDD  R26,Y+2
0002a0 81bb      	LDD  R27,Y+2+1
0002a1 dfea      	RCALL SUBOPT_0x3
0002a2 91ec      	LD   R30,X
0002a3 5fef      	SUBI R30,-LOW(1)
0002a4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 11 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0xA:
0002a5 81aa      	LDD  R26,Y+2
0002a6 81bb      	LDD  R27,Y+2+1
0002a7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 10 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0xB:
0002a8 0fea      	ADD  R30,R26
0002a9 1ffb      	ADC  R31,R27
0002aa 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xC:
0002ab 01f4      	MOVW R30,R8
0002ac dff8      	RCALL SUBOPT_0xA
0002ad dfe5      	RCALL SUBOPT_0x5
0002ae 91ec      	LD   R30,X
0002af 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0xD:
0002b0 de18      	RCALL _TWIStart
0002b1 e4a9      	LDI  R26,LOW(73)
0002b2 de1f      	RCALL _TWIWrite
0002b3 e0a1      	LDI  R26,LOW(1)
0002b4 e0b0      	LDI  R27,0
0002b5 de25      	RCALL _TWIRead
0002b6 2f1e      	MOV  R17,R30
0002b7 3010      	CPI  R17,0
0002b8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 11 TIMES, CODE SIZE REDUCTION:18 WORDS
                 SUBOPT_0xE:
0002b9 e0a1      	LDI  R26,LOW(1)
0002ba e0b0      	LDI  R27,0
0002bb ce1f      	RJMP _TWIRead
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xF:
0002bc de12      	RCALL _TWIStop
0002bd e0e0      	LDI  R30,LOW(0)
0002be 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x10:
0002bf 2fe0      	MOV  R30,R16
0002c0 5f0f      	SUBI R16,-1
0002c1 dfe3      	RCALL SUBOPT_0xA
0002c2 e0f0      	LDI  R31,0
0002c3 dfe4      	RCALL SUBOPT_0xB
0002c4 8310      	ST   Z,R17
0002c5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:14 WORDS
                 SUBOPT_0x11:
0002c6 2fe0      	MOV  R30,R16
0002c7 5f0f      	SUBI R16,-1
0002c8 dfdc      	RCALL SUBOPT_0xA
0002c9 e0f0      	LDI  R31,0
0002ca cfdd      	RJMP SUBOPT_0xB
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:30 WORDS
                 SUBOPT_0x12:
                +
0002cb 93e0 0254+STS _PN532_msg + ( 80 ) , R30
0002cd 93f0 0255+STS _PN532_msg + ( 80 ) + 1 , R31
                 	__PUTW1MN _PN532_msg,80
0002cf ebe2      	LDI  R30,LOW(_twi_tx)
0002d0 e0f1      	LDI  R31,HIGH(_twi_tx)
0002d1 93fa      	ST   -Y,R31
0002d2 93ea      	ST   -Y,R30
0002d3 e0a4      	LDI  R26,LOW(_PN532_msg)
0002d4 e0b2      	LDI  R27,HIGH(_PN532_msg)
0002d5 de27      	RCALL _PN532_build_msg
0002d6 eba2      	LDI  R26,LOW(_twi_tx)
0002d7 e0b1      	LDI  R27,HIGH(_twi_tx)
0002d8 de0f      	RCALL _PN532_cmd
0002d9 e1a4      	LDI  R26,LOW(20)
0002da e0b0      	LDI  R27,0
0002db c024      	RJMP _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x13:
0002dc e1a4      	LDI  R26,LOW(20)
0002dd e0b0      	LDI  R27,0
0002de c021      	RJMP _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x14:
0002df 93e0 0204 	STS  _PN532_msg,R30
0002e1 e0e1      	LDI  R30,LOW(1)
                +
0002e2 93e0 0205+STS _PN532_msg + ( 1 ) , R30
                 	__PUTB1MN _PN532_msg,1
0002e4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x15:
0002e5 e6a0      	LDI  R26,LOW(_twi_rx)
0002e6 e0b1      	LDI  R27,HIGH(_twi_rx)
0002e7 de55      	RCALL _PN532_read
0002e8 e6e0      	LDI  R30,LOW(_twi_rx)
0002e9 e0f1      	LDI  R31,HIGH(_twi_rx)
0002ea 93fa      	ST   -Y,R31
0002eb 93ea      	ST   -Y,R30
0002ec e0e4      	LDI  R30,LOW(_PN532_msg)
0002ed e0f2      	LDI  R31,HIGH(_PN532_msg)
0002ee 93fa      	ST   -Y,R31
0002ef 93ea      	ST   -Y,R30
0002f0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x16:
                +
0002f1 e184     +LDI R24 , LOW ( 20 )
                +__DELAY_USB_LOOP :
0002f2 958a     +DEC R24
0002f3 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 20
0002f4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x17:
0002f5 df48      	RCALL __lcd_write_data
0002f6 e0a3      	LDI  R26,LOW(3)
0002f7 e0b0      	LDI  R27,0
0002f8 c007      	RJMP _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x18:
0002f9 e3a0      	LDI  R26,LOW(48)
0002fa df24      	RCALL __lcd_write_nibble_G101
                +
0002fb e28c     +LDI R24 , LOW ( 300 )
0002fc e091     +LDI R25 , HIGH ( 300 )
                +__DELAY_USW_LOOP :
0002fd 9701     +SBIW R24 , 1
0002fe f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 300
0002ff 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000300 9610      	adiw r26,0
000301 f039      	breq __delay_ms1
                 __delay_ms0:
                +
000302 eb88     +LDI R24 , LOW ( 0xBB8 )
000303 e09b     +LDI R25 , HIGH ( 0xBB8 )
                +__DELAY_USW_LOOP :
000304 9701     +SBIW R24 , 1
000305 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xBB8
000306 95a8      	wdr
000307 9711      	sbiw r26,1
000308 f7c9      	brne __delay_ms0
                 __delay_ms1:
000309 9508      	ret
                 
                 __GETW1P:
00030a 91ed      	LD   R30,X+
00030b 91fc      	LD   R31,X
00030c 9711      	SBIW R26,1
00030d 9508      	RET
                 
                 __SWAPW12:
00030e 2e1b      	MOV  R1,R27
00030f 2fbf      	MOV  R27,R31
000310 2df1      	MOV  R31,R1
                 
                 __SWAPB12:
000311 2e1a      	MOV  R1,R26
000312 2fae      	MOV  R26,R30
000313 2de1      	MOV  R30,R1
000314 9508      	RET
                 
                 __SAVELOCR2:
000315 931a      	ST   -Y,R17
000316 930a      	ST   -Y,R16
000317 9508      	RET
                 
                 __LOADLOCR2:
000318 8119      	LDD  R17,Y+1
000319 8108      	LD   R16,Y
00031a 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega8 register use summary:
r0 :   8 r1 :   5 r2 :   1 r3 :   0 r4 :   0 r5 :   4 r6 :   3 r7 :   3 
r8 :  11 r9 :   3 r10:   1 r11:   1 r12:   0 r13:   1 r14:   0 r15:   0 
r16:  17 r17:  19 r18:   0 r19:   0 r20:   0 r21:   0 r22:   2 r23:   0 
r24:  17 r25:   5 r26:  82 r27:  42 r28:   6 r29:   1 r30: 228 r31:  45 
x  :  24 y  :  72 z  :  12 
Registers used: 25 out of 35 (71.4%)

ATmega8 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   2 add   :   3 
adiw  :  14 and   :   0 andi  :   6 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :  14 
brge  :   5 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 
brlt  :   0 brmi  :   0 brne  :  18 brpl  :   0 brsh  :   0 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 cbi   :   8 
cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 clr   :   6 
cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :   5 
cpc   :   3 cpi   :  13 cpse  :   0 dec   :   3 des   :   0 eor   :   0 
fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 in    :   7 
inc   :   2 ld    :  30 ldd   :  30 ldi   : 124 lds   :   2 lpm   :   7 
lsl   :   2 lsr   :   0 mov   :  18 movw  :  19 mul   :   0 muls  :   0 
mulsu :   0 neg   :   2 nop   :   0 or    :   0 ori   :   1 out   :  48 
pop   :  10 push  :  10 rcall : 145 ret   :  37 reti  :   1 rjmp  :  62 
rol   :   0 ror   :   0 sbc   :   1 sbci  :   6 sbi   :  12 sbic  :   0 
sbis  :   1 sbiw  :  10 sbr   :   0 sbrc  :   0 sbrs  :   3 sec   :   0 
seh   :   0 sei   :   1 sen   :   0 ser   :   0 ses   :   0 set   :   1 
sev   :   0 sez   :   0 sleep :   0 spm   :   0 st    :  41 std   :   0 
sts   :  10 sub   :   1 subi  :  11 swap  :   2 tst   :   0 wdr   :   1 

Instructions used: 48 out of 114 (42.1%)

ATmega8 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000636   1544     46   1590    8192  19.4%
[.dseg] 0x000060 0x000262      0    258    258    1024  25.2%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 9 warnings
