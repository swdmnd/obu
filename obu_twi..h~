#ifndef __OBU_TWI__
#define __OBU_TWI__

#include <mega8.h>
#include <delay.h>

#define PN532_ADD (0x48)
#define TWI_BUFFER_SIZE 80
#define TWI_MSG_BUFFER_SIZE 80

#define PN532_PREAMBLE 0x00
#define PN532_POSTAMBLE 0x00

#define PN532_START 0x00
#define PN532_LEN 0x02
#define PN532_LCS 0x03
#define PN532_TFI 0x04
#define PN532_DATA 0x05

typedef TWI_BUFFER_STRUCT{
  unsigned char buffer[TWI_BUFFER_SIZE];
  int length=0;
};

extern TWI_BUFFER_STRUCT twi_rx;
extern TWI_BUFFER_STRUCT twi_tx;
extern TWI_BUFFER_STRUCT PN532_msg;
unsigned char checksum;

void TWIInit(void)
{
    //set SCL to 100kHz
    TWSR = 0x00;
    TWBR = 7;   //347,826
    //enable TWI
    TWCR = (1<<TWEN);
}

void TWIStart(void)
{
    TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
    while ((TWCR & (1<<TWINT)) == 0);   
}
//send stop signal
void TWIStop(void)
{
    TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
}

void TWIWrite(unsigned char u8data)
{
    TWDR = u8data;
    TWCR = (1<<TWINT)|(1<<TWEN);
    while ((TWCR & (1<<TWINT)) == 0); 
}

//read byte with ACK (Set TWEA, clear TWEA to send NACK, indicating master receiver has read the last byte)
unsigned char TWIRead(int ack)
{
    TWCR = (1<<TWINT)|(1<<TWEN)|(ack<<TWEA);
    while ((TWCR & (1<<TWINT)) == 0);   
    return TWDR;
}

void PN532_cmd(unsigned char* msg, int len)
{
  TWIStart();
  TWIWrite(PN532_ADD);
  //TWIWrite(PN532_PREAMBLE);
  for(i = 0; i < len; ++i){
    TWIWrite(msg[i]);
  }     
  //TWIWrite(PN532_POSTAMBLE);
  TWIStop();  
}

int PN532_build_msg(unsigned char* buffer, unsigned char* msg, int len)
{
  int msg_length = 0;
  checksum = 0xD4;

  *(buffer+PN532_START)=0x00;                     ++msg_length;
  *(buffer+PN532_START+1)=0xFF;                   ++msg_length;
  *(buffer+PN532_LEN)=len+1;                      ++msg_length;
  *(buffer+PN532_LCS)=(~(len+1))+1;               ++msg_length;  
  *(buffer+PN532_TFI)=0xD4;                       ++msg_length;
  for(i = 0; i<len; ++i){
    *(buffer+PN532_DATA+i)=*(msg+i);              ++msg_length;
    checksum += *(msg+i);
  }
  *(buffer+PN532_DATA+i)= (~(checksum&0xFF))+1;   ++msg_length;
  return msg_length;
}

bool PN532_get_msg(unsigned char* dest)
{ 
  unsigned char data = 0x00;
  unsigned char len = 0x00;       
  // check ready bit
  while(1){
    TWIStart();
    TWIWrite(PN532_ADD | 1); 
    //TWIStart();
    data = TWIRead(1);
    putchar(data); 
    if(data==0x00) TWIStop();
    else if(data==0x01) break;
  }    
  // get rid of preamble
  TWIRead(1);            
  //TWIStart();
  //check start of packet
  if(TWIRead(1)!=0x00) {TWIStop(); return false;}
  if(TWIRead(1)!=0xFF) {TWIStop(); return false;}
  
  //get length
  len=TWIRead(1);
  //skip length checksum
  TWIRead(1);
  //skip TFI
  TWIRead(1);
  
  for(i =0; i < len-1; ++i)
  {
    dest[i] = TWIRead(1);
  }
  msg_length = i;
  
  //skip data checksum
  TWIRead(0);
  
  //close comm
  TWIStop();
  
  //return true on success
  return true;
}

bool PN532_wait_for_ack(){
  unsigned char data = 0x00;       
  // check ready bit
  while(1){
    TWIStart();
    TWIWrite(PN532_ADD | 1); 
    //TWIStart();
    data = TWIRead(1);
    putchar(data); 
    if(data==0x00) TWIStop();
    else if(data==0x01) break;
  }    
  // get rid of preamble
  TWIRead(1);
  //TWIStart();
  //check start of packet
  if((data=TWIRead(1))!=0x00) {TWIStop(); return false;} putchar(data);
  if((data=TWIRead(1))!=0xFF) {TWIStop(); return false;} putchar(data);
  
  //check ack
  if((data=TWIRead(1))!=0x00) {TWIStop(); return false;} putchar(data);
  if((data=TWIRead(0))!=0xFF) {TWIStop(); return false;} putchar(data);
  TWIStop();
  return true;
}

void PN532_begin(){
  msg_buffer[0]=0x02; 
  msg_length=1;              
  PN532_build_msg(twi_tx_buffer, msg_buffer, msg_length);
  for(i = 0; i<msg_length+6; ++i)
  {
    printf("%c", twi_tx_buffer[i]);
  }
  PN532_cmd(twi_tx_buffer, PN532_build_msg(twi_tx_buffer, msg_buffer, msg_length));
  putchar(TWSR);
  PN532_wait_for_ack();
}

void read_rfid()
{  
  //putchar(255);
  msg_buffer[0]=0x02; 
  msg_length=1;
  PN532_cmd(twi_tx_buffer, PN532_build_msg(twi_tx_buffer, msg_buffer, msg_length)); 
  delay_ms(20);
  while(!PN532_wait_for_ack()) delay_ms(20); 
  delay_ms(20);
  PN532_get_msg(msg_buffer);
  
  for(i = 0; i<msg_length; ++i)
  {
    printf("%c", msg_buffer[i]);
  }
}

#endif
